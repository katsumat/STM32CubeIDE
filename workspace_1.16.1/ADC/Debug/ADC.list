
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003614  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080037ec  080037ec  000047ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037fc  080037fc  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080037fc  080037fc  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037fc  080037fc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037fc  080037fc  000047fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003800  08003800  00004800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003804  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08003810  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003810  000050fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b12d  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d2b  00000000  00000000  00010169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  00011e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000850  00000000  00000000  000129b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e500  00000000  00000000  00013200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf2f  00000000  00000000  00031700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c927b  00000000  00000000  0003d62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001068aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d68  00000000  00000000  001068f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00109658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080037d4 	.word	0x080037d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080037d4 	.word	0x080037d4

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa3b 	bl	8000696 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f812 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8fe 	bl	8000424 <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 f8d2 	bl	80003d0 <MX_DMA_Init>
  MX_ADC1_Init();
 800022c:	f000 f858 	bl	80002e0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCValue, 1);
 8000230:	2201      	movs	r2, #1
 8000232:	4903      	ldr	r1, [pc, #12]	@ (8000240 <main+0x28>)
 8000234:	4803      	ldr	r0, [pc, #12]	@ (8000244 <main+0x2c>)
 8000236:	f000 fe6b 	bl	8000f10 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023a:	bf00      	nop
 800023c:	e7fd      	b.n	800023a <main+0x22>
 800023e:	bf00      	nop
 8000240:	20000028 	.word	0x20000028
 8000244:	2000002c 	.word	0x2000002c

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b094      	sub	sp, #80	@ 0x50
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2238      	movs	r2, #56	@ 0x38
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f003 fa90 	bl	800377c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800026a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800026e:	f002 fa9f 	bl	80027b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000272:	2302      	movs	r3, #2
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800027a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027c:	2340      	movs	r3, #64	@ 0x40
 800027e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000280:	2302      	movs	r3, #2
 8000282:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000284:	2302      	movs	r3, #2
 8000286:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000288:	2301      	movs	r3, #1
 800028a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 800028c:	2315      	movs	r3, #21
 800028e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000290:	2302      	movs	r3, #2
 8000292:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000294:	2302      	movs	r3, #2
 8000296:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000298:	2302      	movs	r3, #2
 800029a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	4618      	mov	r0, r3
 80002a2:	f002 fb39 	bl	8002918 <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002ac:	f000 f8d2 	bl	8000454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	230f      	movs	r3, #15
 80002b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b4:	2303      	movs	r3, #3
 80002b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002b8:	2380      	movs	r3, #128	@ 0x80
 80002ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2102      	movs	r1, #2
 80002c8:	4618      	mov	r0, r3
 80002ca:	f002 fe37 	bl	8002f3c <HAL_RCC_ClockConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002d4:	f000 f8be 	bl	8000454 <Error_Handler>
  }
}
 80002d8:	bf00      	nop
 80002da:	3750      	adds	r7, #80	@ 0x50
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08c      	sub	sp, #48	@ 0x30
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2220      	movs	r2, #32
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f003 fa3f 	bl	800377c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002fe:	4b32      	ldr	r3, [pc, #200]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 8000300:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000306:	4b30      	ldr	r3, [pc, #192]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 8000308:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800030c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800030e:	4b2e      	ldr	r3, [pc, #184]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000314:	4b2c      	ldr	r3, [pc, #176]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800031a:	4b2b      	ldr	r3, [pc, #172]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000320:	4b29      	ldr	r3, [pc, #164]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 8000322:	2200      	movs	r2, #0
 8000324:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000326:	4b28      	ldr	r3, [pc, #160]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 8000328:	2204      	movs	r2, #4
 800032a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800032c:	4b26      	ldr	r3, [pc, #152]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 800032e:	2200      	movs	r2, #0
 8000330:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000332:	4b25      	ldr	r3, [pc, #148]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 8000334:	2201      	movs	r2, #1
 8000336:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000338:	4b23      	ldr	r3, [pc, #140]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 800033a:	2201      	movs	r2, #1
 800033c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800033e:	4b22      	ldr	r3, [pc, #136]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 8000340:	2200      	movs	r2, #0
 8000342:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000346:	4b20      	ldr	r3, [pc, #128]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 8000348:	2200      	movs	r2, #0
 800034a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800034c:	4b1e      	ldr	r3, [pc, #120]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 800034e:	2200      	movs	r2, #0
 8000350:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000352:	4b1d      	ldr	r3, [pc, #116]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 8000354:	2201      	movs	r2, #1
 8000356:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800035a:	4b1b      	ldr	r3, [pc, #108]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 800035c:	2200      	movs	r2, #0
 800035e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000360:	4b19      	ldr	r3, [pc, #100]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 8000362:	2200      	movs	r2, #0
 8000364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000368:	4817      	ldr	r0, [pc, #92]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 800036a:	f000 fc23 	bl	8000bb4 <HAL_ADC_Init>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000374:	f000 f86e 	bl	8000454 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000378:	2300      	movs	r3, #0
 800037a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800037c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000380:	4619      	mov	r1, r3
 8000382:	4811      	ldr	r0, [pc, #68]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 8000384:	f001 fc28 	bl	8001bd8 <HAL_ADCEx_MultiModeConfigChannel>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800038e:	f000 f861 	bl	8000454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000392:	4b0e      	ldr	r3, [pc, #56]	@ (80003cc <MX_ADC1_Init+0xec>)
 8000394:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000396:	2306      	movs	r3, #6
 8000398:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800039e:	237f      	movs	r3, #127	@ 0x7f
 80003a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003a2:	2304      	movs	r3, #4
 80003a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4619      	mov	r1, r3
 80003ae:	4806      	ldr	r0, [pc, #24]	@ (80003c8 <MX_ADC1_Init+0xe8>)
 80003b0:	f000 fe96 	bl	80010e0 <HAL_ADC_ConfigChannel>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80003ba:	f000 f84b 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003be:	bf00      	nop
 80003c0:	3730      	adds	r7, #48	@ 0x30
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	2000002c 	.word	0x2000002c
 80003cc:	04300002 	.word	0x04300002

080003d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80003d6:	4b12      	ldr	r3, [pc, #72]	@ (8000420 <MX_DMA_Init+0x50>)
 80003d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003da:	4a11      	ldr	r2, [pc, #68]	@ (8000420 <MX_DMA_Init+0x50>)
 80003dc:	f043 0304 	orr.w	r3, r3, #4
 80003e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80003e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000420 <MX_DMA_Init+0x50>)
 80003e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003e6:	f003 0304 	and.w	r3, r3, #4
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80003ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000420 <MX_DMA_Init+0x50>)
 80003f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000420 <MX_DMA_Init+0x50>)
 80003f4:	f043 0302 	orr.w	r3, r3, #2
 80003f8:	6493      	str	r3, [r2, #72]	@ 0x48
 80003fa:	4b09      	ldr	r3, [pc, #36]	@ (8000420 <MX_DMA_Init+0x50>)
 80003fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003fe:	f003 0302 	and.w	r3, r3, #2
 8000402:	603b      	str	r3, [r7, #0]
 8000404:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000406:	2200      	movs	r2, #0
 8000408:	2100      	movs	r1, #0
 800040a:	2038      	movs	r0, #56	@ 0x38
 800040c:	f001 fda7 	bl	8001f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000410:	2038      	movs	r0, #56	@ 0x38
 8000412:	f001 fdbe 	bl	8001f92 <HAL_NVIC_EnableIRQ>

}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	4b09      	ldr	r3, [pc, #36]	@ (8000450 <MX_GPIO_Init+0x2c>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042e:	4a08      	ldr	r2, [pc, #32]	@ (8000450 <MX_GPIO_Init+0x2c>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000436:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <MX_GPIO_Init+0x2c>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
}
 800045a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <Error_Handler+0x8>

08000460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000466:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <HAL_MspInit+0x44>)
 8000468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800046a:	4a0e      	ldr	r2, [pc, #56]	@ (80004a4 <HAL_MspInit+0x44>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6613      	str	r3, [r2, #96]	@ 0x60
 8000472:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <HAL_MspInit+0x44>)
 8000474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047e:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <HAL_MspInit+0x44>)
 8000480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000482:	4a08      	ldr	r2, [pc, #32]	@ (80004a4 <HAL_MspInit+0x44>)
 8000484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000488:	6593      	str	r3, [r2, #88]	@ 0x58
 800048a:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <HAL_MspInit+0x44>)
 800048c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800048e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000492:	603b      	str	r3, [r7, #0]
 8000494:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000496:	f002 fa2f 	bl	80028f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000

080004a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b09e      	sub	sp, #120	@ 0x78
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	2250      	movs	r2, #80	@ 0x50
 80004c6:	2100      	movs	r1, #0
 80004c8:	4618      	mov	r0, r3
 80004ca:	f003 f957 	bl	800377c <memset>
  if(hadc->Instance==ADC1)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80004d6:	d15f      	bne.n	8000598 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80004d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004dc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80004de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80004e2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	4618      	mov	r0, r3
 80004ea:	f002 ff0b 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80004f4:	f7ff ffae 	bl	8000454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004f8:	4b29      	ldr	r3, [pc, #164]	@ (80005a0 <HAL_ADC_MspInit+0xf8>)
 80004fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fc:	4a28      	ldr	r2, [pc, #160]	@ (80005a0 <HAL_ADC_MspInit+0xf8>)
 80004fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000502:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000504:	4b26      	ldr	r3, [pc, #152]	@ (80005a0 <HAL_ADC_MspInit+0xf8>)
 8000506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b23      	ldr	r3, [pc, #140]	@ (80005a0 <HAL_ADC_MspInit+0xf8>)
 8000512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000514:	4a22      	ldr	r2, [pc, #136]	@ (80005a0 <HAL_ADC_MspInit+0xf8>)
 8000516:	f043 0301 	orr.w	r3, r3, #1
 800051a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800051c:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <HAL_ADC_MspInit+0xf8>)
 800051e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000520:	f003 0301 	and.w	r3, r3, #1
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000528:	2301      	movs	r3, #1
 800052a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800052c:	2303      	movs	r3, #3
 800052e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000538:	4619      	mov	r1, r3
 800053a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053e:	f001 ffb5 	bl	80024ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 8000542:	4b18      	ldr	r3, [pc, #96]	@ (80005a4 <HAL_ADC_MspInit+0xfc>)
 8000544:	4a18      	ldr	r2, [pc, #96]	@ (80005a8 <HAL_ADC_MspInit+0x100>)
 8000546:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000548:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <HAL_ADC_MspInit+0xfc>)
 800054a:	2205      	movs	r2, #5
 800054c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800054e:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <HAL_ADC_MspInit+0xfc>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000554:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <HAL_ADC_MspInit+0xfc>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 800055a:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <HAL_ADC_MspInit+0xfc>)
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000560:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <HAL_ADC_MspInit+0xfc>)
 8000562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000566:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000568:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <HAL_ADC_MspInit+0xfc>)
 800056a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800056e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000570:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <HAL_ADC_MspInit+0xfc>)
 8000572:	2220      	movs	r2, #32
 8000574:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000576:	4b0b      	ldr	r3, [pc, #44]	@ (80005a4 <HAL_ADC_MspInit+0xfc>)
 8000578:	2200      	movs	r2, #0
 800057a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800057c:	4809      	ldr	r0, [pc, #36]	@ (80005a4 <HAL_ADC_MspInit+0xfc>)
 800057e:	f001 fd23 	bl	8001fc8 <HAL_DMA_Init>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000588:	f7ff ff64 	bl	8000454 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a05      	ldr	r2, [pc, #20]	@ (80005a4 <HAL_ADC_MspInit+0xfc>)
 8000590:	655a      	str	r2, [r3, #84]	@ 0x54
 8000592:	4a04      	ldr	r2, [pc, #16]	@ (80005a4 <HAL_ADC_MspInit+0xfc>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000598:	bf00      	nop
 800059a:	3778      	adds	r7, #120	@ 0x78
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	20000098 	.word	0x20000098
 80005a8:	40020408 	.word	0x40020408

080005ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <NMI_Handler+0x4>

080005b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <MemManage_Handler+0x4>

080005c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <BusFault_Handler+0x4>

080005cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <UsageFault_Handler+0x4>

080005d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000602:	f000 f89b 	bl	800073c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000610:	4802      	ldr	r0, [pc, #8]	@ (800061c <DMA2_Channel1_IRQHandler+0x10>)
 8000612:	f001 fdfc 	bl	800220e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000098 	.word	0x20000098

08000620 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <SystemInit+0x20>)
 8000626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800062a:	4a05      	ldr	r2, [pc, #20]	@ (8000640 <SystemInit+0x20>)
 800062c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000630:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000644:	480d      	ldr	r0, [pc, #52]	@ (800067c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000646:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000648:	f7ff ffea 	bl	8000620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800064c:	480c      	ldr	r0, [pc, #48]	@ (8000680 <LoopForever+0x6>)
  ldr r1, =_edata
 800064e:	490d      	ldr	r1, [pc, #52]	@ (8000684 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000650:	4a0d      	ldr	r2, [pc, #52]	@ (8000688 <LoopForever+0xe>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000654:	e002      	b.n	800065c <LoopCopyDataInit>

08000656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065a:	3304      	adds	r3, #4

0800065c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800065c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000660:	d3f9      	bcc.n	8000656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000662:	4a0a      	ldr	r2, [pc, #40]	@ (800068c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000664:	4c0a      	ldr	r4, [pc, #40]	@ (8000690 <LoopForever+0x16>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000668:	e001      	b.n	800066e <LoopFillZerobss>

0800066a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800066c:	3204      	adds	r2, #4

0800066e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000670:	d3fb      	bcc.n	800066a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000672:	f003 f88b 	bl	800378c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000676:	f7ff fdcf 	bl	8000218 <main>

0800067a <LoopForever>:

LoopForever:
    b LoopForever
 800067a:	e7fe      	b.n	800067a <LoopForever>
  ldr   r0, =_estack
 800067c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000684:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000688:	08003804 	.word	0x08003804
  ldr r2, =_sbss
 800068c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000690:	200000fc 	.word	0x200000fc

08000694 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000694:	e7fe      	b.n	8000694 <ADC1_2_IRQHandler>

08000696 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800069c:	2300      	movs	r3, #0
 800069e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a0:	2003      	movs	r0, #3
 80006a2:	f001 fc51 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006a6:	200f      	movs	r0, #15
 80006a8:	f000 f80e 	bl	80006c8 <HAL_InitTick>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d002      	beq.n	80006b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
 80006b4:	71fb      	strb	r3, [r7, #7]
 80006b6:	e001      	b.n	80006bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006b8:	f7ff fed2 	bl	8000460 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006bc:	79fb      	ldrb	r3, [r7, #7]

}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006d0:	2300      	movs	r3, #0
 80006d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006d4:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <HAL_InitTick+0x68>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d022      	beq.n	8000722 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006dc:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <HAL_InitTick+0x6c>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <HAL_InitTick+0x68>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80006ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fc5c 	bl	8001fae <HAL_SYSTICK_Config>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d10f      	bne.n	800071c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b0f      	cmp	r3, #15
 8000700:	d809      	bhi.n	8000716 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000702:	2200      	movs	r2, #0
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	f04f 30ff 	mov.w	r0, #4294967295
 800070a:	f001 fc28 	bl	8001f5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800070e:	4a0a      	ldr	r2, [pc, #40]	@ (8000738 <HAL_InitTick+0x70>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	e007      	b.n	8000726 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	73fb      	strb	r3, [r7, #15]
 800071a:	e004      	b.n	8000726 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800071c:	2301      	movs	r3, #1
 800071e:	73fb      	strb	r3, [r7, #15]
 8000720:	e001      	b.n	8000726 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000726:	7bfb      	ldrb	r3, [r7, #15]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000008 	.word	0x20000008
 8000734:	20000000 	.word	0x20000000
 8000738:	20000004 	.word	0x20000004

0800073c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000740:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <HAL_IncTick+0x1c>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b05      	ldr	r3, [pc, #20]	@ (800075c <HAL_IncTick+0x20>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4413      	add	r3, r2
 800074a:	4a03      	ldr	r2, [pc, #12]	@ (8000758 <HAL_IncTick+0x1c>)
 800074c:	6013      	str	r3, [r2, #0]
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	200000f8 	.word	0x200000f8
 800075c:	20000008 	.word	0x20000008

08000760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return uwTick;
 8000764:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <HAL_GetTick+0x14>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	200000f8 	.word	0x200000f8

08000778 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	431a      	orrs	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	609a      	str	r2, [r3, #8]
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800079e:	b480      	push	{r7}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	431a      	orrs	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	609a      	str	r2, [r3, #8]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b087      	sub	sp, #28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
 80007ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	3360      	adds	r3, #96	@ 0x60
 80007f2:	461a      	mov	r2, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <LL_ADC_SetOffset+0x44>)
 8000802:	4013      	ands	r3, r2
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	430a      	orrs	r2, r1
 800080e:	4313      	orrs	r3, r2
 8000810:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000818:	bf00      	nop
 800081a:	371c      	adds	r7, #28
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	03fff000 	.word	0x03fff000

08000828 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3360      	adds	r3, #96	@ 0x60
 8000836:	461a      	mov	r2, r3
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000848:	4618      	mov	r0, r3
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000854:	b480      	push	{r7}
 8000856:	b087      	sub	sp, #28
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	3360      	adds	r3, #96	@ 0x60
 8000864:	461a      	mov	r2, r3
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	4413      	add	r3, r2
 800086c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	431a      	orrs	r2, r3
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800087e:	bf00      	nop
 8000880:	371c      	adds	r7, #28
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800088a:	b480      	push	{r7}
 800088c:	b087      	sub	sp, #28
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	3360      	adds	r3, #96	@ 0x60
 800089a:	461a      	mov	r2, r3
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	431a      	orrs	r2, r3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80008b4:	bf00      	nop
 80008b6:	371c      	adds	r7, #28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3360      	adds	r3, #96	@ 0x60
 80008d0:	461a      	mov	r2, r3
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	4413      	add	r3, r2
 80008d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	431a      	orrs	r2, r3
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80008ea:	bf00      	nop
 80008ec:	371c      	adds	r7, #28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	431a      	orrs	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	615a      	str	r2, [r3, #20]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800092c:	2b00      	cmp	r3, #0
 800092e:	d101      	bne.n	8000934 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000930:	2301      	movs	r3, #1
 8000932:	e000      	b.n	8000936 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000942:	b480      	push	{r7}
 8000944:	b087      	sub	sp, #28
 8000946:	af00      	add	r7, sp, #0
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	3330      	adds	r3, #48	@ 0x30
 8000952:	461a      	mov	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	0a1b      	lsrs	r3, r3, #8
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	f003 030c 	and.w	r3, r3, #12
 800095e:	4413      	add	r3, r2
 8000960:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	f003 031f 	and.w	r3, r3, #31
 800096c:	211f      	movs	r1, #31
 800096e:	fa01 f303 	lsl.w	r3, r1, r3
 8000972:	43db      	mvns	r3, r3
 8000974:	401a      	ands	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	0e9b      	lsrs	r3, r3, #26
 800097a:	f003 011f 	and.w	r1, r3, #31
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	f003 031f 	and.w	r3, r3, #31
 8000984:	fa01 f303 	lsl.w	r3, r1, r3
 8000988:	431a      	orrs	r2, r3
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800098e:	bf00      	nop
 8000990:	371c      	adds	r7, #28
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800099a:	b480      	push	{r7}
 800099c:	b087      	sub	sp, #28
 800099e:	af00      	add	r7, sp, #0
 80009a0:	60f8      	str	r0, [r7, #12]
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	3314      	adds	r3, #20
 80009aa:	461a      	mov	r2, r3
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	0e5b      	lsrs	r3, r3, #25
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	4413      	add	r3, r2
 80009b8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	0d1b      	lsrs	r3, r3, #20
 80009c2:	f003 031f 	and.w	r3, r3, #31
 80009c6:	2107      	movs	r1, #7
 80009c8:	fa01 f303 	lsl.w	r3, r1, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	401a      	ands	r2, r3
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	0d1b      	lsrs	r3, r3, #20
 80009d4:	f003 031f 	and.w	r3, r3, #31
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	431a      	orrs	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80009e4:	bf00      	nop
 80009e6:	371c      	adds	r7, #28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0318 	and.w	r3, r3, #24
 8000a12:	4908      	ldr	r1, [pc, #32]	@ (8000a34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000a14:	40d9      	lsrs	r1, r3
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	400b      	ands	r3, r1
 8000a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000a26:	bf00      	nop
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	0007ffff 	.word	0x0007ffff

08000a38 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	f003 031f 	and.w	r3, r3, #31
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000a64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	6093      	str	r3, [r2, #8]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000a88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a8c:	d101      	bne.n	8000a92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e000      	b.n	8000a94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000ab0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ab4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000adc:	d101      	bne.n	8000ae2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000b00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b04:	f043 0201 	orr.w	r2, r3, #1
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d101      	bne.n	8000b30 <LL_ADC_IsEnabled+0x18>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e000      	b.n	8000b32 <LL_ADC_IsEnabled+0x1a>
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000b4e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b52:	f043 0204 	orr.w	r2, r3, #4
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	d101      	bne.n	8000b7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e000      	b.n	8000b80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	f003 0308 	and.w	r3, r3, #8
 8000b9c:	2b08      	cmp	r3, #8
 8000b9e:	d101      	bne.n	8000ba4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e000      	b.n	8000ba6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b089      	sub	sp, #36	@ 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e19b      	b.n	8000f06 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d109      	bne.n	8000bf0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff fc63 	bl	80004a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff3f 	bl	8000a78 <LL_ADC_IsDeepPowerDownEnabled>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d004      	beq.n	8000c0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff25 	bl	8000a54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff5a 	bl	8000ac8 <LL_ADC_IsInternalRegulatorEnabled>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d115      	bne.n	8000c46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff3e 	bl	8000aa0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000c24:	4b97      	ldr	r3, [pc, #604]	@ (8000e84 <HAL_ADC_Init+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	099b      	lsrs	r3, r3, #6
 8000c2a:	4a97      	ldr	r2, [pc, #604]	@ (8000e88 <HAL_ADC_Init+0x2d4>)
 8000c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c30:	099b      	lsrs	r3, r3, #6
 8000c32:	3301      	adds	r3, #1
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c38:	e002      	b.n	8000c40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1f9      	bne.n	8000c3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff3c 	bl	8000ac8 <LL_ADC_IsInternalRegulatorEnabled>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10d      	bne.n	8000c72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c5a:	f043 0210 	orr.w	r2, r3, #16
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c66:	f043 0201 	orr.w	r2, r3, #1
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff75 	bl	8000b66 <LL_ADC_REG_IsConversionOngoing>
 8000c7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 8134 	bne.w	8000ef4 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 8130 	bne.w	8000ef4 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000c9c:	f043 0202 	orr.w	r2, r3, #2
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff35 	bl	8000b18 <LL_ADC_IsEnabled>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d137      	bne.n	8000d24 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cbc:	d004      	beq.n	8000cc8 <HAL_ADC_Init+0x114>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a72      	ldr	r2, [pc, #456]	@ (8000e8c <HAL_ADC_Init+0x2d8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d10f      	bne.n	8000ce8 <HAL_ADC_Init+0x134>
 8000cc8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8000ccc:	f7ff ff24 	bl	8000b18 <LL_ADC_IsEnabled>
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	486e      	ldr	r0, [pc, #440]	@ (8000e8c <HAL_ADC_Init+0x2d8>)
 8000cd4:	f7ff ff20 	bl	8000b18 <LL_ADC_IsEnabled>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4323      	orrs	r3, r4
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	bf0c      	ite	eq
 8000ce0:	2301      	moveq	r3, #1
 8000ce2:	2300      	movne	r3, #0
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	e008      	b.n	8000cfa <HAL_ADC_Init+0x146>
 8000ce8:	4869      	ldr	r0, [pc, #420]	@ (8000e90 <HAL_ADC_Init+0x2dc>)
 8000cea:	f7ff ff15 	bl	8000b18 <LL_ADC_IsEnabled>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	bf0c      	ite	eq
 8000cf4:	2301      	moveq	r3, #1
 8000cf6:	2300      	movne	r3, #0
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d012      	beq.n	8000d24 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d06:	d004      	beq.n	8000d12 <HAL_ADC_Init+0x15e>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a5f      	ldr	r2, [pc, #380]	@ (8000e8c <HAL_ADC_Init+0x2d8>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d101      	bne.n	8000d16 <HAL_ADC_Init+0x162>
 8000d12:	4a60      	ldr	r2, [pc, #384]	@ (8000e94 <HAL_ADC_Init+0x2e0>)
 8000d14:	e000      	b.n	8000d18 <HAL_ADC_Init+0x164>
 8000d16:	4a60      	ldr	r2, [pc, #384]	@ (8000e98 <HAL_ADC_Init+0x2e4>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4610      	mov	r0, r2
 8000d20:	f7ff fd2a 	bl	8000778 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7f5b      	ldrb	r3, [r3, #29]
 8000d28:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d2e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000d34:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000d3a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d42:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d44:	4313      	orrs	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d106      	bne.n	8000d60 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d56:	3b01      	subs	r3, #1
 8000d58:	045b      	lsls	r3, r3, #17
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d009      	beq.n	8000d7c <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d6c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d74:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	4b46      	ldr	r3, [pc, #280]	@ (8000e9c <HAL_ADC_Init+0x2e8>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	6812      	ldr	r2, [r2, #0]
 8000d8a:	69b9      	ldr	r1, [r7, #24]
 8000d8c:	430b      	orrs	r3, r1
 8000d8e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff feee 	bl	8000b8c <LL_ADC_INJ_IsConversionOngoing>
 8000db0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d17b      	bne.n	8000eb0 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d178      	bne.n	8000eb0 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000dc2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000dca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000dda:	f023 0302 	bic.w	r3, r3, #2
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	6812      	ldr	r2, [r2, #0]
 8000de2:	69b9      	ldr	r1, [r7, #24]
 8000de4:	430b      	orrs	r3, r1
 8000de6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d017      	beq.n	8000e20 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000dfe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8000e08:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000e0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	6911      	ldr	r1, [r2, #16]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	6812      	ldr	r2, [r2, #0]
 8000e18:	430b      	orrs	r3, r1
 8000e1a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8000e1e:	e013      	b.n	8000e48 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	691a      	ldr	r2, [r3, #16]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000e2e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	6812      	ldr	r2, [r2, #0]
 8000e3c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000e40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e44:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d126      	bne.n	8000ea0 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000e68:	4311      	orrs	r1, r2
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000e6e:	4311      	orrs	r1, r2
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e74:	430a      	orrs	r2, r1
 8000e76:	431a      	orrs	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f042 0201 	orr.w	r2, r2, #1
 8000e80:	611a      	str	r2, [r3, #16]
 8000e82:	e015      	b.n	8000eb0 <HAL_ADC_Init+0x2fc>
 8000e84:	20000000 	.word	0x20000000
 8000e88:	053e2d63 	.word	0x053e2d63
 8000e8c:	50000100 	.word	0x50000100
 8000e90:	50000400 	.word	0x50000400
 8000e94:	50000300 	.word	0x50000300
 8000e98:	50000700 	.word	0x50000700
 8000e9c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	691a      	ldr	r2, [r3, #16]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0201 	bic.w	r2, r2, #1
 8000eae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d10c      	bne.n	8000ed2 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f023 010f 	bic.w	r1, r3, #15
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a1b      	ldr	r3, [r3, #32]
 8000ec6:	1e5a      	subs	r2, r3, #1
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ed0:	e007      	b.n	8000ee2 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 020f 	bic.w	r2, r2, #15
 8000ee0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ee6:	f023 0303 	bic.w	r3, r3, #3
 8000eea:	f043 0201 	orr.w	r2, r3, #1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000ef2:	e007      	b.n	8000f04 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ef8:	f043 0210 	orr.w	r2, r3, #16
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f04:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	@ 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd90      	pop	{r4, r7, pc}
 8000f0e:	bf00      	nop

08000f10 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f24:	d004      	beq.n	8000f30 <HAL_ADC_Start_DMA+0x20>
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a57      	ldr	r2, [pc, #348]	@ (8001088 <HAL_ADC_Start_DMA+0x178>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d101      	bne.n	8000f34 <HAL_ADC_Start_DMA+0x24>
 8000f30:	4b56      	ldr	r3, [pc, #344]	@ (800108c <HAL_ADC_Start_DMA+0x17c>)
 8000f32:	e000      	b.n	8000f36 <HAL_ADC_Start_DMA+0x26>
 8000f34:	4b56      	ldr	r3, [pc, #344]	@ (8001090 <HAL_ADC_Start_DMA+0x180>)
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fd7e 	bl	8000a38 <LL_ADC_GetMultimode>
 8000f3c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fe0f 	bl	8000b66 <LL_ADC_REG_IsConversionOngoing>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f040 8094 	bne.w	8001078 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d101      	bne.n	8000f5e <HAL_ADC_Start_DMA+0x4e>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e08f      	b.n	800107e <HAL_ADC_Start_DMA+0x16e>
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a4a      	ldr	r2, [pc, #296]	@ (8001094 <HAL_ADC_Start_DMA+0x184>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d008      	beq.n	8000f82 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d005      	beq.n	8000f82 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	2b05      	cmp	r3, #5
 8000f7a:	d002      	beq.n	8000f82 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	2b09      	cmp	r3, #9
 8000f80:	d173      	bne.n	800106a <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f000 fcd8 	bl	8001938 <ADC_Enable>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000f8c:	7dfb      	ldrb	r3, [r7, #23]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d166      	bne.n	8001060 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f96:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000f9a:	f023 0301 	bic.w	r3, r3, #1
 8000f9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a37      	ldr	r2, [pc, #220]	@ (8001088 <HAL_ADC_Start_DMA+0x178>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d002      	beq.n	8000fb6 <HAL_ADC_Start_DMA+0xa6>
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	e001      	b.n	8000fba <HAL_ADC_Start_DMA+0xaa>
 8000fb6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	6812      	ldr	r2, [r2, #0]
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d002      	beq.n	8000fc8 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d105      	bne.n	8000fd4 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fcc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d006      	beq.n	8000fee <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe4:	f023 0206 	bic.w	r2, r3, #6
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	661a      	str	r2, [r3, #96]	@ 0x60
 8000fec:	e002      	b.n	8000ff4 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ff8:	4a27      	ldr	r2, [pc, #156]	@ (8001098 <HAL_ADC_Start_DMA+0x188>)
 8000ffa:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001000:	4a26      	ldr	r2, [pc, #152]	@ (800109c <HAL_ADC_Start_DMA+0x18c>)
 8001002:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001008:	4a25      	ldr	r2, [pc, #148]	@ (80010a0 <HAL_ADC_Start_DMA+0x190>)
 800100a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	221c      	movs	r2, #28
 8001012:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 0210 	orr.w	r2, r2, #16
 800102a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f042 0201 	orr.w	r2, r2, #1
 800103a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3340      	adds	r3, #64	@ 0x40
 8001046:	4619      	mov	r1, r3
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f001 f864 	bl	8002118 <HAL_DMA_Start_IT>
 8001050:	4603      	mov	r3, r0
 8001052:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fd70 	bl	8000b3e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800105e:	e00d      	b.n	800107c <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001068:	e008      	b.n	800107c <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001076:	e001      	b.n	800107c <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001078:	2302      	movs	r3, #2
 800107a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800107c:	7dfb      	ldrb	r3, [r7, #23]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	50000100 	.word	0x50000100
 800108c:	50000300 	.word	0x50000300
 8001090:	50000700 	.word	0x50000700
 8001094:	50000400 	.word	0x50000400
 8001098:	08001a65 	.word	0x08001a65
 800109c:	08001b3d 	.word	0x08001b3d
 80010a0:	08001b59 	.word	0x08001b59

080010a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b0b6      	sub	sp, #216	@ 0xd8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d102      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x24>
 80010fe:	2302      	movs	r3, #2
 8001100:	f000 bc04 	b.w	800190c <HAL_ADC_ConfigChannel+0x82c>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fd28 	bl	8000b66 <LL_ADC_REG_IsConversionOngoing>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	f040 83e8 	bne.w	80018ee <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	6859      	ldr	r1, [r3, #4]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	f7ff fc09 	bl	8000942 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fd16 	bl	8000b66 <LL_ADC_REG_IsConversionOngoing>
 800113a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fd22 	bl	8000b8c <LL_ADC_INJ_IsConversionOngoing>
 8001148:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800114c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001150:	2b00      	cmp	r3, #0
 8001152:	f040 81d9 	bne.w	8001508 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001156:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800115a:	2b00      	cmp	r3, #0
 800115c:	f040 81d4 	bne.w	8001508 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001168:	d10f      	bne.n	800118a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2200      	movs	r2, #0
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fc10 	bl	800099a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fbb7 	bl	80008f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001188:	e00e      	b.n	80011a8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	6819      	ldr	r1, [r3, #0]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	461a      	mov	r2, r3
 8001198:	f7ff fbff 	bl	800099a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fba7 	bl	80008f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	695a      	ldr	r2, [r3, #20]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	08db      	lsrs	r3, r3, #3
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d022      	beq.n	8001210 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	6919      	ldr	r1, [r3, #16]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80011da:	f7ff fb01 	bl	80007e0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	6919      	ldr	r1, [r3, #16]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	461a      	mov	r2, r3
 80011ec:	f7ff fb4d 	bl	800088a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d102      	bne.n	8001206 <HAL_ADC_ConfigChannel+0x126>
 8001200:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001204:	e000      	b.n	8001208 <HAL_ADC_ConfigChannel+0x128>
 8001206:	2300      	movs	r3, #0
 8001208:	461a      	mov	r2, r3
 800120a:	f7ff fb59 	bl	80008c0 <LL_ADC_SetOffsetSaturation>
 800120e:	e17b      	b.n	8001508 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fb06 	bl	8000828 <LL_ADC_GetOffsetChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10a      	bne.n	800123c <HAL_ADC_ConfigChannel+0x15c>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fafb 	bl	8000828 <LL_ADC_GetOffsetChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	0e9b      	lsrs	r3, r3, #26
 8001236:	f003 021f 	and.w	r2, r3, #31
 800123a:	e01e      	b.n	800127a <HAL_ADC_ConfigChannel+0x19a>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff faf0 	bl	8000828 <LL_ADC_GetOffsetChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001252:	fa93 f3a3 	rbit	r3, r3
 8001256:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800125a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800125e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001262:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800126a:	2320      	movs	r3, #32
 800126c:	e004      	b.n	8001278 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800126e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001272:	fab3 f383 	clz	r3, r3
 8001276:	b2db      	uxtb	r3, r3
 8001278:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001282:	2b00      	cmp	r3, #0
 8001284:	d105      	bne.n	8001292 <HAL_ADC_ConfigChannel+0x1b2>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	0e9b      	lsrs	r3, r3, #26
 800128c:	f003 031f 	and.w	r3, r3, #31
 8001290:	e018      	b.n	80012c4 <HAL_ADC_ConfigChannel+0x1e4>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80012a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80012ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80012b6:	2320      	movs	r3, #32
 80012b8:	e004      	b.n	80012c4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80012ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80012be:	fab3 f383 	clz	r3, r3
 80012c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d106      	bne.n	80012d6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fabf 	bl	8000854 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2101      	movs	r1, #1
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff faa3 	bl	8000828 <LL_ADC_GetOffsetChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10a      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x222>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2101      	movs	r1, #1
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fa98 	bl	8000828 <LL_ADC_GetOffsetChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	0e9b      	lsrs	r3, r3, #26
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	e01e      	b.n	8001340 <HAL_ADC_ConfigChannel+0x260>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2101      	movs	r1, #1
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fa8d 	bl	8000828 <LL_ADC_GetOffsetChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001314:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001318:	fa93 f3a3 	rbit	r3, r3
 800131c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001320:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001324:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001328:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001330:	2320      	movs	r3, #32
 8001332:	e004      	b.n	800133e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001334:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001338:	fab3 f383 	clz	r3, r3
 800133c:	b2db      	uxtb	r3, r3
 800133e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001348:	2b00      	cmp	r3, #0
 800134a:	d105      	bne.n	8001358 <HAL_ADC_ConfigChannel+0x278>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	0e9b      	lsrs	r3, r3, #26
 8001352:	f003 031f 	and.w	r3, r3, #31
 8001356:	e018      	b.n	800138a <HAL_ADC_ConfigChannel+0x2aa>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001364:	fa93 f3a3 	rbit	r3, r3
 8001368:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800136c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001370:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001374:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800137c:	2320      	movs	r3, #32
 800137e:	e004      	b.n	800138a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001380:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001384:	fab3 f383 	clz	r3, r3
 8001388:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800138a:	429a      	cmp	r2, r3
 800138c:	d106      	bne.n	800139c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2200      	movs	r2, #0
 8001394:	2101      	movs	r1, #1
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fa5c 	bl	8000854 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2102      	movs	r1, #2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fa40 	bl	8000828 <LL_ADC_GetOffsetChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10a      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x2e8>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2102      	movs	r1, #2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fa35 	bl	8000828 <LL_ADC_GetOffsetChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	0e9b      	lsrs	r3, r3, #26
 80013c2:	f003 021f 	and.w	r2, r3, #31
 80013c6:	e01e      	b.n	8001406 <HAL_ADC_ConfigChannel+0x326>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2102      	movs	r1, #2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fa2a 	bl	8000828 <LL_ADC_GetOffsetChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80013e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80013ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80013ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80013f6:	2320      	movs	r3, #32
 80013f8:	e004      	b.n	8001404 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80013fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013fe:	fab3 f383 	clz	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800140e:	2b00      	cmp	r3, #0
 8001410:	d105      	bne.n	800141e <HAL_ADC_ConfigChannel+0x33e>
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	0e9b      	lsrs	r3, r3, #26
 8001418:	f003 031f 	and.w	r3, r3, #31
 800141c:	e016      	b.n	800144c <HAL_ADC_ConfigChannel+0x36c>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800142a:	fa93 f3a3 	rbit	r3, r3
 800142e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001430:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001432:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001436:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800143e:	2320      	movs	r3, #32
 8001440:	e004      	b.n	800144c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001442:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001446:	fab3 f383 	clz	r3, r3
 800144a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800144c:	429a      	cmp	r2, r3
 800144e:	d106      	bne.n	800145e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2200      	movs	r2, #0
 8001456:	2102      	movs	r1, #2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f9fb 	bl	8000854 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2103      	movs	r1, #3
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f9df 	bl	8000828 <LL_ADC_GetOffsetChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10a      	bne.n	800148a <HAL_ADC_ConfigChannel+0x3aa>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2103      	movs	r1, #3
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f9d4 	bl	8000828 <LL_ADC_GetOffsetChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	0e9b      	lsrs	r3, r3, #26
 8001484:	f003 021f 	and.w	r2, r3, #31
 8001488:	e017      	b.n	80014ba <HAL_ADC_ConfigChannel+0x3da>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2103      	movs	r1, #3
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f9c9 	bl	8000828 <LL_ADC_GetOffsetChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800149c:	fa93 f3a3 	rbit	r3, r3
 80014a0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80014a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014a4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80014a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80014ac:	2320      	movs	r3, #32
 80014ae:	e003      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80014b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014b2:	fab3 f383 	clz	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d105      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x3f2>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	0e9b      	lsrs	r3, r3, #26
 80014cc:	f003 031f 	and.w	r3, r3, #31
 80014d0:	e011      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x416>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014da:	fa93 f3a3 	rbit	r3, r3
 80014de:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80014e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80014e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80014ea:	2320      	movs	r3, #32
 80014ec:	e003      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80014ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014f0:	fab3 f383 	clz	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d106      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2200      	movs	r2, #0
 8001500:	2103      	movs	r1, #3
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f9a6 	bl	8000854 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fb03 	bl	8000b18 <LL_ADC_IsEnabled>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	f040 813d 	bne.w	8001794 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	6819      	ldr	r1, [r3, #0]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	461a      	mov	r2, r3
 8001528:	f7ff fa62 	bl	80009f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4aa2      	ldr	r2, [pc, #648]	@ (80017bc <HAL_ADC_ConfigChannel+0x6dc>)
 8001532:	4293      	cmp	r3, r2
 8001534:	f040 812e 	bne.w	8001794 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10b      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x480>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0e9b      	lsrs	r3, r3, #26
 800154e:	3301      	adds	r3, #1
 8001550:	f003 031f 	and.w	r3, r3, #31
 8001554:	2b09      	cmp	r3, #9
 8001556:	bf94      	ite	ls
 8001558:	2301      	movls	r3, #1
 800155a:	2300      	movhi	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	e019      	b.n	8001594 <HAL_ADC_ConfigChannel+0x4b4>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001568:	fa93 f3a3 	rbit	r3, r3
 800156c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800156e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001570:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001572:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001578:	2320      	movs	r3, #32
 800157a:	e003      	b.n	8001584 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800157c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800157e:	fab3 f383 	clz	r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	3301      	adds	r3, #1
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	2b09      	cmp	r3, #9
 800158c:	bf94      	ite	ls
 800158e:	2301      	movls	r3, #1
 8001590:	2300      	movhi	r3, #0
 8001592:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001594:	2b00      	cmp	r3, #0
 8001596:	d079      	beq.n	800168c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d107      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x4d4>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0e9b      	lsrs	r3, r3, #26
 80015aa:	3301      	adds	r3, #1
 80015ac:	069b      	lsls	r3, r3, #26
 80015ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80015b2:	e015      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x500>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80015bc:	fa93 f3a3 	rbit	r3, r3
 80015c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80015c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80015c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80015cc:	2320      	movs	r3, #32
 80015ce:	e003      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80015d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015d2:	fab3 f383 	clz	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	3301      	adds	r3, #1
 80015da:	069b      	lsls	r3, r3, #26
 80015dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d109      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x520>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	0e9b      	lsrs	r3, r3, #26
 80015f2:	3301      	adds	r3, #1
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	2101      	movs	r1, #1
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	e017      	b.n	8001630 <HAL_ADC_ConfigChannel+0x550>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800160e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001610:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001618:	2320      	movs	r3, #32
 800161a:	e003      	b.n	8001624 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800161c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	3301      	adds	r3, #1
 8001626:	f003 031f 	and.w	r3, r3, #31
 800162a:	2101      	movs	r1, #1
 800162c:	fa01 f303 	lsl.w	r3, r1, r3
 8001630:	ea42 0103 	orr.w	r1, r2, r3
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10a      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x576>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0e9b      	lsrs	r3, r3, #26
 8001646:	3301      	adds	r3, #1
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	4613      	mov	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4413      	add	r3, r2
 8001652:	051b      	lsls	r3, r3, #20
 8001654:	e018      	b.n	8001688 <HAL_ADC_ConfigChannel+0x5a8>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800166e:	2320      	movs	r3, #32
 8001670:	e003      	b.n	800167a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	3301      	adds	r3, #1
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001688:	430b      	orrs	r3, r1
 800168a:	e07e      	b.n	800178a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001694:	2b00      	cmp	r3, #0
 8001696:	d107      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x5c8>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	0e9b      	lsrs	r3, r3, #26
 800169e:	3301      	adds	r3, #1
 80016a0:	069b      	lsls	r3, r3, #26
 80016a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016a6:	e015      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x5f4>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80016b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80016ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80016c0:	2320      	movs	r3, #32
 80016c2:	e003      	b.n	80016cc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80016c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	3301      	adds	r3, #1
 80016ce:	069b      	lsls	r3, r3, #26
 80016d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d109      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x614>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0e9b      	lsrs	r3, r3, #26
 80016e6:	3301      	adds	r3, #1
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	2101      	movs	r1, #1
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	e017      	b.n	8001724 <HAL_ADC_ConfigChannel+0x644>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	fa93 f3a3 	rbit	r3, r3
 8001700:	61fb      	str	r3, [r7, #28]
  return result;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800170c:	2320      	movs	r3, #32
 800170e:	e003      	b.n	8001718 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	fab3 f383 	clz	r3, r3
 8001716:	b2db      	uxtb	r3, r3
 8001718:	3301      	adds	r3, #1
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	2101      	movs	r1, #1
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	ea42 0103 	orr.w	r1, r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10d      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x670>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	0e9b      	lsrs	r3, r3, #26
 800173a:	3301      	adds	r3, #1
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	3b1e      	subs	r3, #30
 8001748:	051b      	lsls	r3, r3, #20
 800174a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800174e:	e01b      	b.n	8001788 <HAL_ADC_ConfigChannel+0x6a8>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	fa93 f3a3 	rbit	r3, r3
 800175c:	613b      	str	r3, [r7, #16]
  return result;
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001768:	2320      	movs	r3, #32
 800176a:	e003      	b.n	8001774 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fab3 f383 	clz	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	3301      	adds	r3, #1
 8001776:	f003 021f 	and.w	r2, r3, #31
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	3b1e      	subs	r3, #30
 8001782:	051b      	lsls	r3, r3, #20
 8001784:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001788:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff f903 	bl	800099a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <HAL_ADC_ConfigChannel+0x6e0>)
 800179a:	4013      	ands	r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80af 	beq.w	8001900 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017aa:	d004      	beq.n	80017b6 <HAL_ADC_ConfigChannel+0x6d6>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <HAL_ADC_ConfigChannel+0x6e4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d10a      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x6ec>
 80017b6:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <HAL_ADC_ConfigChannel+0x6e8>)
 80017b8:	e009      	b.n	80017ce <HAL_ADC_ConfigChannel+0x6ee>
 80017ba:	bf00      	nop
 80017bc:	407f0000 	.word	0x407f0000
 80017c0:	80080000 	.word	0x80080000
 80017c4:	50000100 	.word	0x50000100
 80017c8:	50000300 	.word	0x50000300
 80017cc:	4b51      	ldr	r3, [pc, #324]	@ (8001914 <HAL_ADC_ConfigChannel+0x834>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fff8 	bl	80007c4 <LL_ADC_GetCommonPathInternalCh>
 80017d4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001918 <HAL_ADC_ConfigChannel+0x838>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d004      	beq.n	80017ec <HAL_ADC_ConfigChannel+0x70c>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a4d      	ldr	r2, [pc, #308]	@ (800191c <HAL_ADC_ConfigChannel+0x83c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d134      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80017ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80017f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d12e      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001800:	d17e      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800180a:	d004      	beq.n	8001816 <HAL_ADC_ConfigChannel+0x736>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a43      	ldr	r2, [pc, #268]	@ (8001920 <HAL_ADC_ConfigChannel+0x840>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_ADC_ConfigChannel+0x73a>
 8001816:	4a43      	ldr	r2, [pc, #268]	@ (8001924 <HAL_ADC_ConfigChannel+0x844>)
 8001818:	e000      	b.n	800181c <HAL_ADC_ConfigChannel+0x73c>
 800181a:	4a3e      	ldr	r2, [pc, #248]	@ (8001914 <HAL_ADC_ConfigChannel+0x834>)
 800181c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001820:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001824:	4619      	mov	r1, r3
 8001826:	4610      	mov	r0, r2
 8001828:	f7fe ffb9 	bl	800079e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800182c:	4b3e      	ldr	r3, [pc, #248]	@ (8001928 <HAL_ADC_ConfigChannel+0x848>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	099b      	lsrs	r3, r3, #6
 8001832:	4a3e      	ldr	r2, [pc, #248]	@ (800192c <HAL_ADC_ConfigChannel+0x84c>)
 8001834:	fba2 2303 	umull	r2, r3, r2, r3
 8001838:	099b      	lsrs	r3, r3, #6
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001846:	e002      	b.n	800184e <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3b01      	subs	r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f9      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001854:	e054      	b.n	8001900 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a35      	ldr	r2, [pc, #212]	@ (8001930 <HAL_ADC_ConfigChannel+0x850>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d120      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001860:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001864:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d11a      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001874:	d144      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800187e:	d004      	beq.n	800188a <HAL_ADC_ConfigChannel+0x7aa>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a26      	ldr	r2, [pc, #152]	@ (8001920 <HAL_ADC_ConfigChannel+0x840>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_ADC_ConfigChannel+0x7ae>
 800188a:	4a26      	ldr	r2, [pc, #152]	@ (8001924 <HAL_ADC_ConfigChannel+0x844>)
 800188c:	e000      	b.n	8001890 <HAL_ADC_ConfigChannel+0x7b0>
 800188e:	4a21      	ldr	r2, [pc, #132]	@ (8001914 <HAL_ADC_ConfigChannel+0x834>)
 8001890:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001894:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001898:	4619      	mov	r1, r3
 800189a:	4610      	mov	r0, r2
 800189c:	f7fe ff7f 	bl	800079e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80018a0:	e02e      	b.n	8001900 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a23      	ldr	r2, [pc, #140]	@ (8001934 <HAL_ADC_ConfigChannel+0x854>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d129      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80018ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d123      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a18      	ldr	r2, [pc, #96]	@ (8001920 <HAL_ADC_ConfigChannel+0x840>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01e      	beq.n	8001900 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018ca:	d004      	beq.n	80018d6 <HAL_ADC_ConfigChannel+0x7f6>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a13      	ldr	r2, [pc, #76]	@ (8001920 <HAL_ADC_ConfigChannel+0x840>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d101      	bne.n	80018da <HAL_ADC_ConfigChannel+0x7fa>
 80018d6:	4a13      	ldr	r2, [pc, #76]	@ (8001924 <HAL_ADC_ConfigChannel+0x844>)
 80018d8:	e000      	b.n	80018dc <HAL_ADC_ConfigChannel+0x7fc>
 80018da:	4a0e      	ldr	r2, [pc, #56]	@ (8001914 <HAL_ADC_ConfigChannel+0x834>)
 80018dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018e4:	4619      	mov	r1, r3
 80018e6:	4610      	mov	r0, r2
 80018e8:	f7fe ff59 	bl	800079e <LL_ADC_SetCommonPathInternalCh>
 80018ec:	e008      	b.n	8001900 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f2:	f043 0220 	orr.w	r2, r3, #32
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001908:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800190c:	4618      	mov	r0, r3
 800190e:	37d8      	adds	r7, #216	@ 0xd8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	50000700 	.word	0x50000700
 8001918:	c3210000 	.word	0xc3210000
 800191c:	90c00010 	.word	0x90c00010
 8001920:	50000100 	.word	0x50000100
 8001924:	50000300 	.word	0x50000300
 8001928:	20000000 	.word	0x20000000
 800192c:	053e2d63 	.word	0x053e2d63
 8001930:	c7520000 	.word	0xc7520000
 8001934:	cb840000 	.word	0xcb840000

08001938 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff f8e5 	bl	8000b18 <LL_ADC_IsEnabled>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d176      	bne.n	8001a42 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a4c <ADC_Enable+0x114>)
 800195c:	4013      	ands	r3, r2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00d      	beq.n	800197e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001966:	f043 0210 	orr.w	r2, r3, #16
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001972:	f043 0201 	orr.w	r2, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e062      	b.n	8001a44 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f8b4 	bl	8000af0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001990:	d004      	beq.n	800199c <ADC_Enable+0x64>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a2e      	ldr	r2, [pc, #184]	@ (8001a50 <ADC_Enable+0x118>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d101      	bne.n	80019a0 <ADC_Enable+0x68>
 800199c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a54 <ADC_Enable+0x11c>)
 800199e:	e000      	b.n	80019a2 <ADC_Enable+0x6a>
 80019a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a58 <ADC_Enable+0x120>)
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe ff0e 	bl	80007c4 <LL_ADC_GetCommonPathInternalCh>
 80019a8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80019aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d013      	beq.n	80019da <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019b2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a5c <ADC_Enable+0x124>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	099b      	lsrs	r3, r3, #6
 80019b8:	4a29      	ldr	r2, [pc, #164]	@ (8001a60 <ADC_Enable+0x128>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	099b      	lsrs	r3, r3, #6
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80019cc:	e002      	b.n	80019d4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f9      	bne.n	80019ce <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80019da:	f7fe fec1 	bl	8000760 <HAL_GetTick>
 80019de:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019e0:	e028      	b.n	8001a34 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f896 	bl	8000b18 <LL_ADC_IsEnabled>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d104      	bne.n	80019fc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f87a 	bl	8000af0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019fc:	f7fe feb0 	bl	8000760 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d914      	bls.n	8001a34 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d00d      	beq.n	8001a34 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a1c:	f043 0210 	orr.w	r2, r3, #16
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e007      	b.n	8001a44 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d1cf      	bne.n	80019e2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	8000003f 	.word	0x8000003f
 8001a50:	50000100 	.word	0x50000100
 8001a54:	50000300 	.word	0x50000300
 8001a58:	50000700 	.word	0x50000700
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	053e2d63 	.word	0x053e2d63

08001a64 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a76:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d14b      	bne.n	8001b16 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a82:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d021      	beq.n	8001adc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe ff3d 	bl	800091c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d032      	beq.n	8001b0e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d12b      	bne.n	8001b0e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d11f      	bne.n	8001b0e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad2:	f043 0201 	orr.w	r2, r3, #1
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ada:	e018      	b.n	8001b0e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d111      	bne.n	8001b0e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff fac8 	bl	80010a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b14:	e00e      	b.n	8001b34 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f7ff fad2 	bl	80010cc <HAL_ADC_ErrorCallback>
}
 8001b28:	e004      	b.n	8001b34 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f7ff fab4 	bl	80010b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b76:	f043 0204 	orr.w	r2, r3, #4
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f7ff faa4 	bl	80010cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <LL_ADC_IsEnabled>:
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <LL_ADC_IsEnabled+0x18>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <LL_ADC_IsEnabled+0x1a>
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_ADC_REG_IsConversionOngoing>:
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d101      	bne.n	8001bca <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b0a1      	sub	sp, #132	@ 0x84
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e0cb      	b.n	8001d8e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001bfe:	2300      	movs	r3, #0
 8001c00:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001c02:	2300      	movs	r3, #0
 8001c04:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c0e:	d102      	bne.n	8001c16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001c10:	4b61      	ldr	r3, [pc, #388]	@ (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	e001      	b.n	8001c1a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10b      	bne.n	8001c38 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c24:	f043 0220 	orr.w	r2, r3, #32
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0aa      	b.n	8001d8e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ffb9 	bl	8001bb2 <LL_ADC_REG_IsConversionOngoing>
 8001c40:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ffb3 	bl	8001bb2 <LL_ADC_REG_IsConversionOngoing>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 808c 	bne.w	8001d6c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001c54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f040 8088 	bne.w	8001d6c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c64:	d004      	beq.n	8001c70 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a4b      	ldr	r2, [pc, #300]	@ (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8001c70:	4b4a      	ldr	r3, [pc, #296]	@ (8001d9c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8001c72:	e000      	b.n	8001c76 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8001c74:	4b4a      	ldr	r3, [pc, #296]	@ (8001da0 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8001c76:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d041      	beq.n	8001d04 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001c80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c92:	035b      	lsls	r3, r3, #13
 8001c94:	430b      	orrs	r3, r1
 8001c96:	431a      	orrs	r2, r3
 8001c98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c9a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ca4:	d004      	beq.n	8001cb0 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a3b      	ldr	r2, [pc, #236]	@ (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d10f      	bne.n	8001cd0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8001cb0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001cb4:	f7ff ff6a 	bl	8001b8c <LL_ADC_IsEnabled>
 8001cb8:	4604      	mov	r4, r0
 8001cba:	4837      	ldr	r0, [pc, #220]	@ (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8001cbc:	f7ff ff66 	bl	8001b8c <LL_ADC_IsEnabled>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4323      	orrs	r3, r4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e008      	b.n	8001ce2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8001cd0:	4834      	ldr	r0, [pc, #208]	@ (8001da4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001cd2:	f7ff ff5b 	bl	8001b8c <LL_ADC_IsEnabled>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf0c      	ite	eq
 8001cdc:	2301      	moveq	r3, #1
 8001cde:	2300      	movne	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d04c      	beq.n	8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001ce6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001cee:	f023 030f 	bic.w	r3, r3, #15
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	6811      	ldr	r1, [r2, #0]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	6892      	ldr	r2, [r2, #8]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d00:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001d02:	e03d      	b.n	8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d0e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d18:	d004      	beq.n	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d10f      	bne.n	8001d44 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8001d24:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001d28:	f7ff ff30 	bl	8001b8c <LL_ADC_IsEnabled>
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	481a      	ldr	r0, [pc, #104]	@ (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8001d30:	f7ff ff2c 	bl	8001b8c <LL_ADC_IsEnabled>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4323      	orrs	r3, r4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf0c      	ite	eq
 8001d3c:	2301      	moveq	r3, #1
 8001d3e:	2300      	movne	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	e008      	b.n	8001d56 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8001d44:	4817      	ldr	r0, [pc, #92]	@ (8001da4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001d46:	f7ff ff21 	bl	8001b8c <LL_ADC_IsEnabled>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d012      	beq.n	8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001d5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001d62:	f023 030f 	bic.w	r3, r3, #15
 8001d66:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001d68:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001d6a:	e009      	b.n	8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d70:	f043 0220 	orr.w	r2, r3, #32
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001d7e:	e000      	b.n	8001d82 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001d80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001d8a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3784      	adds	r7, #132	@ 0x84
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd90      	pop	{r4, r7, pc}
 8001d96:	bf00      	nop
 8001d98:	50000100 	.word	0x50000100
 8001d9c:	50000300 	.word	0x50000300
 8001da0:	50000700 	.word	0x50000700
 8001da4:	50000400 	.word	0x50000400

08001da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dda:	4a04      	ldr	r2, [pc, #16]	@ (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	60d3      	str	r3, [r2, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df4:	4b04      	ldr	r3, [pc, #16]	@ (8001e08 <__NVIC_GetPriorityGrouping+0x18>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	f003 0307 	and.w	r3, r3, #7
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	db0b      	blt.n	8001e36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	f003 021f 	and.w	r2, r3, #31
 8001e24:	4907      	ldr	r1, [pc, #28]	@ (8001e44 <__NVIC_EnableIRQ+0x38>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000e100 	.word	0xe000e100

08001e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db0a      	blt.n	8001e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	490c      	ldr	r1, [pc, #48]	@ (8001e94 <__NVIC_SetPriority+0x4c>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e70:	e00a      	b.n	8001e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4908      	ldr	r1, [pc, #32]	@ (8001e98 <__NVIC_SetPriority+0x50>)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	3b04      	subs	r3, #4
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	440b      	add	r3, r1
 8001e86:	761a      	strb	r2, [r3, #24]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	@ 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f1c3 0307 	rsb	r3, r3, #7
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	bf28      	it	cs
 8001eba:	2304      	movcs	r3, #4
 8001ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d902      	bls.n	8001ecc <NVIC_EncodePriority+0x30>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3b03      	subs	r3, #3
 8001eca:	e000      	b.n	8001ece <NVIC_EncodePriority+0x32>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43d9      	mvns	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	4313      	orrs	r3, r2
         );
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	@ 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f14:	d301      	bcc.n	8001f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00f      	b.n	8001f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <SysTick_Config+0x40>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f22:	210f      	movs	r1, #15
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	f7ff ff8e 	bl	8001e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <SysTick_Config+0x40>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f32:	4b04      	ldr	r3, [pc, #16]	@ (8001f44 <SysTick_Config+0x40>)
 8001f34:	2207      	movs	r2, #7
 8001f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	e000e010 	.word	0xe000e010

08001f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff29 	bl	8001da8 <__NVIC_SetPriorityGrouping>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f6c:	f7ff ff40 	bl	8001df0 <__NVIC_GetPriorityGrouping>
 8001f70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	6978      	ldr	r0, [r7, #20]
 8001f78:	f7ff ff90 	bl	8001e9c <NVIC_EncodePriority>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff5f 	bl	8001e48 <__NVIC_SetPriority>
}
 8001f8a:	bf00      	nop
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff33 	bl	8001e0c <__NVIC_EnableIRQ>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ffa4 	bl	8001f04 <SysTick_Config>
 8001fbc:	4603      	mov	r3, r0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e08d      	b.n	80020f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b47      	ldr	r3, [pc, #284]	@ (8002100 <HAL_DMA_Init+0x138>)
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d80f      	bhi.n	8002006 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b45      	ldr	r3, [pc, #276]	@ (8002104 <HAL_DMA_Init+0x13c>)
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a45      	ldr	r2, [pc, #276]	@ (8002108 <HAL_DMA_Init+0x140>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	009a      	lsls	r2, r3, #2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a42      	ldr	r2, [pc, #264]	@ (800210c <HAL_DMA_Init+0x144>)
 8002002:	641a      	str	r2, [r3, #64]	@ 0x40
 8002004:	e00e      	b.n	8002024 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	4b40      	ldr	r3, [pc, #256]	@ (8002110 <HAL_DMA_Init+0x148>)
 800200e:	4413      	add	r3, r2
 8002010:	4a3d      	ldr	r2, [pc, #244]	@ (8002108 <HAL_DMA_Init+0x140>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	009a      	lsls	r2, r3, #2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a3c      	ldr	r2, [pc, #240]	@ (8002114 <HAL_DMA_Init+0x14c>)
 8002022:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800203a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800203e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f9b6 	bl	80023e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002084:	d102      	bne.n	800208c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80020a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d010      	beq.n	80020cc <HAL_DMA_Init+0x104>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d80c      	bhi.n	80020cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f9d6 	bl	8002464 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	e008      	b.n	80020de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40020407 	.word	0x40020407
 8002104:	bffdfff8 	.word	0xbffdfff8
 8002108:	cccccccd 	.word	0xcccccccd
 800210c:	40020000 	.word	0x40020000
 8002110:	bffdfbf8 	.word	0xbffdfbf8
 8002114:	40020400 	.word	0x40020400

08002118 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_DMA_Start_IT+0x20>
 8002134:	2302      	movs	r3, #2
 8002136:	e066      	b.n	8002206 <HAL_DMA_Start_IT+0xee>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b01      	cmp	r3, #1
 800214a:	d155      	bne.n	80021f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0201 	bic.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	68b9      	ldr	r1, [r7, #8]
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f8fb 	bl	800236c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	2b00      	cmp	r3, #0
 800217c:	d008      	beq.n	8002190 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 020e 	orr.w	r2, r2, #14
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e00f      	b.n	80021b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0204 	bic.w	r2, r2, #4
 800219e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 020a 	orr.w	r2, r2, #10
 80021ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e005      	b.n	8002204 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002200:	2302      	movs	r3, #2
 8002202:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002204:	7dfb      	ldrb	r3, [r7, #23]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	2204      	movs	r2, #4
 8002230:	409a      	lsls	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d026      	beq.n	8002288 <HAL_DMA_IRQHandler+0x7a>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d021      	beq.n	8002288 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	2b00      	cmp	r3, #0
 8002250:	d107      	bne.n	8002262 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0204 	bic.w	r2, r2, #4
 8002260:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002266:	f003 021f 	and.w	r2, r3, #31
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	2104      	movs	r1, #4
 8002270:	fa01 f202 	lsl.w	r2, r1, r2
 8002274:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	2b00      	cmp	r3, #0
 800227c:	d071      	beq.n	8002362 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002286:	e06c      	b.n	8002362 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	2202      	movs	r2, #2
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d02e      	beq.n	80022fa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d029      	beq.n	80022fa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10b      	bne.n	80022cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 020a 	bic.w	r2, r2, #10
 80022c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d0:	f003 021f 	and.w	r2, r3, #31
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d8:	2102      	movs	r1, #2
 80022da:	fa01 f202 	lsl.w	r2, r1, r2
 80022de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d038      	beq.n	8002362 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80022f8:	e033      	b.n	8002362 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	2208      	movs	r2, #8
 8002304:	409a      	lsls	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d02a      	beq.n	8002364 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d025      	beq.n	8002364 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 020e 	bic.w	r2, r2, #14
 8002326:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232c:	f003 021f 	and.w	r2, r3, #31
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	2101      	movs	r1, #1
 8002336:	fa01 f202 	lsl.w	r2, r1, r2
 800233a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002362:	bf00      	nop
 8002364:	bf00      	nop
}
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002382:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002388:	2b00      	cmp	r3, #0
 800238a:	d004      	beq.n	8002396 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002394:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	f003 021f 	and.w	r2, r3, #31
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f202 	lsl.w	r2, r1, r2
 80023a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b10      	cmp	r3, #16
 80023b8:	d108      	bne.n	80023cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023ca:	e007      	b.n	80023dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	60da      	str	r2, [r3, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b16      	ldr	r3, [pc, #88]	@ (8002450 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d802      	bhi.n	8002402 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80023fc:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	e001      	b.n	8002406 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002402:	4b15      	ldr	r3, [pc, #84]	@ (8002458 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002404:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3b08      	subs	r3, #8
 8002412:	4a12      	ldr	r2, [pc, #72]	@ (800245c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	009a      	lsls	r2, r3, #2
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	461a      	mov	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a0b      	ldr	r2, [pc, #44]	@ (8002460 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002432:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2201      	movs	r2, #1
 800243c:	409a      	lsls	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002442:	bf00      	nop
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40020407 	.word	0x40020407
 8002454:	40020800 	.word	0x40020800
 8002458:	40020820 	.word	0x40020820
 800245c:	cccccccd 	.word	0xcccccccd
 8002460:	40020880 	.word	0x40020880

08002464 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	461a      	mov	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a08      	ldr	r2, [pc, #32]	@ (80024a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002486:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3b01      	subs	r3, #1
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2201      	movs	r2, #1
 8002492:	409a      	lsls	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	1000823f 	.word	0x1000823f
 80024a8:	40020940 	.word	0x40020940

080024ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024ba:	e15a      	b.n	8002772 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	2101      	movs	r1, #1
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	fa01 f303 	lsl.w	r3, r1, r3
 80024c8:	4013      	ands	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 814c 	beq.w	800276c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d005      	beq.n	80024ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d130      	bne.n	800254e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002522:	2201      	movs	r2, #1
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	f003 0201 	and.w	r2, r3, #1
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b03      	cmp	r3, #3
 8002558:	d017      	beq.n	800258a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d123      	bne.n	80025de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	08da      	lsrs	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3208      	adds	r2, #8
 800259e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	220f      	movs	r2, #15
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	08da      	lsrs	r2, r3, #3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3208      	adds	r2, #8
 80025d8:	6939      	ldr	r1, [r7, #16]
 80025da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2203      	movs	r2, #3
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0203 	and.w	r2, r3, #3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80a6 	beq.w	800276c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002620:	4b5b      	ldr	r3, [pc, #364]	@ (8002790 <HAL_GPIO_Init+0x2e4>)
 8002622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002624:	4a5a      	ldr	r2, [pc, #360]	@ (8002790 <HAL_GPIO_Init+0x2e4>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6613      	str	r3, [r2, #96]	@ 0x60
 800262c:	4b58      	ldr	r3, [pc, #352]	@ (8002790 <HAL_GPIO_Init+0x2e4>)
 800262e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002638:	4a56      	ldr	r2, [pc, #344]	@ (8002794 <HAL_GPIO_Init+0x2e8>)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	3302      	adds	r3, #2
 8002640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220f      	movs	r2, #15
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002662:	d01f      	beq.n	80026a4 <HAL_GPIO_Init+0x1f8>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a4c      	ldr	r2, [pc, #304]	@ (8002798 <HAL_GPIO_Init+0x2ec>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d019      	beq.n	80026a0 <HAL_GPIO_Init+0x1f4>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a4b      	ldr	r2, [pc, #300]	@ (800279c <HAL_GPIO_Init+0x2f0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d013      	beq.n	800269c <HAL_GPIO_Init+0x1f0>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a4a      	ldr	r2, [pc, #296]	@ (80027a0 <HAL_GPIO_Init+0x2f4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00d      	beq.n	8002698 <HAL_GPIO_Init+0x1ec>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a49      	ldr	r2, [pc, #292]	@ (80027a4 <HAL_GPIO_Init+0x2f8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d007      	beq.n	8002694 <HAL_GPIO_Init+0x1e8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a48      	ldr	r2, [pc, #288]	@ (80027a8 <HAL_GPIO_Init+0x2fc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d101      	bne.n	8002690 <HAL_GPIO_Init+0x1e4>
 800268c:	2305      	movs	r3, #5
 800268e:	e00a      	b.n	80026a6 <HAL_GPIO_Init+0x1fa>
 8002690:	2306      	movs	r3, #6
 8002692:	e008      	b.n	80026a6 <HAL_GPIO_Init+0x1fa>
 8002694:	2304      	movs	r3, #4
 8002696:	e006      	b.n	80026a6 <HAL_GPIO_Init+0x1fa>
 8002698:	2303      	movs	r3, #3
 800269a:	e004      	b.n	80026a6 <HAL_GPIO_Init+0x1fa>
 800269c:	2302      	movs	r3, #2
 800269e:	e002      	b.n	80026a6 <HAL_GPIO_Init+0x1fa>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <HAL_GPIO_Init+0x1fa>
 80026a4:	2300      	movs	r3, #0
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	f002 0203 	and.w	r2, r2, #3
 80026ac:	0092      	lsls	r2, r2, #2
 80026ae:	4093      	lsls	r3, r2
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b6:	4937      	ldr	r1, [pc, #220]	@ (8002794 <HAL_GPIO_Init+0x2e8>)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	3302      	adds	r3, #2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026c4:	4b39      	ldr	r3, [pc, #228]	@ (80027ac <HAL_GPIO_Init+0x300>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026e8:	4a30      	ldr	r2, [pc, #192]	@ (80027ac <HAL_GPIO_Init+0x300>)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026ee:	4b2f      	ldr	r3, [pc, #188]	@ (80027ac <HAL_GPIO_Init+0x300>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002712:	4a26      	ldr	r2, [pc, #152]	@ (80027ac <HAL_GPIO_Init+0x300>)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002718:	4b24      	ldr	r3, [pc, #144]	@ (80027ac <HAL_GPIO_Init+0x300>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	43db      	mvns	r3, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800273c:	4a1b      	ldr	r2, [pc, #108]	@ (80027ac <HAL_GPIO_Init+0x300>)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002742:	4b1a      	ldr	r3, [pc, #104]	@ (80027ac <HAL_GPIO_Init+0x300>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	43db      	mvns	r3, r3
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002766:	4a11      	ldr	r2, [pc, #68]	@ (80027ac <HAL_GPIO_Init+0x300>)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3301      	adds	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	f47f ae9d 	bne.w	80024bc <HAL_GPIO_Init+0x10>
  }
}
 8002782:	bf00      	nop
 8002784:	bf00      	nop
 8002786:	371c      	adds	r7, #28
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	40021000 	.word	0x40021000
 8002794:	40010000 	.word	0x40010000
 8002798:	48000400 	.word	0x48000400
 800279c:	48000800 	.word	0x48000800
 80027a0:	48000c00 	.word	0x48000c00
 80027a4:	48001000 	.word	0x48001000
 80027a8:	48001400 	.word	0x48001400
 80027ac:	40010400 	.word	0x40010400

080027b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d141      	bne.n	8002842 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027be:	4b4b      	ldr	r3, [pc, #300]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ca:	d131      	bne.n	8002830 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027cc:	4b47      	ldr	r3, [pc, #284]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027d2:	4a46      	ldr	r2, [pc, #280]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027dc:	4b43      	ldr	r3, [pc, #268]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027e4:	4a41      	ldr	r2, [pc, #260]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027ec:	4b40      	ldr	r3, [pc, #256]	@ (80028f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2232      	movs	r2, #50	@ 0x32
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	4a3f      	ldr	r2, [pc, #252]	@ (80028f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	0c9b      	lsrs	r3, r3, #18
 80027fe:	3301      	adds	r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002802:	e002      	b.n	800280a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3b01      	subs	r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800280a:	4b38      	ldr	r3, [pc, #224]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002816:	d102      	bne.n	800281e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f2      	bne.n	8002804 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800281e:	4b33      	ldr	r3, [pc, #204]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800282a:	d158      	bne.n	80028de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e057      	b.n	80028e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002830:	4b2e      	ldr	r3, [pc, #184]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002836:	4a2d      	ldr	r2, [pc, #180]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800283c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002840:	e04d      	b.n	80028de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002848:	d141      	bne.n	80028ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800284a:	4b28      	ldr	r3, [pc, #160]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002856:	d131      	bne.n	80028bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002858:	4b24      	ldr	r3, [pc, #144]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800285e:	4a23      	ldr	r2, [pc, #140]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002864:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002868:	4b20      	ldr	r3, [pc, #128]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002870:	4a1e      	ldr	r2, [pc, #120]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002872:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002876:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002878:	4b1d      	ldr	r3, [pc, #116]	@ (80028f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2232      	movs	r2, #50	@ 0x32
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	4a1c      	ldr	r2, [pc, #112]	@ (80028f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	0c9b      	lsrs	r3, r3, #18
 800288a:	3301      	adds	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800288e:	e002      	b.n	8002896 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3b01      	subs	r3, #1
 8002894:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002896:	4b15      	ldr	r3, [pc, #84]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800289e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028a2:	d102      	bne.n	80028aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f2      	bne.n	8002890 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028b6:	d112      	bne.n	80028de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e011      	b.n	80028e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028bc:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028c2:	4a0a      	ldr	r2, [pc, #40]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80028cc:	e007      	b.n	80028de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028ce:	4b07      	ldr	r3, [pc, #28]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028d6:	4a05      	ldr	r2, [pc, #20]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	40007000 	.word	0x40007000
 80028f0:	20000000 	.word	0x20000000
 80028f4:	431bde83 	.word	0x431bde83

080028f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80028fc:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4a04      	ldr	r2, [pc, #16]	@ (8002914 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002902:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002906:	6093      	str	r3, [r2, #8]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40007000 	.word	0x40007000

08002918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e2fe      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d075      	beq.n	8002a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002936:	4b97      	ldr	r3, [pc, #604]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002940:	4b94      	ldr	r3, [pc, #592]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	2b0c      	cmp	r3, #12
 800294e:	d102      	bne.n	8002956 <HAL_RCC_OscConfig+0x3e>
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d002      	beq.n	800295c <HAL_RCC_OscConfig+0x44>
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b08      	cmp	r3, #8
 800295a:	d10b      	bne.n	8002974 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295c:	4b8d      	ldr	r3, [pc, #564]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d05b      	beq.n	8002a20 <HAL_RCC_OscConfig+0x108>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d157      	bne.n	8002a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e2d9      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800297c:	d106      	bne.n	800298c <HAL_RCC_OscConfig+0x74>
 800297e:	4b85      	ldr	r3, [pc, #532]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a84      	ldr	r2, [pc, #528]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e01d      	b.n	80029c8 <HAL_RCC_OscConfig+0xb0>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x98>
 8002996:	4b7f      	ldr	r3, [pc, #508]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 800299c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a7b      	ldr	r2, [pc, #492]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 80029a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	e00b      	b.n	80029c8 <HAL_RCC_OscConfig+0xb0>
 80029b0:	4b78      	ldr	r3, [pc, #480]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a77      	ldr	r2, [pc, #476]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 80029b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	4b75      	ldr	r3, [pc, #468]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a74      	ldr	r2, [pc, #464]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 80029c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d013      	beq.n	80029f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fd fec6 	bl	8000760 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d8:	f7fd fec2 	bl	8000760 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	@ 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e29e      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0xc0>
 80029f6:	e014      	b.n	8002a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fd feb2 	bl	8000760 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a00:	f7fd feae 	bl	8000760 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	@ 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e28a      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a12:	4b60      	ldr	r3, [pc, #384]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0xe8>
 8002a1e:	e000      	b.n	8002a22 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d075      	beq.n	8002b1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2e:	4b59      	ldr	r3, [pc, #356]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a38:	4b56      	ldr	r3, [pc, #344]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	2b0c      	cmp	r3, #12
 8002a46:	d102      	bne.n	8002a4e <HAL_RCC_OscConfig+0x136>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d002      	beq.n	8002a54 <HAL_RCC_OscConfig+0x13c>
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d11f      	bne.n	8002a94 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a54:	4b4f      	ldr	r3, [pc, #316]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_OscConfig+0x154>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e25d      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6c:	4b49      	ldr	r3, [pc, #292]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	4946      	ldr	r1, [pc, #280]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a80:	4b45      	ldr	r3, [pc, #276]	@ (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fe1f 	bl	80006c8 <HAL_InitTick>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d043      	beq.n	8002b18 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e249      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d023      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a9c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a3c      	ldr	r2, [pc, #240]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fd fe5a 	bl	8000760 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab0:	f7fd fe56 	bl	8000760 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e232      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac2:	4b34      	ldr	r3, [pc, #208]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ace:	4b31      	ldr	r3, [pc, #196]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	061b      	lsls	r3, r3, #24
 8002adc:	492d      	ldr	r1, [pc, #180]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
 8002ae2:	e01a      	b.n	8002b1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002aea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fd fe36 	bl	8000760 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af8:	f7fd fe32 	bl	8000760 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e20e      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b0a:	4b22      	ldr	r3, [pc, #136]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x1e0>
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d041      	beq.n	8002baa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d01c      	beq.n	8002b68 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b2e:	4b19      	ldr	r3, [pc, #100]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b34:	4a17      	ldr	r2, [pc, #92]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3e:	f7fd fe0f 	bl	8000760 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b46:	f7fd fe0b 	bl	8000760 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e1e7      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b58:	4b0e      	ldr	r3, [pc, #56]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0ef      	beq.n	8002b46 <HAL_RCC_OscConfig+0x22e>
 8002b66:	e020      	b.n	8002baa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b68:	4b0a      	ldr	r3, [pc, #40]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b6e:	4a09      	ldr	r2, [pc, #36]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fd fdf2 	bl	8000760 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b7e:	e00d      	b.n	8002b9c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b80:	f7fd fdee 	bl	8000760 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d906      	bls.n	8002b9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e1ca      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b9c:	4b8c      	ldr	r3, [pc, #560]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1ea      	bne.n	8002b80 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80a6 	beq.w	8002d04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bbc:	4b84      	ldr	r3, [pc, #528]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_OscConfig+0x2b4>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <HAL_RCC_OscConfig+0x2b6>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00d      	beq.n	8002bee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bde:	4b7c      	ldr	r3, [pc, #496]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002bea:	2301      	movs	r3, #1
 8002bec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bee:	4b79      	ldr	r3, [pc, #484]	@ (8002dd4 <HAL_RCC_OscConfig+0x4bc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d118      	bne.n	8002c2c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bfa:	4b76      	ldr	r3, [pc, #472]	@ (8002dd4 <HAL_RCC_OscConfig+0x4bc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a75      	ldr	r2, [pc, #468]	@ (8002dd4 <HAL_RCC_OscConfig+0x4bc>)
 8002c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c06:	f7fd fdab 	bl	8000760 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0e:	f7fd fda7 	bl	8000760 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e183      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c20:	4b6c      	ldr	r3, [pc, #432]	@ (8002dd4 <HAL_RCC_OscConfig+0x4bc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d108      	bne.n	8002c46 <HAL_RCC_OscConfig+0x32e>
 8002c34:	4b66      	ldr	r3, [pc, #408]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c3a:	4a65      	ldr	r2, [pc, #404]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c44:	e024      	b.n	8002c90 <HAL_RCC_OscConfig+0x378>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	d110      	bne.n	8002c70 <HAL_RCC_OscConfig+0x358>
 8002c4e:	4b60      	ldr	r3, [pc, #384]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c54:	4a5e      	ldr	r2, [pc, #376]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c56:	f043 0304 	orr.w	r3, r3, #4
 8002c5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c5e:	4b5c      	ldr	r3, [pc, #368]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c64:	4a5a      	ldr	r2, [pc, #360]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c6e:	e00f      	b.n	8002c90 <HAL_RCC_OscConfig+0x378>
 8002c70:	4b57      	ldr	r3, [pc, #348]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c76:	4a56      	ldr	r2, [pc, #344]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c80:	4b53      	ldr	r3, [pc, #332]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c86:	4a52      	ldr	r2, [pc, #328]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c88:	f023 0304 	bic.w	r3, r3, #4
 8002c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d016      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7fd fd62 	bl	8000760 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7fd fd5e 	bl	8000760 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e138      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb6:	4b46      	ldr	r3, [pc, #280]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ed      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x388>
 8002cc4:	e015      	b.n	8002cf2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc6:	f7fd fd4b 	bl	8000760 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fd fd47 	bl	8000760 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e121      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ce4:	4b3a      	ldr	r3, [pc, #232]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1ed      	bne.n	8002cce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cf2:	7ffb      	ldrb	r3, [r7, #31]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d105      	bne.n	8002d04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf8:	4b35      	ldr	r3, [pc, #212]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	4a34      	ldr	r2, [pc, #208]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002cfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d03c      	beq.n	8002d8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01c      	beq.n	8002d52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d18:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fd fd1a 	bl	8000760 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d30:	f7fd fd16 	bl	8000760 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0f2      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d42:	4b23      	ldr	r3, [pc, #140]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ef      	beq.n	8002d30 <HAL_RCC_OscConfig+0x418>
 8002d50:	e01b      	b.n	8002d8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d52:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002d54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d58:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
 8002d5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d62:	f7fd fcfd 	bl	8000760 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d6a:	f7fd fcf9 	bl	8000760 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e0d5      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d7c:	4b14      	ldr	r3, [pc, #80]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1ef      	bne.n	8002d6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80c9 	beq.w	8002f26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d94:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b0c      	cmp	r3, #12
 8002d9e:	f000 8083 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d15e      	bne.n	8002e68 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a08      	ldr	r2, [pc, #32]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002db0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fd fcd3 	bl	8000760 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dbc:	e00c      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7fd fccf 	bl	8000760 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d905      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e0ab      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd8:	4b55      	ldr	r3, [pc, #340]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1ec      	bne.n	8002dbe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de4:	4b52      	ldr	r3, [pc, #328]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	4b52      	ldr	r3, [pc, #328]	@ (8002f34 <HAL_RCC_OscConfig+0x61c>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6a11      	ldr	r1, [r2, #32]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002df4:	3a01      	subs	r2, #1
 8002df6:	0112      	lsls	r2, r2, #4
 8002df8:	4311      	orrs	r1, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002dfe:	0212      	lsls	r2, r2, #8
 8002e00:	4311      	orrs	r1, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e06:	0852      	lsrs	r2, r2, #1
 8002e08:	3a01      	subs	r2, #1
 8002e0a:	0552      	lsls	r2, r2, #21
 8002e0c:	4311      	orrs	r1, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e12:	0852      	lsrs	r2, r2, #1
 8002e14:	3a01      	subs	r2, #1
 8002e16:	0652      	lsls	r2, r2, #25
 8002e18:	4311      	orrs	r1, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e1e:	06d2      	lsls	r2, r2, #27
 8002e20:	430a      	orrs	r2, r1
 8002e22:	4943      	ldr	r1, [pc, #268]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e28:	4b41      	ldr	r3, [pc, #260]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a40      	ldr	r2, [pc, #256]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e34:	4b3e      	ldr	r3, [pc, #248]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a3d      	ldr	r2, [pc, #244]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fd fc8e 	bl	8000760 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fd fc8a 	bl	8000760 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e066      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5a:	4b35      	ldr	r3, [pc, #212]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x530>
 8002e66:	e05e      	b.n	8002f26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b31      	ldr	r3, [pc, #196]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a30      	ldr	r2, [pc, #192]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7fd fc74 	bl	8000760 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7fd fc70 	bl	8000760 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e04c      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e8e:	4b28      	ldr	r3, [pc, #160]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e9a:	4b25      	ldr	r3, [pc, #148]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	4924      	ldr	r1, [pc, #144]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002ea0:	4b25      	ldr	r3, [pc, #148]	@ (8002f38 <HAL_RCC_OscConfig+0x620>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	60cb      	str	r3, [r1, #12]
 8002ea6:	e03e      	b.n	8002f26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e039      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f003 0203 	and.w	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d12c      	bne.n	8002f22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d123      	bne.n	8002f22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d11b      	bne.n	8002f22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d113      	bne.n	8002f22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f04:	085b      	lsrs	r3, r3, #1
 8002f06:	3b01      	subs	r3, #1
 8002f08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d109      	bne.n	8002f22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f18:	085b      	lsrs	r3, r3, #1
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	019f800c 	.word	0x019f800c
 8002f38:	feeefffc 	.word	0xfeeefffc

08002f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e11e      	b.n	8003192 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b91      	ldr	r3, [pc, #580]	@ (800319c <HAL_RCC_ClockConfig+0x260>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d910      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b8e      	ldr	r3, [pc, #568]	@ (800319c <HAL_RCC_ClockConfig+0x260>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 020f 	bic.w	r2, r3, #15
 8002f6a:	498c      	ldr	r1, [pc, #560]	@ (800319c <HAL_RCC_ClockConfig+0x260>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b8a      	ldr	r3, [pc, #552]	@ (800319c <HAL_RCC_ClockConfig+0x260>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e106      	b.n	8003192 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d073      	beq.n	8003078 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d129      	bne.n	8002fec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f98:	4b81      	ldr	r3, [pc, #516]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0f4      	b.n	8003192 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002fa8:	f000 f966 	bl	8003278 <RCC_GetSysClockFreqFromPLLSource>
 8002fac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4a7c      	ldr	r2, [pc, #496]	@ (80031a4 <HAL_RCC_ClockConfig+0x268>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d93f      	bls.n	8003036 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fb6:	4b7a      	ldr	r3, [pc, #488]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d033      	beq.n	8003036 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d12f      	bne.n	8003036 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fd6:	4b72      	ldr	r3, [pc, #456]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fde:	4a70      	ldr	r2, [pc, #448]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8002fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fe4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002fe6:	2380      	movs	r3, #128	@ 0x80
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e024      	b.n	8003036 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d107      	bne.n	8003004 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ff4:	4b6a      	ldr	r3, [pc, #424]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d109      	bne.n	8003014 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0c6      	b.n	8003192 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003004:	4b66      	ldr	r3, [pc, #408]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0be      	b.n	8003192 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003014:	f000 f8ce 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003018:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4a61      	ldr	r2, [pc, #388]	@ (80031a4 <HAL_RCC_ClockConfig+0x268>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d909      	bls.n	8003036 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003022:	4b5f      	ldr	r3, [pc, #380]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800302a:	4a5d      	ldr	r2, [pc, #372]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 800302c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003030:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003032:	2380      	movs	r3, #128	@ 0x80
 8003034:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003036:	4b5a      	ldr	r3, [pc, #360]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f023 0203 	bic.w	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4957      	ldr	r1, [pc, #348]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003044:	4313      	orrs	r3, r2
 8003046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003048:	f7fd fb8a 	bl	8000760 <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	e00a      	b.n	8003066 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003050:	f7fd fb86 	bl	8000760 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e095      	b.n	8003192 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	4b4e      	ldr	r3, [pc, #312]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 020c 	and.w	r2, r3, #12
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	429a      	cmp	r2, r3
 8003076:	d1eb      	bne.n	8003050 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d023      	beq.n	80030cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003090:	4b43      	ldr	r3, [pc, #268]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4a42      	ldr	r2, [pc, #264]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003096:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800309a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d007      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80030a8:	4b3d      	ldr	r3, [pc, #244]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80030b0:	4a3b      	ldr	r2, [pc, #236]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 80030b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b8:	4b39      	ldr	r3, [pc, #228]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4936      	ldr	r1, [pc, #216]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	608b      	str	r3, [r1, #8]
 80030ca:	e008      	b.n	80030de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b80      	cmp	r3, #128	@ 0x80
 80030d0:	d105      	bne.n	80030de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030d2:	4b33      	ldr	r3, [pc, #204]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	4a32      	ldr	r2, [pc, #200]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 80030d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030de:	4b2f      	ldr	r3, [pc, #188]	@ (800319c <HAL_RCC_ClockConfig+0x260>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d21d      	bcs.n	8003128 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ec:	4b2b      	ldr	r3, [pc, #172]	@ (800319c <HAL_RCC_ClockConfig+0x260>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 020f 	bic.w	r2, r3, #15
 80030f4:	4929      	ldr	r1, [pc, #164]	@ (800319c <HAL_RCC_ClockConfig+0x260>)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030fc:	f7fd fb30 	bl	8000760 <HAL_GetTick>
 8003100:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	e00a      	b.n	800311a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003104:	f7fd fb2c 	bl	8000760 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e03b      	b.n	8003192 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b20      	ldr	r3, [pc, #128]	@ (800319c <HAL_RCC_ClockConfig+0x260>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d1ed      	bne.n	8003104 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003134:	4b1a      	ldr	r3, [pc, #104]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4917      	ldr	r1, [pc, #92]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003152:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	490f      	ldr	r1, [pc, #60]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003166:	f000 f825 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 800316a:	4602      	mov	r2, r0
 800316c:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	490c      	ldr	r1, [pc, #48]	@ (80031a8 <HAL_RCC_ClockConfig+0x26c>)
 8003178:	5ccb      	ldrb	r3, [r1, r3]
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	fa22 f303 	lsr.w	r3, r2, r3
 8003182:	4a0a      	ldr	r2, [pc, #40]	@ (80031ac <HAL_RCC_ClockConfig+0x270>)
 8003184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003186:	4b0a      	ldr	r3, [pc, #40]	@ (80031b0 <HAL_RCC_ClockConfig+0x274>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd fa9c 	bl	80006c8 <HAL_InitTick>
 8003190:	4603      	mov	r3, r0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40022000 	.word	0x40022000
 80031a0:	40021000 	.word	0x40021000
 80031a4:	04c4b400 	.word	0x04c4b400
 80031a8:	080037ec 	.word	0x080037ec
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000004 	.word	0x20000004

080031b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031ba:	4b2c      	ldr	r3, [pc, #176]	@ (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d102      	bne.n	80031cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003270 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	e047      	b.n	800325c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031cc:	4b27      	ldr	r3, [pc, #156]	@ (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d102      	bne.n	80031de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031d8:	4b26      	ldr	r3, [pc, #152]	@ (8003274 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	e03e      	b.n	800325c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80031de:	4b23      	ldr	r3, [pc, #140]	@ (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	d136      	bne.n	8003258 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ea:	4b20      	ldr	r3, [pc, #128]	@ (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031f4:	4b1d      	ldr	r3, [pc, #116]	@ (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	3301      	adds	r3, #1
 8003200:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d10c      	bne.n	8003222 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003208:	4a1a      	ldr	r2, [pc, #104]	@ (8003274 <HAL_RCC_GetSysClockFreq+0xc0>)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	4a16      	ldr	r2, [pc, #88]	@ (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003212:	68d2      	ldr	r2, [r2, #12]
 8003214:	0a12      	lsrs	r2, r2, #8
 8003216:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800321a:	fb02 f303 	mul.w	r3, r2, r3
 800321e:	617b      	str	r3, [r7, #20]
      break;
 8003220:	e00c      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003222:	4a13      	ldr	r2, [pc, #76]	@ (8003270 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	4a10      	ldr	r2, [pc, #64]	@ (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 800322c:	68d2      	ldr	r2, [r2, #12]
 800322e:	0a12      	lsrs	r2, r2, #8
 8003230:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003234:	fb02 f303 	mul.w	r3, r2, r3
 8003238:	617b      	str	r3, [r7, #20]
      break;
 800323a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800323c:	4b0b      	ldr	r3, [pc, #44]	@ (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	0e5b      	lsrs	r3, r3, #25
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	3301      	adds	r3, #1
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	e001      	b.n	800325c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800325c:	693b      	ldr	r3, [r7, #16]
}
 800325e:	4618      	mov	r0, r3
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	00f42400 	.word	0x00f42400
 8003274:	007a1200 	.word	0x007a1200

08003278 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800327e:	4b1e      	ldr	r3, [pc, #120]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003288:	4b1b      	ldr	r3, [pc, #108]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	3301      	adds	r3, #1
 8003294:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b03      	cmp	r3, #3
 800329a:	d10c      	bne.n	80032b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800329c:	4a17      	ldr	r2, [pc, #92]	@ (80032fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	4a14      	ldr	r2, [pc, #80]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032a6:	68d2      	ldr	r2, [r2, #12]
 80032a8:	0a12      	lsrs	r2, r2, #8
 80032aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032ae:	fb02 f303 	mul.w	r3, r2, r3
 80032b2:	617b      	str	r3, [r7, #20]
    break;
 80032b4:	e00c      	b.n	80032d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032b6:	4a12      	ldr	r2, [pc, #72]	@ (8003300 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	4a0e      	ldr	r2, [pc, #56]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032c0:	68d2      	ldr	r2, [r2, #12]
 80032c2:	0a12      	lsrs	r2, r2, #8
 80032c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032c8:	fb02 f303 	mul.w	r3, r2, r3
 80032cc:	617b      	str	r3, [r7, #20]
    break;
 80032ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032d0:	4b09      	ldr	r3, [pc, #36]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	0e5b      	lsrs	r3, r3, #25
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	3301      	adds	r3, #1
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80032ea:	687b      	ldr	r3, [r7, #4]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40021000 	.word	0x40021000
 80032fc:	007a1200 	.word	0x007a1200
 8003300:	00f42400 	.word	0x00f42400

08003304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800330c:	2300      	movs	r3, #0
 800330e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003310:	2300      	movs	r3, #0
 8003312:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8098 	beq.w	8003452 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003326:	4b43      	ldr	r3, [pc, #268]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10d      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	4b40      	ldr	r3, [pc, #256]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003336:	4a3f      	ldr	r2, [pc, #252]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800333c:	6593      	str	r3, [r2, #88]	@ 0x58
 800333e:	4b3d      	ldr	r3, [pc, #244]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334a:	2301      	movs	r3, #1
 800334c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800334e:	4b3a      	ldr	r3, [pc, #232]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a39      	ldr	r2, [pc, #228]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800335a:	f7fd fa01 	bl	8000760 <HAL_GetTick>
 800335e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003360:	e009      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003362:	f7fd f9fd 	bl	8000760 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d902      	bls.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	74fb      	strb	r3, [r7, #19]
        break;
 8003374:	e005      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003376:	4b30      	ldr	r3, [pc, #192]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0ef      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d159      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003388:	4b2a      	ldr	r3, [pc, #168]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003392:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01e      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d019      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033a4:	4b23      	ldr	r3, [pc, #140]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033b0:	4b20      	ldr	r3, [pc, #128]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033d0:	4a18      	ldr	r2, [pc, #96]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d016      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fd f9bd 	bl	8000760 <HAL_GetTick>
 80033e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e8:	e00b      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fd f9b9 	bl	8000760 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d902      	bls.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003400:	e006      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003402:	4b0c      	ldr	r3, [pc, #48]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0ec      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10b      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003416:	4b07      	ldr	r3, [pc, #28]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003424:	4903      	ldr	r1, [pc, #12]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800342c:	e008      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800342e:	7cfb      	ldrb	r3, [r7, #19]
 8003430:	74bb      	strb	r3, [r7, #18]
 8003432:	e005      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003434:	40021000 	.word	0x40021000
 8003438:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003440:	7c7b      	ldrb	r3, [r7, #17]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003446:	4ba7      	ldr	r3, [pc, #668]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344a:	4aa6      	ldr	r2, [pc, #664]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800344c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003450:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800345e:	4ba1      	ldr	r3, [pc, #644]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003464:	f023 0203 	bic.w	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	499d      	ldr	r1, [pc, #628]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003480:	4b98      	ldr	r3, [pc, #608]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003486:	f023 020c 	bic.w	r2, r3, #12
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	4995      	ldr	r1, [pc, #596]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034a2:	4b90      	ldr	r3, [pc, #576]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	498c      	ldr	r1, [pc, #560]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034c4:	4b87      	ldr	r3, [pc, #540]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	4984      	ldr	r1, [pc, #528]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034e6:	4b7f      	ldr	r3, [pc, #508]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	497b      	ldr	r1, [pc, #492]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003508:	4b76      	ldr	r3, [pc, #472]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	4973      	ldr	r1, [pc, #460]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800352a:	4b6e      	ldr	r3, [pc, #440]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003530:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	496a      	ldr	r1, [pc, #424]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800354c:	4b65      	ldr	r3, [pc, #404]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003552:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	4962      	ldr	r1, [pc, #392]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800356e:	4b5d      	ldr	r3, [pc, #372]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003574:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	4959      	ldr	r1, [pc, #356]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003590:	4b54      	ldr	r3, [pc, #336]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003596:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	4951      	ldr	r1, [pc, #324]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d015      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035b2:	4b4c      	ldr	r3, [pc, #304]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c0:	4948      	ldr	r1, [pc, #288]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035d0:	d105      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d2:	4b44      	ldr	r3, [pc, #272]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	4a43      	ldr	r2, [pc, #268]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035dc:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d015      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035ea:	4b3e      	ldr	r3, [pc, #248]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	493a      	ldr	r1, [pc, #232]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003604:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003608:	d105      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800360a:	4b36      	ldr	r3, [pc, #216]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	4a35      	ldr	r2, [pc, #212]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003610:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003614:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d015      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003622:	4b30      	ldr	r3, [pc, #192]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003628:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003630:	492c      	ldr	r1, [pc, #176]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800363c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003640:	d105      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003642:	4b28      	ldr	r3, [pc, #160]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4a27      	ldr	r2, [pc, #156]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003648:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800364c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d015      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800365a:	4b22      	ldr	r3, [pc, #136]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003660:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003668:	491e      	ldr	r1, [pc, #120]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003678:	d105      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800367a:	4b1a      	ldr	r3, [pc, #104]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	4a19      	ldr	r2, [pc, #100]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003680:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003684:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d015      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003692:	4b14      	ldr	r3, [pc, #80]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003698:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a0:	4910      	ldr	r1, [pc, #64]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036b0:	d105      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036b2:	4b0c      	ldr	r3, [pc, #48]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	4a0b      	ldr	r2, [pc, #44]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036bc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d018      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036ca:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	4902      	ldr	r1, [pc, #8]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	e001      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80036e4:	40021000 	.word	0x40021000
 80036e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036ee:	d105      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036f0:	4b21      	ldr	r3, [pc, #132]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4a20      	ldr	r2, [pc, #128]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80036f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d015      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003708:	4b1b      	ldr	r3, [pc, #108]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003716:	4918      	ldr	r1, [pc, #96]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003726:	d105      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003728:	4b13      	ldr	r3, [pc, #76]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4a12      	ldr	r2, [pc, #72]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800372e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003732:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d015      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003740:	4b0d      	ldr	r3, [pc, #52]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003742:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003746:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374e:	490a      	ldr	r1, [pc, #40]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800375a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800375e:	d105      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003760:	4b05      	ldr	r3, [pc, #20]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4a04      	ldr	r2, [pc, #16]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800376a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800376c:	7cbb      	ldrb	r3, [r7, #18]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000

0800377c <memset>:
 800377c:	4402      	add	r2, r0
 800377e:	4603      	mov	r3, r0
 8003780:	4293      	cmp	r3, r2
 8003782:	d100      	bne.n	8003786 <memset+0xa>
 8003784:	4770      	bx	lr
 8003786:	f803 1b01 	strb.w	r1, [r3], #1
 800378a:	e7f9      	b.n	8003780 <memset+0x4>

0800378c <__libc_init_array>:
 800378c:	b570      	push	{r4, r5, r6, lr}
 800378e:	4d0d      	ldr	r5, [pc, #52]	@ (80037c4 <__libc_init_array+0x38>)
 8003790:	4c0d      	ldr	r4, [pc, #52]	@ (80037c8 <__libc_init_array+0x3c>)
 8003792:	1b64      	subs	r4, r4, r5
 8003794:	10a4      	asrs	r4, r4, #2
 8003796:	2600      	movs	r6, #0
 8003798:	42a6      	cmp	r6, r4
 800379a:	d109      	bne.n	80037b0 <__libc_init_array+0x24>
 800379c:	4d0b      	ldr	r5, [pc, #44]	@ (80037cc <__libc_init_array+0x40>)
 800379e:	4c0c      	ldr	r4, [pc, #48]	@ (80037d0 <__libc_init_array+0x44>)
 80037a0:	f000 f818 	bl	80037d4 <_init>
 80037a4:	1b64      	subs	r4, r4, r5
 80037a6:	10a4      	asrs	r4, r4, #2
 80037a8:	2600      	movs	r6, #0
 80037aa:	42a6      	cmp	r6, r4
 80037ac:	d105      	bne.n	80037ba <__libc_init_array+0x2e>
 80037ae:	bd70      	pop	{r4, r5, r6, pc}
 80037b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b4:	4798      	blx	r3
 80037b6:	3601      	adds	r6, #1
 80037b8:	e7ee      	b.n	8003798 <__libc_init_array+0xc>
 80037ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80037be:	4798      	blx	r3
 80037c0:	3601      	adds	r6, #1
 80037c2:	e7f2      	b.n	80037aa <__libc_init_array+0x1e>
 80037c4:	080037fc 	.word	0x080037fc
 80037c8:	080037fc 	.word	0x080037fc
 80037cc:	080037fc 	.word	0x080037fc
 80037d0:	08003800 	.word	0x08003800

080037d4 <_init>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	bf00      	nop
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr

080037e0 <_fini>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	bf00      	nop
 80037e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e6:	bc08      	pop	{r3}
 80037e8:	469e      	mov	lr, r3
 80037ea:	4770      	bx	lr
