
ADCCalibration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000352c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003704  08003704  00004704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003714  08003714  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003714  08003714  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003714  08003714  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003714  08003714  00004714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003718  08003718  00004718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800371c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  08003728  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08003728  000050a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a303  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a38  00000000  00000000  0000f33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  00010d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d4  00000000  00000000  000117f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e337  00000000  00000000  00011fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0e7  00000000  00000000  000302fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8fc7  00000000  00000000  0003b3e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001043a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae0  00000000  00000000  001043ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00106ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080036ec 	.word	0x080036ec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080036ec 	.word	0x080036ec

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	ADC_ChannelConfTypeDef sConfig ={0};
 800021e:	463b      	mov	r3, r7
 8000220:	2220      	movs	r2, #32
 8000222:	2100      	movs	r1, #0
 8000224:	4618      	mov	r0, r3
 8000226:	f003 fa35 	bl	8003694 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fa62 	bl	80006f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f89b 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f95d 	bl	80004f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000236:	f000 f8e3 	bl	8000400 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //Get Offset Accuracy
  //GND connects with ADC_IN1
  //Init sConfig for ADC_IN1 is in MX_ADC1_Init
  sConfig.Channel = ADC_CHANNEL_1;
 800023a:	4b42      	ldr	r3, [pc, #264]	@ (8000344 <main+0x12c>)
 800023c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800023e:	2301      	movs	r3, #1
 8000240:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000246:	463b      	mov	r3, r7
 8000248:	4619      	mov	r1, r3
 800024a:	483f      	ldr	r0, [pc, #252]	@ (8000348 <main+0x130>)
 800024c:	f001 f8ea 	bl	8001424 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8000250:	483d      	ldr	r0, [pc, #244]	@ (8000348 <main+0x130>)
 8000252:	f000 fee7 	bl	8001024 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000256:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800025a:	483b      	ldr	r0, [pc, #236]	@ (8000348 <main+0x130>)
 800025c:	f000 ffe0 	bl	8001220 <HAL_ADC_PollForConversion>
  OffsetAcc = HAL_ADC_GetValue(&hadc1);
 8000260:	4839      	ldr	r0, [pc, #228]	@ (8000348 <main+0x130>)
 8000262:	f001 f8d1 	bl	8001408 <HAL_ADC_GetValue>
 8000266:	4603      	mov	r3, r0
 8000268:	4a38      	ldr	r2, [pc, #224]	@ (800034c <main+0x134>)
 800026a:	6013      	str	r3, [r2, #0]
  HAL_ADC_Stop(&hadc1);
 800026c:	4836      	ldr	r0, [pc, #216]	@ (8000348 <main+0x130>)
 800026e:	f000 ffa3 	bl	80011b8 <HAL_ADC_Stop>
  hadc1.Instance->SQR1 = 0;
 8000272:	4b35      	ldr	r3, [pc, #212]	@ (8000348 <main+0x130>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2200      	movs	r2, #0
 8000278:	631a      	str	r2, [r3, #48]	@ 0x30

  //Get Gain Accuracy
  //Vdd connects with ADC_IN2
  sConfig.Channel = ADC_CHANNEL_2;
 800027a:	4b35      	ldr	r3, [pc, #212]	@ (8000350 <main+0x138>)
 800027c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800027e:	2301      	movs	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000282:	2300      	movs	r3, #0
 8000284:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000286:	463b      	mov	r3, r7
 8000288:	4619      	mov	r1, r3
 800028a:	482f      	ldr	r0, [pc, #188]	@ (8000348 <main+0x130>)
 800028c:	f001 f8ca 	bl	8001424 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8000290:	482d      	ldr	r0, [pc, #180]	@ (8000348 <main+0x130>)
 8000292:	f000 fec7 	bl	8001024 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,1000);
 8000296:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800029a:	482b      	ldr	r0, [pc, #172]	@ (8000348 <main+0x130>)
 800029c:	f000 ffc0 	bl	8001220 <HAL_ADC_PollForConversion>
  GainAcc = HAL_ADC_GetValue(&hadc1);
 80002a0:	4829      	ldr	r0, [pc, #164]	@ (8000348 <main+0x130>)
 80002a2:	f001 f8b1 	bl	8001408 <HAL_ADC_GetValue>
 80002a6:	4603      	mov	r3, r0
 80002a8:	4a2a      	ldr	r2, [pc, #168]	@ (8000354 <main+0x13c>)
 80002aa:	6013      	str	r3, [r2, #0]
  HAL_ADC_Stop(&hadc1);
 80002ac:	4826      	ldr	r0, [pc, #152]	@ (8000348 <main+0x130>)
 80002ae:	f000 ff83 	bl	80011b8 <HAL_ADC_Stop>
  hadc1.Instance->SQR1 = 0;
 80002b2:	4b25      	ldr	r3, [pc, #148]	@ (8000348 <main+0x130>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2200      	movs	r2, #0
 80002b8:	631a      	str	r2, [r3, #48]	@ 0x30

  //Get ADC and conver to calibrated value
  //The ADC port connects with ADC_IN4
  sConfig.Channel = ADC_CHANNEL_4;
 80002ba:	4b27      	ldr	r3, [pc, #156]	@ (8000358 <main+0x140>)
 80002bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80002be:	2301      	movs	r3, #1
 80002c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80002c6:	463b      	mov	r3, r7
 80002c8:	4619      	mov	r1, r3
 80002ca:	481f      	ldr	r0, [pc, #124]	@ (8000348 <main+0x130>)
 80002cc:	f001 f8aa 	bl	8001424 <HAL_ADC_ConfigChannel>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Get ADC Value
	  HAL_ADC_Start(&hadc1);
 80002d0:	481d      	ldr	r0, [pc, #116]	@ (8000348 <main+0x130>)
 80002d2:	f000 fea7 	bl	8001024 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80002d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80002da:	481b      	ldr	r0, [pc, #108]	@ (8000348 <main+0x130>)
 80002dc:	f000 ffa0 	bl	8001220 <HAL_ADC_PollForConversion>
	  ADCValue = HAL_ADC_GetValue(&hadc1);
 80002e0:	4819      	ldr	r0, [pc, #100]	@ (8000348 <main+0x130>)
 80002e2:	f001 f891 	bl	8001408 <HAL_ADC_GetValue>
 80002e6:	4603      	mov	r3, r0
 80002e8:	4a1c      	ldr	r2, [pc, #112]	@ (800035c <main+0x144>)
 80002ea:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 80002ec:	4816      	ldr	r0, [pc, #88]	@ (8000348 <main+0x130>)
 80002ee:	f000 ff63 	bl	80011b8 <HAL_ADC_Stop>
	  // Get Calibrated Voltage
	  V = 3.3F*((float)ADCValue - (float)OffsetAcc)/((float)GainAcc - (float)OffsetAcc);
 80002f2:	4b1a      	ldr	r3, [pc, #104]	@ (800035c <main+0x144>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	ee07 3a90 	vmov	s15, r3
 80002fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80002fe:	4b13      	ldr	r3, [pc, #76]	@ (800034c <main+0x134>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	ee07 3a90 	vmov	s15, r3
 8000306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800030a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800030e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000360 <main+0x148>
 8000312:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000316:	4b0f      	ldr	r3, [pc, #60]	@ (8000354 <main+0x13c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	ee07 3a90 	vmov	s15, r3
 800031e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000322:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <main+0x134>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	ee07 3a90 	vmov	s15, r3
 800032a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800032e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000336:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <main+0x14c>)
 8000338:	edc3 7a00 	vstr	s15, [r3]
	  __NOP();
 800033c:	bf00      	nop
	  HAL_ADC_Start(&hadc1);
 800033e:	bf00      	nop
 8000340:	e7c6      	b.n	80002d0 <main+0xb8>
 8000342:	bf00      	nop
 8000344:	04300002 	.word	0x04300002
 8000348:	20000028 	.word	0x20000028
 800034c:	20000094 	.word	0x20000094
 8000350:	08600004 	.word	0x08600004
 8000354:	20000098 	.word	0x20000098
 8000358:	10c00010 	.word	0x10c00010
 800035c:	2000009c 	.word	0x2000009c
 8000360:	40533333 	.word	0x40533333
 8000364:	200000a0 	.word	0x200000a0

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b094      	sub	sp, #80	@ 0x50
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 0318 	add.w	r3, r7, #24
 8000372:	2238      	movs	r2, #56	@ 0x38
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f003 f98c 	bl	8003694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800038a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800038e:	f002 f99b 	bl	80026c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000392:	2302      	movs	r3, #2
 8000394:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000396:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800039a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800039c:	2340      	movs	r3, #64	@ 0x40
 800039e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a0:	2302      	movs	r3, #2
 80003a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003a4:	2302      	movs	r3, #2
 80003a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 80003ac:	2315      	movs	r3, #21
 80003ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003b0:	2302      	movs	r3, #2
 80003b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003b4:	2302      	movs	r3, #2
 80003b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003b8:	2302      	movs	r3, #2
 80003ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003bc:	f107 0318 	add.w	r3, r7, #24
 80003c0:	4618      	mov	r0, r3
 80003c2:	f002 fa35 	bl	8002830 <HAL_RCC_OscConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80003cc:	f000 f8a8 	bl	8000520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d0:	230f      	movs	r3, #15
 80003d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d4:	2303      	movs	r3, #3
 80003d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80003d8:	2380      	movs	r3, #128	@ 0x80
 80003da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2102      	movs	r1, #2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f002 fd33 	bl	8002e54 <HAL_RCC_ClockConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003f4:	f000 f894 	bl	8000520 <Error_Handler>
  }
}
 80003f8:	bf00      	nop
 80003fa:	3750      	adds	r7, #80	@ 0x50
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08c      	sub	sp, #48	@ 0x30
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2220      	movs	r2, #32
 8000416:	2100      	movs	r1, #0
 8000418:	4618      	mov	r0, r3
 800041a:	f003 f93b 	bl	8003694 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800041e:	4b32      	ldr	r3, [pc, #200]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 8000420:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000424:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000426:	4b30      	ldr	r3, [pc, #192]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 8000428:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800042c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800042e:	4b2e      	ldr	r3, [pc, #184]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000434:	4b2c      	ldr	r3, [pc, #176]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 8000436:	2200      	movs	r2, #0
 8000438:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800043a:	4b2b      	ldr	r3, [pc, #172]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 800043c:	2200      	movs	r2, #0
 800043e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000440:	4b29      	ldr	r3, [pc, #164]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 8000442:	2200      	movs	r2, #0
 8000444:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000446:	4b28      	ldr	r3, [pc, #160]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 8000448:	2204      	movs	r2, #4
 800044a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800044c:	4b26      	ldr	r3, [pc, #152]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 800044e:	2200      	movs	r2, #0
 8000450:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000452:	4b25      	ldr	r3, [pc, #148]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 8000454:	2200      	movs	r2, #0
 8000456:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000458:	4b23      	ldr	r3, [pc, #140]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 800045a:	2201      	movs	r2, #1
 800045c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800045e:	4b22      	ldr	r3, [pc, #136]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 8000460:	2200      	movs	r2, #0
 8000462:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000466:	4b20      	ldr	r3, [pc, #128]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 8000468:	2200      	movs	r2, #0
 800046a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800046c:	4b1e      	ldr	r3, [pc, #120]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 800046e:	2200      	movs	r2, #0
 8000470:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000472:	4b1d      	ldr	r3, [pc, #116]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 8000474:	2200      	movs	r2, #0
 8000476:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800047a:	4b1b      	ldr	r3, [pc, #108]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 800047c:	2200      	movs	r2, #0
 800047e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000480:	4b19      	ldr	r3, [pc, #100]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 8000482:	2200      	movs	r2, #0
 8000484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000488:	4817      	ldr	r0, [pc, #92]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 800048a:	f000 fc1d 	bl	8000cc8 <HAL_ADC_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000494:	f000 f844 	bl	8000520 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000498:	2300      	movs	r3, #0
 800049a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800049c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004a0:	4619      	mov	r1, r3
 80004a2:	4811      	ldr	r0, [pc, #68]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 80004a4:	f001 fdc2 	bl	800202c <HAL_ADCEx_MultiModeConfigChannel>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80004ae:	f000 f837 	bl	8000520 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	@ (80004ec <MX_ADC1_Init+0xec>)
 80004b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004b6:	2306      	movs	r3, #6
 80004b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004be:	237f      	movs	r3, #127	@ 0x7f
 80004c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004c2:	2304      	movs	r3, #4
 80004c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	4619      	mov	r1, r3
 80004ce:	4806      	ldr	r0, [pc, #24]	@ (80004e8 <MX_ADC1_Init+0xe8>)
 80004d0:	f000 ffa8 	bl	8001424 <HAL_ADC_ConfigChannel>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80004da:	f000 f821 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	3730      	adds	r7, #48	@ 0x30
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000028 	.word	0x20000028
 80004ec:	04300002 	.word	0x04300002

080004f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	4b09      	ldr	r3, [pc, #36]	@ (800051c <MX_GPIO_Init+0x2c>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fa:	4a08      	ldr	r2, [pc, #32]	@ (800051c <MX_GPIO_Init+0x2c>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000502:	4b06      	ldr	r3, [pc, #24]	@ (800051c <MX_GPIO_Init+0x2c>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000

08000520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000524:	b672      	cpsid	i
}
 8000526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <Error_Handler+0x8>

0800052c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <HAL_MspInit+0x44>)
 8000534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000536:	4a0e      	ldr	r2, [pc, #56]	@ (8000570 <HAL_MspInit+0x44>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6613      	str	r3, [r2, #96]	@ 0x60
 800053e:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <HAL_MspInit+0x44>)
 8000540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <HAL_MspInit+0x44>)
 800054c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800054e:	4a08      	ldr	r2, [pc, #32]	@ (8000570 <HAL_MspInit+0x44>)
 8000550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000554:	6593      	str	r3, [r2, #88]	@ 0x58
 8000556:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <HAL_MspInit+0x44>)
 8000558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800055a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000562:	f002 f955 	bl	8002810 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b09e      	sub	sp, #120	@ 0x78
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2250      	movs	r2, #80	@ 0x50
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f003 f87d 	bl	8003694 <memset>
  if(hadc->Instance==ADC1)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80005a2:	d134      	bne.n	800060e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80005a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80005aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80005ae:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fe31 	bl	800321c <HAL_RCCEx_PeriphCLKConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80005c0:	f7ff ffae 	bl	8000520 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80005c4:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <HAL_ADC_MspInit+0xa4>)
 80005c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c8:	4a13      	ldr	r2, [pc, #76]	@ (8000618 <HAL_ADC_MspInit+0xa4>)
 80005ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <HAL_ADC_MspInit+0xa4>)
 80005d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <HAL_ADC_MspInit+0xa4>)
 80005de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000618 <HAL_ADC_MspInit+0xa4>)
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <HAL_ADC_MspInit+0xa4>)
 80005ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80005f4:	230b      	movs	r3, #11
 80005f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f8:	2303      	movs	r3, #3
 80005fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000604:	4619      	mov	r1, r3
 8000606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060a:	f001 fedb 	bl	80023c4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800060e:	bf00      	nop
 8000610:	3778      	adds	r7, #120	@ 0x78
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <NMI_Handler+0x4>

08000624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <MemManage_Handler+0x4>

08000634 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <BusFault_Handler+0x4>

0800063c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <UsageFault_Handler+0x4>

08000644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000672:	f000 f891 	bl	8000798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <SystemInit+0x20>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000686:	4a05      	ldr	r2, [pc, #20]	@ (800069c <SystemInit+0x20>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a0:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a4:	f7ff ffea 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	@ (80006dc <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	@ (80006e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	@ (80006e4 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	@ (80006e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	@ (80006ec <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ce:	f002 ffe9 	bl	80036a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006d2:	f7ff fda1 	bl	8000218 <main>

080006d6 <LoopForever>:

LoopForever:
    b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   r0, =_estack
 80006d8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e4:	0800371c 	.word	0x0800371c
  ldr r2, =_sbss
 80006e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006ec:	200000a8 	.word	0x200000a8

080006f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_2_IRQHandler>

080006f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006f8:	2300      	movs	r3, #0
 80006fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fc:	2003      	movs	r0, #3
 80006fe:	f001 fe2f 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000702:	200f      	movs	r0, #15
 8000704:	f000 f80e 	bl	8000724 <HAL_InitTick>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d002      	beq.n	8000714 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	e001      	b.n	8000718 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000714:	f7ff ff0a 	bl	800052c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000718:	79fb      	ldrb	r3, [r7, #7]

}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800072c:	2300      	movs	r3, #0
 800072e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000730:	4b16      	ldr	r3, [pc, #88]	@ (800078c <HAL_InitTick+0x68>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d022      	beq.n	800077e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000738:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <HAL_InitTick+0x6c>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b13      	ldr	r3, [pc, #76]	@ (800078c <HAL_InitTick+0x68>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000744:	fbb1 f3f3 	udiv	r3, r1, r3
 8000748:	fbb2 f3f3 	udiv	r3, r2, r3
 800074c:	4618      	mov	r0, r3
 800074e:	f001 fe2c 	bl	80023aa <HAL_SYSTICK_Config>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d10f      	bne.n	8000778 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b0f      	cmp	r3, #15
 800075c:	d809      	bhi.n	8000772 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800075e:	2200      	movs	r2, #0
 8000760:	6879      	ldr	r1, [r7, #4]
 8000762:	f04f 30ff 	mov.w	r0, #4294967295
 8000766:	f001 fe06 	bl	8002376 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800076a:	4a0a      	ldr	r2, [pc, #40]	@ (8000794 <HAL_InitTick+0x70>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	e007      	b.n	8000782 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	e004      	b.n	8000782 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000778:	2301      	movs	r3, #1
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	e001      	b.n	8000782 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000782:	7bfb      	ldrb	r3, [r7, #15]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000008 	.word	0x20000008
 8000790:	20000000 	.word	0x20000000
 8000794:	20000004 	.word	0x20000004

08000798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <HAL_IncTick+0x1c>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <HAL_IncTick+0x20>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4413      	add	r3, r2
 80007a6:	4a03      	ldr	r2, [pc, #12]	@ (80007b4 <HAL_IncTick+0x1c>)
 80007a8:	6013      	str	r3, [r2, #0]
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	200000a4 	.word	0x200000a4
 80007b8:	20000008 	.word	0x20000008

080007bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return uwTick;
 80007c0:	4b03      	ldr	r3, [pc, #12]	@ (80007d0 <HAL_GetTick+0x14>)
 80007c2:	681b      	ldr	r3, [r3, #0]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	200000a4 	.word	0x200000a4

080007d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	431a      	orrs	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	609a      	str	r2, [r3, #8]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
 8000802:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	431a      	orrs	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	609a      	str	r2, [r3, #8]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000830:	4618      	mov	r0, r3
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800083c:	b480      	push	{r7}
 800083e:	b087      	sub	sp, #28
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3360      	adds	r3, #96	@ 0x60
 800084e:	461a      	mov	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <LL_ADC_SetOffset+0x44>)
 800085e:	4013      	ands	r3, r2
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000866:	683a      	ldr	r2, [r7, #0]
 8000868:	430a      	orrs	r2, r1
 800086a:	4313      	orrs	r3, r2
 800086c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000874:	bf00      	nop
 8000876:	371c      	adds	r7, #28
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	03fff000 	.word	0x03fff000

08000884 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3360      	adds	r3, #96	@ 0x60
 8000892:	461a      	mov	r2, r3
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b087      	sub	sp, #28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3360      	adds	r3, #96	@ 0x60
 80008c0:	461a      	mov	r2, r3
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4413      	add	r3, r2
 80008c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	431a      	orrs	r2, r3
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80008da:	bf00      	nop
 80008dc:	371c      	adds	r7, #28
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b087      	sub	sp, #28
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3360      	adds	r3, #96	@ 0x60
 80008f6:	461a      	mov	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4413      	add	r3, r2
 80008fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	431a      	orrs	r2, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000910:	bf00      	nop
 8000912:	371c      	adds	r7, #28
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800091c:	b480      	push	{r7}
 800091e:	b087      	sub	sp, #28
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3360      	adds	r3, #96	@ 0x60
 800092c:	461a      	mov	r2, r3
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4413      	add	r3, r2
 8000934:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	431a      	orrs	r2, r3
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000946:	bf00      	nop
 8000948:	371c      	adds	r7, #28
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	431a      	orrs	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	615a      	str	r2, [r3, #20]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000988:	2b00      	cmp	r3, #0
 800098a:	d101      	bne.n	8000990 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800098c:	2301      	movs	r3, #1
 800098e:	e000      	b.n	8000992 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800099e:	b480      	push	{r7}
 80009a0:	b087      	sub	sp, #28
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	60f8      	str	r0, [r7, #12]
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	3330      	adds	r3, #48	@ 0x30
 80009ae:	461a      	mov	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	0a1b      	lsrs	r3, r3, #8
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	f003 030c 	and.w	r3, r3, #12
 80009ba:	4413      	add	r3, r2
 80009bc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	f003 031f 	and.w	r3, r3, #31
 80009c8:	211f      	movs	r1, #31
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	401a      	ands	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	0e9b      	lsrs	r3, r3, #26
 80009d6:	f003 011f 	and.w	r1, r3, #31
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	f003 031f 	and.w	r3, r3, #31
 80009e0:	fa01 f303 	lsl.w	r3, r1, r3
 80009e4:	431a      	orrs	r2, r3
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009ea:	bf00      	nop
 80009ec:	371c      	adds	r7, #28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b087      	sub	sp, #28
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	60f8      	str	r0, [r7, #12]
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	3314      	adds	r3, #20
 8000a06:	461a      	mov	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	0e5b      	lsrs	r3, r3, #25
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	4413      	add	r3, r2
 8000a14:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	0d1b      	lsrs	r3, r3, #20
 8000a1e:	f003 031f 	and.w	r3, r3, #31
 8000a22:	2107      	movs	r1, #7
 8000a24:	fa01 f303 	lsl.w	r3, r1, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	0d1b      	lsrs	r3, r3, #20
 8000a30:	f003 031f 	and.w	r3, r3, #31
 8000a34:	6879      	ldr	r1, [r7, #4]
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000a40:	bf00      	nop
 8000a42:	371c      	adds	r7, #28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a64:	43db      	mvns	r3, r3
 8000a66:	401a      	ands	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f003 0318 	and.w	r3, r3, #24
 8000a6e:	4908      	ldr	r1, [pc, #32]	@ (8000a90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000a70:	40d9      	lsrs	r1, r3
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	400b      	ands	r3, r1
 8000a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a7a:	431a      	orrs	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	0007ffff 	.word	0x0007ffff

08000a94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	f003 031f 	and.w	r3, r3, #31
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000adc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	6093      	str	r3, [r2, #8]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000b00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b04:	d101      	bne.n	8000b0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000b06:	2301      	movs	r3, #1
 8000b08:	e000      	b.n	8000b0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000b28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000b54:	d101      	bne.n	8000b5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000b56:	2301      	movs	r3, #1
 8000b58:	e000      	b.n	8000b5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000b78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b7c:	f043 0201 	orr.w	r2, r3, #1
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ba0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ba4:	f043 0202 	orr.w	r2, r3, #2
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d101      	bne.n	8000bd0 <LL_ADC_IsEnabled+0x18>
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e000      	b.n	8000bd2 <LL_ADC_IsEnabled+0x1a>
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d101      	bne.n	8000bf6 <LL_ADC_IsDisableOngoing+0x18>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e000      	b.n	8000bf8 <LL_ADC_IsDisableOngoing+0x1a>
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c18:	f043 0204 	orr.w	r2, r3, #4
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c40:	f043 0210 	orr.w	r2, r3, #16
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	d101      	bne.n	8000c6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e000      	b.n	8000c6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c8a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c8e:	f043 0220 	orr.w	r2, r3, #32
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f003 0308 	and.w	r3, r3, #8
 8000cb2:	2b08      	cmp	r3, #8
 8000cb4:	d101      	bne.n	8000cba <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e000      	b.n	8000cbc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000cba:	2300      	movs	r3, #0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b089      	sub	sp, #36	@ 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e19b      	b.n	800101a <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d109      	bne.n	8000d04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fc3f 	bl	8000574 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fef1 	bl	8000af0 <LL_ADC_IsDeepPowerDownEnabled>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d004      	beq.n	8000d1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fed7 	bl	8000acc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff0c 	bl	8000b40 <LL_ADC_IsInternalRegulatorEnabled>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d115      	bne.n	8000d5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fef0 	bl	8000b18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000d38:	4b97      	ldr	r3, [pc, #604]	@ (8000f98 <HAL_ADC_Init+0x2d0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	099b      	lsrs	r3, r3, #6
 8000d3e:	4a97      	ldr	r2, [pc, #604]	@ (8000f9c <HAL_ADC_Init+0x2d4>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	099b      	lsrs	r3, r3, #6
 8000d46:	3301      	adds	r3, #1
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d4c:	e002      	b.n	8000d54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f9      	bne.n	8000d4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff feee 	bl	8000b40 <LL_ADC_IsInternalRegulatorEnabled>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10d      	bne.n	8000d86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d6e:	f043 0210 	orr.w	r2, r3, #16
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d7a:	f043 0201 	orr.w	r2, r3, #1
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff62 	bl	8000c54 <LL_ADC_REG_IsConversionOngoing>
 8000d90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 8134 	bne.w	8001008 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8130 	bne.w	8001008 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000db0:	f043 0202 	orr.w	r2, r3, #2
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fefb 	bl	8000bb8 <LL_ADC_IsEnabled>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d137      	bne.n	8000e38 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dd0:	d004      	beq.n	8000ddc <HAL_ADC_Init+0x114>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a72      	ldr	r2, [pc, #456]	@ (8000fa0 <HAL_ADC_Init+0x2d8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d10f      	bne.n	8000dfc <HAL_ADC_Init+0x134>
 8000ddc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8000de0:	f7ff feea 	bl	8000bb8 <LL_ADC_IsEnabled>
 8000de4:	4604      	mov	r4, r0
 8000de6:	486e      	ldr	r0, [pc, #440]	@ (8000fa0 <HAL_ADC_Init+0x2d8>)
 8000de8:	f7ff fee6 	bl	8000bb8 <LL_ADC_IsEnabled>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4323      	orrs	r3, r4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	bf0c      	ite	eq
 8000df4:	2301      	moveq	r3, #1
 8000df6:	2300      	movne	r3, #0
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	e008      	b.n	8000e0e <HAL_ADC_Init+0x146>
 8000dfc:	4869      	ldr	r0, [pc, #420]	@ (8000fa4 <HAL_ADC_Init+0x2dc>)
 8000dfe:	f7ff fedb 	bl	8000bb8 <LL_ADC_IsEnabled>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	bf0c      	ite	eq
 8000e08:	2301      	moveq	r3, #1
 8000e0a:	2300      	movne	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d012      	beq.n	8000e38 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e1a:	d004      	beq.n	8000e26 <HAL_ADC_Init+0x15e>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a5f      	ldr	r2, [pc, #380]	@ (8000fa0 <HAL_ADC_Init+0x2d8>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d101      	bne.n	8000e2a <HAL_ADC_Init+0x162>
 8000e26:	4a60      	ldr	r2, [pc, #384]	@ (8000fa8 <HAL_ADC_Init+0x2e0>)
 8000e28:	e000      	b.n	8000e2c <HAL_ADC_Init+0x164>
 8000e2a:	4a60      	ldr	r2, [pc, #384]	@ (8000fac <HAL_ADC_Init+0x2e4>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	4619      	mov	r1, r3
 8000e32:	4610      	mov	r0, r2
 8000e34:	f7ff fcce 	bl	80007d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7f5b      	ldrb	r3, [r3, #29]
 8000e3c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e42:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000e48:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000e4e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e56:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d106      	bne.n	8000e74 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	045b      	lsls	r3, r3, #17
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d009      	beq.n	8000e90 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e80:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e88:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	4b46      	ldr	r3, [pc, #280]	@ (8000fb0 <HAL_ADC_Init+0x2e8>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	6812      	ldr	r2, [r2, #0]
 8000e9e:	69b9      	ldr	r1, [r7, #24]
 8000ea0:	430b      	orrs	r3, r1
 8000ea2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff feef 	bl	8000ca2 <LL_ADC_INJ_IsConversionOngoing>
 8000ec4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d17b      	bne.n	8000fc4 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d178      	bne.n	8000fc4 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ed6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000ede:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000eee:	f023 0302 	bic.w	r3, r3, #2
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	69b9      	ldr	r1, [r7, #24]
 8000ef8:	430b      	orrs	r3, r1
 8000efa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d017      	beq.n	8000f34 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	691a      	ldr	r2, [r3, #16]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000f12:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8000f1c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000f20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	6911      	ldr	r1, [r2, #16]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8000f32:	e013      	b.n	8000f5c <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000f42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6812      	ldr	r2, [r2, #0]
 8000f50:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000f54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f58:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d126      	bne.n	8000fb4 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000f70:	f023 0304 	bic.w	r3, r3, #4
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000f7c:	4311      	orrs	r1, r2
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000f82:	4311      	orrs	r1, r2
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 0201 	orr.w	r2, r2, #1
 8000f94:	611a      	str	r2, [r3, #16]
 8000f96:	e015      	b.n	8000fc4 <HAL_ADC_Init+0x2fc>
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	053e2d63 	.word	0x053e2d63
 8000fa0:	50000100 	.word	0x50000100
 8000fa4:	50000400 	.word	0x50000400
 8000fa8:	50000300 	.word	0x50000300
 8000fac:	50000700 	.word	0x50000700
 8000fb0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0201 	bic.w	r2, r2, #1
 8000fc2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d10c      	bne.n	8000fe6 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f023 010f 	bic.w	r1, r3, #15
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	1e5a      	subs	r2, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fe4:	e007      	b.n	8000ff6 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 020f 	bic.w	r2, r2, #15
 8000ff4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ffa:	f023 0303 	bic.w	r3, r3, #3
 8000ffe:	f043 0201 	orr.w	r2, r3, #1
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001006:	e007      	b.n	8001018 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800100c:	f043 0210 	orr.w	r2, r3, #16
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001018:	7ffb      	ldrb	r3, [r7, #31]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	@ 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	bf00      	nop

08001024 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001034:	d004      	beq.n	8001040 <HAL_ADC_Start+0x1c>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a5c      	ldr	r2, [pc, #368]	@ (80011ac <HAL_ADC_Start+0x188>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d101      	bne.n	8001044 <HAL_ADC_Start+0x20>
 8001040:	4b5b      	ldr	r3, [pc, #364]	@ (80011b0 <HAL_ADC_Start+0x18c>)
 8001042:	e000      	b.n	8001046 <HAL_ADC_Start+0x22>
 8001044:	4b5b      	ldr	r3, [pc, #364]	@ (80011b4 <HAL_ADC_Start+0x190>)
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fd24 	bl	8000a94 <LL_ADC_GetMultimode>
 800104c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fdfe 	bl	8000c54 <LL_ADC_REG_IsConversionOngoing>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	f040 809f 	bne.w	800119e <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001066:	2b01      	cmp	r3, #1
 8001068:	d101      	bne.n	800106e <HAL_ADC_Start+0x4a>
 800106a:	2302      	movs	r3, #2
 800106c:	e09a      	b.n	80011a4 <HAL_ADC_Start+0x180>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 febc 	bl	8001df4 <ADC_Enable>
 800107c:	4603      	mov	r3, r0
 800107e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	2b00      	cmp	r3, #0
 8001084:	f040 8086 	bne.w	8001194 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800108c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001090:	f023 0301 	bic.w	r3, r3, #1
 8001094:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a42      	ldr	r2, [pc, #264]	@ (80011ac <HAL_ADC_Start+0x188>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d002      	beq.n	80010ac <HAL_ADC_Start+0x88>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	e001      	b.n	80010b0 <HAL_ADC_Start+0x8c>
 80010ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d002      	beq.n	80010be <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d105      	bne.n	80010ca <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010d6:	d106      	bne.n	80010e6 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010dc:	f023 0206 	bic.w	r2, r3, #6
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	661a      	str	r2, [r3, #96]	@ 0x60
 80010e4:	e002      	b.n	80010ec <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	221c      	movs	r2, #28
 80010f2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a2a      	ldr	r2, [pc, #168]	@ (80011ac <HAL_ADC_Start+0x188>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d002      	beq.n	800110c <HAL_ADC_Start+0xe8>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	e001      	b.n	8001110 <HAL_ADC_Start+0xec>
 800110c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	4293      	cmp	r3, r2
 8001116:	d008      	beq.n	800112a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d005      	beq.n	800112a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	2b05      	cmp	r3, #5
 8001122:	d002      	beq.n	800112a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	2b09      	cmp	r3, #9
 8001128:	d114      	bne.n	8001154 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d007      	beq.n	8001148 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800113c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001140:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fd59 	bl	8000c04 <LL_ADC_REG_StartConversion>
 8001152:	e026      	b.n	80011a2 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001158:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a11      	ldr	r2, [pc, #68]	@ (80011ac <HAL_ADC_Start+0x188>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d002      	beq.n	8001170 <HAL_ADC_Start+0x14c>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	e001      	b.n	8001174 <HAL_ADC_Start+0x150>
 8001170:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001174:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00f      	beq.n	80011a2 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001186:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800118a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001192:	e006      	b.n	80011a2 <HAL_ADC_Start+0x17e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800119c:	e001      	b.n	80011a2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800119e:	2302      	movs	r3, #2
 80011a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	50000100 	.word	0x50000100
 80011b0:	50000300 	.word	0x50000300
 80011b4:	50000700 	.word	0x50000700

080011b8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d101      	bne.n	80011ce <HAL_ADC_Stop+0x16>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e023      	b.n	8001216 <HAL_ADC_Stop+0x5e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80011d6:	2103      	movs	r1, #3
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fd4f 	bl	8001c7c <ADC_ConversionStop>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d111      	bne.n	800120c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 fe99 	bl	8001f20 <ADC_Disable>
 80011ee:	4603      	mov	r3, r0
 80011f0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d109      	bne.n	800120c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001200:	f023 0301 	bic.w	r3, r3, #1
 8001204:	f043 0201 	orr.w	r2, r3, #1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001232:	d004      	beq.n	800123e <HAL_ADC_PollForConversion+0x1e>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a70      	ldr	r2, [pc, #448]	@ (80013fc <HAL_ADC_PollForConversion+0x1dc>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_ADC_PollForConversion+0x22>
 800123e:	4b70      	ldr	r3, [pc, #448]	@ (8001400 <HAL_ADC_PollForConversion+0x1e0>)
 8001240:	e000      	b.n	8001244 <HAL_ADC_PollForConversion+0x24>
 8001242:	4b70      	ldr	r3, [pc, #448]	@ (8001404 <HAL_ADC_PollForConversion+0x1e4>)
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fc25 	bl	8000a94 <LL_ADC_GetMultimode>
 800124a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	2b08      	cmp	r3, #8
 8001252:	d102      	bne.n	800125a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001254:	2308      	movs	r3, #8
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	e037      	b.n	80012ca <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2b05      	cmp	r3, #5
 8001264:	d002      	beq.n	800126c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2b09      	cmp	r3, #9
 800126a:	d111      	bne.n	8001290 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d007      	beq.n	800128a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800127e:	f043 0220 	orr.w	r2, r3, #32
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e0b3      	b.n	80013f2 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800128a:	2304      	movs	r3, #4
 800128c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800128e:	e01c      	b.n	80012ca <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001298:	d004      	beq.n	80012a4 <HAL_ADC_PollForConversion+0x84>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a57      	ldr	r2, [pc, #348]	@ (80013fc <HAL_ADC_PollForConversion+0x1dc>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d101      	bne.n	80012a8 <HAL_ADC_PollForConversion+0x88>
 80012a4:	4b56      	ldr	r3, [pc, #344]	@ (8001400 <HAL_ADC_PollForConversion+0x1e0>)
 80012a6:	e000      	b.n	80012aa <HAL_ADC_PollForConversion+0x8a>
 80012a8:	4b56      	ldr	r3, [pc, #344]	@ (8001404 <HAL_ADC_PollForConversion+0x1e4>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fc00 	bl	8000ab0 <LL_ADC_GetMultiDMATransfer>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d007      	beq.n	80012c6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ba:	f043 0220 	orr.w	r2, r3, #32
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e095      	b.n	80013f2 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80012c6:	2304      	movs	r3, #4
 80012c8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80012ca:	f7ff fa77 	bl	80007bc <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80012d0:	e021      	b.n	8001316 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d8:	d01d      	beq.n	8001316 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80012da:	f7ff fa6f 	bl	80007bc <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d302      	bcc.n	80012f0 <HAL_ADC_PollForConversion+0xd0>
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d112      	bne.n	8001316 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	4013      	ands	r3, r2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10b      	bne.n	8001316 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001302:	f043 0204 	orr.w	r2, r3, #4
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e06d      	b.n	80013f2 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	4013      	ands	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0d6      	beq.n	80012d2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001328:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fb1f 	bl	8000978 <LL_ADC_REG_IsTriggerSourceSWStart>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d01c      	beq.n	800137a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7f5b      	ldrb	r3, [r3, #29]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d118      	bne.n	800137a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b08      	cmp	r3, #8
 8001354:	d111      	bne.n	800137a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800135a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001366:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d105      	bne.n	800137a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001372:	f043 0201 	orr.w	r2, r3, #1
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a1f      	ldr	r2, [pc, #124]	@ (80013fc <HAL_ADC_PollForConversion+0x1dc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d002      	beq.n	800138a <HAL_ADC_PollForConversion+0x16a>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	e001      	b.n	800138e <HAL_ADC_PollForConversion+0x16e>
 800138a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	4293      	cmp	r3, r2
 8001394:	d008      	beq.n	80013a8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	2b05      	cmp	r3, #5
 80013a0:	d002      	beq.n	80013a8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	2b09      	cmp	r3, #9
 80013a6:	d104      	bne.n	80013b2 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	e00d      	b.n	80013ce <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a11      	ldr	r2, [pc, #68]	@ (80013fc <HAL_ADC_PollForConversion+0x1dc>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d002      	beq.n	80013c2 <HAL_ADC_PollForConversion+0x1a2>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	e001      	b.n	80013c6 <HAL_ADC_PollForConversion+0x1a6>
 80013c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013c6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	2b08      	cmp	r3, #8
 80013d2:	d104      	bne.n	80013de <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2208      	movs	r2, #8
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	e008      	b.n	80013f0 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d103      	bne.n	80013f0 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	220c      	movs	r2, #12
 80013ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3720      	adds	r7, #32
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	50000100 	.word	0x50000100
 8001400:	50000300 	.word	0x50000300
 8001404:	50000700 	.word	0x50000700

08001408 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b0b6      	sub	sp, #216	@ 0xd8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800143e:	2b01      	cmp	r3, #1
 8001440:	d102      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x24>
 8001442:	2302      	movs	r3, #2
 8001444:	f000 bc04 	b.w	8001c50 <HAL_ADC_ConfigChannel+0x82c>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fbfd 	bl	8000c54 <LL_ADC_REG_IsConversionOngoing>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	f040 83e8 	bne.w	8001c32 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	6859      	ldr	r1, [r3, #4]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	f7ff fa95 	bl	800099e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fbeb 	bl	8000c54 <LL_ADC_REG_IsConversionOngoing>
 800147e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fc0b 	bl	8000ca2 <LL_ADC_INJ_IsConversionOngoing>
 800148c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001490:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001494:	2b00      	cmp	r3, #0
 8001496:	f040 81d9 	bne.w	800184c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800149a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 81d4 	bne.w	800184c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80014ac:	d10f      	bne.n	80014ce <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2200      	movs	r2, #0
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff fa9c 	bl	80009f6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fa43 	bl	8000952 <LL_ADC_SetSamplingTimeCommonConfig>
 80014cc:	e00e      	b.n	80014ec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	6819      	ldr	r1, [r3, #0]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	461a      	mov	r2, r3
 80014dc:	f7ff fa8b 	bl	80009f6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fa33 	bl	8000952 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	695a      	ldr	r2, [r3, #20]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	08db      	lsrs	r3, r3, #3
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	2b04      	cmp	r3, #4
 800150c:	d022      	beq.n	8001554 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	6919      	ldr	r1, [r3, #16]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800151e:	f7ff f98d 	bl	800083c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	6919      	ldr	r1, [r3, #16]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	461a      	mov	r2, r3
 8001530:	f7ff f9d9 	bl	80008e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001540:	2b01      	cmp	r3, #1
 8001542:	d102      	bne.n	800154a <HAL_ADC_ConfigChannel+0x126>
 8001544:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001548:	e000      	b.n	800154c <HAL_ADC_ConfigChannel+0x128>
 800154a:	2300      	movs	r3, #0
 800154c:	461a      	mov	r2, r3
 800154e:	f7ff f9e5 	bl	800091c <LL_ADC_SetOffsetSaturation>
 8001552:	e17b      	b.n	800184c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff f992 	bl	8000884 <LL_ADC_GetOffsetChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10a      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x15c>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff f987 	bl	8000884 <LL_ADC_GetOffsetChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	0e9b      	lsrs	r3, r3, #26
 800157a:	f003 021f 	and.w	r2, r3, #31
 800157e:	e01e      	b.n	80015be <HAL_ADC_ConfigChannel+0x19a>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff f97c 	bl	8000884 <LL_ADC_GetOffsetChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800159e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80015a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80015ae:	2320      	movs	r3, #32
 80015b0:	e004      	b.n	80015bc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80015b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80015b6:	fab3 f383 	clz	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d105      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x1b2>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	0e9b      	lsrs	r3, r3, #26
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	e018      	b.n	8001608 <HAL_ADC_ConfigChannel+0x1e4>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80015ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80015f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80015fa:	2320      	movs	r3, #32
 80015fc:	e004      	b.n	8001608 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80015fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001602:	fab3 f383 	clz	r3, r3
 8001606:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001608:	429a      	cmp	r2, r3
 800160a:	d106      	bne.n	800161a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2200      	movs	r2, #0
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff f94b 	bl	80008b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2101      	movs	r1, #1
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff f92f 	bl	8000884 <LL_ADC_GetOffsetChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10a      	bne.n	8001646 <HAL_ADC_ConfigChannel+0x222>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff f924 	bl	8000884 <LL_ADC_GetOffsetChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	0e9b      	lsrs	r3, r3, #26
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	e01e      	b.n	8001684 <HAL_ADC_ConfigChannel+0x260>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2101      	movs	r1, #1
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff f919 	bl	8000884 <LL_ADC_GetOffsetChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001658:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800165c:	fa93 f3a3 	rbit	r3, r3
 8001660:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001664:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001668:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800166c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001674:	2320      	movs	r3, #32
 8001676:	e004      	b.n	8001682 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001678:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800167c:	fab3 f383 	clz	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800168c:	2b00      	cmp	r3, #0
 800168e:	d105      	bne.n	800169c <HAL_ADC_ConfigChannel+0x278>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0e9b      	lsrs	r3, r3, #26
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	e018      	b.n	80016ce <HAL_ADC_ConfigChannel+0x2aa>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016a8:	fa93 f3a3 	rbit	r3, r3
 80016ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80016b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80016b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80016c0:	2320      	movs	r3, #32
 80016c2:	e004      	b.n	80016ce <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80016c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80016c8:	fab3 f383 	clz	r3, r3
 80016cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d106      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2200      	movs	r2, #0
 80016d8:	2101      	movs	r1, #1
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f8e8 	bl	80008b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff f8cc 	bl	8000884 <LL_ADC_GetOffsetChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10a      	bne.n	800170c <HAL_ADC_ConfigChannel+0x2e8>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2102      	movs	r1, #2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff f8c1 	bl	8000884 <LL_ADC_GetOffsetChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	0e9b      	lsrs	r3, r3, #26
 8001706:	f003 021f 	and.w	r2, r3, #31
 800170a:	e01e      	b.n	800174a <HAL_ADC_ConfigChannel+0x326>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2102      	movs	r1, #2
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f8b6 	bl	8000884 <LL_ADC_GetOffsetChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800172a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800172e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001732:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800173a:	2320      	movs	r3, #32
 800173c:	e004      	b.n	8001748 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800173e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001742:	fab3 f383 	clz	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001752:	2b00      	cmp	r3, #0
 8001754:	d105      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x33e>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	0e9b      	lsrs	r3, r3, #26
 800175c:	f003 031f 	and.w	r3, r3, #31
 8001760:	e016      	b.n	8001790 <HAL_ADC_ConfigChannel+0x36c>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800176e:	fa93 f3a3 	rbit	r3, r3
 8001772:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001774:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001776:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800177a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001782:	2320      	movs	r3, #32
 8001784:	e004      	b.n	8001790 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001786:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800178a:	fab3 f383 	clz	r3, r3
 800178e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001790:	429a      	cmp	r2, r3
 8001792:	d106      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2200      	movs	r2, #0
 800179a:	2102      	movs	r1, #2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff f887 	bl	80008b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2103      	movs	r1, #3
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff f86b 	bl	8000884 <LL_ADC_GetOffsetChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10a      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x3aa>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2103      	movs	r1, #3
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff f860 	bl	8000884 <LL_ADC_GetOffsetChannel>
 80017c4:	4603      	mov	r3, r0
 80017c6:	0e9b      	lsrs	r3, r3, #26
 80017c8:	f003 021f 	and.w	r2, r3, #31
 80017cc:	e017      	b.n	80017fe <HAL_ADC_ConfigChannel+0x3da>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2103      	movs	r1, #3
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff f855 	bl	8000884 <LL_ADC_GetOffsetChannel>
 80017da:	4603      	mov	r3, r0
 80017dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80017e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80017ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80017f0:	2320      	movs	r3, #32
 80017f2:	e003      	b.n	80017fc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80017f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80017f6:	fab3 f383 	clz	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001806:	2b00      	cmp	r3, #0
 8001808:	d105      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x3f2>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	0e9b      	lsrs	r3, r3, #26
 8001810:	f003 031f 	and.w	r3, r3, #31
 8001814:	e011      	b.n	800183a <HAL_ADC_ConfigChannel+0x416>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800181e:	fa93 f3a3 	rbit	r3, r3
 8001822:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001826:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001828:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800182e:	2320      	movs	r3, #32
 8001830:	e003      	b.n	800183a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800183a:	429a      	cmp	r2, r3
 800183c:	d106      	bne.n	800184c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2200      	movs	r2, #0
 8001844:	2103      	movs	r1, #3
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff f832 	bl	80008b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff f9b1 	bl	8000bb8 <LL_ADC_IsEnabled>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	f040 813d 	bne.w	8001ad8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	461a      	mov	r2, r3
 800186c:	f7ff f8ee 	bl	8000a4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4aa2      	ldr	r2, [pc, #648]	@ (8001b00 <HAL_ADC_ConfigChannel+0x6dc>)
 8001876:	4293      	cmp	r3, r2
 8001878:	f040 812e 	bne.w	8001ad8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10b      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x480>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0e9b      	lsrs	r3, r3, #26
 8001892:	3301      	adds	r3, #1
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	2b09      	cmp	r3, #9
 800189a:	bf94      	ite	ls
 800189c:	2301      	movls	r3, #1
 800189e:	2300      	movhi	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	e019      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x4b4>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018ac:	fa93 f3a3 	rbit	r3, r3
 80018b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80018b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018b4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80018b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80018bc:	2320      	movs	r3, #32
 80018be:	e003      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80018c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018c2:	fab3 f383 	clz	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	3301      	adds	r3, #1
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	2b09      	cmp	r3, #9
 80018d0:	bf94      	ite	ls
 80018d2:	2301      	movls	r3, #1
 80018d4:	2300      	movhi	r3, #0
 80018d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d079      	beq.n	80019d0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d107      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x4d4>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0e9b      	lsrs	r3, r3, #26
 80018ee:	3301      	adds	r3, #1
 80018f0:	069b      	lsls	r3, r3, #26
 80018f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018f6:	e015      	b.n	8001924 <HAL_ADC_ConfigChannel+0x500>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001908:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800190a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001910:	2320      	movs	r3, #32
 8001912:	e003      	b.n	800191c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	3301      	adds	r3, #1
 800191e:	069b      	lsls	r3, r3, #26
 8001920:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800192c:	2b00      	cmp	r3, #0
 800192e:	d109      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x520>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	0e9b      	lsrs	r3, r3, #26
 8001936:	3301      	adds	r3, #1
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	2101      	movs	r1, #1
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	e017      	b.n	8001974 <HAL_ADC_ConfigChannel+0x550>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001954:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001956:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800195c:	2320      	movs	r3, #32
 800195e:	e003      	b.n	8001968 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001962:	fab3 f383 	clz	r3, r3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	3301      	adds	r3, #1
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2101      	movs	r1, #1
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	ea42 0103 	orr.w	r1, r2, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10a      	bne.n	800199a <HAL_ADC_ConfigChannel+0x576>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	0e9b      	lsrs	r3, r3, #26
 800198a:	3301      	adds	r3, #1
 800198c:	f003 021f 	and.w	r2, r3, #31
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	051b      	lsls	r3, r3, #20
 8001998:	e018      	b.n	80019cc <HAL_ADC_ConfigChannel+0x5a8>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019a2:	fa93 f3a3 	rbit	r3, r3
 80019a6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80019a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80019ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80019b2:	2320      	movs	r3, #32
 80019b4:	e003      	b.n	80019be <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80019b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019b8:	fab3 f383 	clz	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	3301      	adds	r3, #1
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019cc:	430b      	orrs	r3, r1
 80019ce:	e07e      	b.n	8001ace <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d107      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x5c8>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0e9b      	lsrs	r3, r3, #26
 80019e2:	3301      	adds	r3, #1
 80019e4:	069b      	lsls	r3, r3, #26
 80019e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019ea:	e015      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x5f4>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80019fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019fc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80019fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001a04:	2320      	movs	r3, #32
 8001a06:	e003      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	069b      	lsls	r3, r3, #26
 8001a14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d109      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x614>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	0e9b      	lsrs	r3, r3, #26
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	2101      	movs	r1, #1
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	e017      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x644>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	61fb      	str	r3, [r7, #28]
  return result;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001a50:	2320      	movs	r3, #32
 8001a52:	e003      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	f003 031f 	and.w	r3, r3, #31
 8001a62:	2101      	movs	r1, #1
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	ea42 0103 	orr.w	r1, r2, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10d      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x670>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0e9b      	lsrs	r3, r3, #26
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	3b1e      	subs	r3, #30
 8001a8c:	051b      	lsls	r3, r3, #20
 8001a8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a92:	e01b      	b.n	8001acc <HAL_ADC_ConfigChannel+0x6a8>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	613b      	str	r3, [r7, #16]
  return result;
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001aac:	2320      	movs	r3, #32
 8001aae:	e003      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f003 021f 	and.w	r2, r3, #31
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3b1e      	subs	r3, #30
 8001ac6:	051b      	lsls	r3, r3, #20
 8001ac8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001acc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7fe ff8f 	bl	80009f6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <HAL_ADC_ConfigChannel+0x6e0>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80af 	beq.w	8001c44 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001aee:	d004      	beq.n	8001afa <HAL_ADC_ConfigChannel+0x6d6>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a04      	ldr	r2, [pc, #16]	@ (8001b08 <HAL_ADC_ConfigChannel+0x6e4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d10a      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x6ec>
 8001afa:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <HAL_ADC_ConfigChannel+0x6e8>)
 8001afc:	e009      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x6ee>
 8001afe:	bf00      	nop
 8001b00:	407f0000 	.word	0x407f0000
 8001b04:	80080000 	.word	0x80080000
 8001b08:	50000100 	.word	0x50000100
 8001b0c:	50000300 	.word	0x50000300
 8001b10:	4b51      	ldr	r3, [pc, #324]	@ (8001c58 <HAL_ADC_ConfigChannel+0x834>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fe84 	bl	8000820 <LL_ADC_GetCommonPathInternalCh>
 8001b18:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a4e      	ldr	r2, [pc, #312]	@ (8001c5c <HAL_ADC_ConfigChannel+0x838>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d004      	beq.n	8001b30 <HAL_ADC_ConfigChannel+0x70c>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a4d      	ldr	r2, [pc, #308]	@ (8001c60 <HAL_ADC_ConfigChannel+0x83c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d134      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d12e      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b44:	d17e      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b4e:	d004      	beq.n	8001b5a <HAL_ADC_ConfigChannel+0x736>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a43      	ldr	r2, [pc, #268]	@ (8001c64 <HAL_ADC_ConfigChannel+0x840>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x73a>
 8001b5a:	4a43      	ldr	r2, [pc, #268]	@ (8001c68 <HAL_ADC_ConfigChannel+0x844>)
 8001b5c:	e000      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x73c>
 8001b5e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c58 <HAL_ADC_ConfigChannel+0x834>)
 8001b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	f7fe fe45 	bl	80007fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b70:	4b3e      	ldr	r3, [pc, #248]	@ (8001c6c <HAL_ADC_ConfigChannel+0x848>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	099b      	lsrs	r3, r3, #6
 8001b76:	4a3e      	ldr	r2, [pc, #248]	@ (8001c70 <HAL_ADC_ConfigChannel+0x84c>)
 8001b78:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b8a:	e002      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f9      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b98:	e054      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a35      	ldr	r2, [pc, #212]	@ (8001c74 <HAL_ADC_ConfigChannel+0x850>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d120      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ba4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ba8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d11a      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bb8:	d144      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bc2:	d004      	beq.n	8001bce <HAL_ADC_ConfigChannel+0x7aa>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a26      	ldr	r2, [pc, #152]	@ (8001c64 <HAL_ADC_ConfigChannel+0x840>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x7ae>
 8001bce:	4a26      	ldr	r2, [pc, #152]	@ (8001c68 <HAL_ADC_ConfigChannel+0x844>)
 8001bd0:	e000      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x7b0>
 8001bd2:	4a21      	ldr	r2, [pc, #132]	@ (8001c58 <HAL_ADC_ConfigChannel+0x834>)
 8001bd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4610      	mov	r0, r2
 8001be0:	f7fe fe0b 	bl	80007fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001be4:	e02e      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a23      	ldr	r2, [pc, #140]	@ (8001c78 <HAL_ADC_ConfigChannel+0x854>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d129      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d123      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a18      	ldr	r2, [pc, #96]	@ (8001c64 <HAL_ADC_ConfigChannel+0x840>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01e      	beq.n	8001c44 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c0e:	d004      	beq.n	8001c1a <HAL_ADC_ConfigChannel+0x7f6>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a13      	ldr	r2, [pc, #76]	@ (8001c64 <HAL_ADC_ConfigChannel+0x840>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d101      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x7fa>
 8001c1a:	4a13      	ldr	r2, [pc, #76]	@ (8001c68 <HAL_ADC_ConfigChannel+0x844>)
 8001c1c:	e000      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x7fc>
 8001c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c58 <HAL_ADC_ConfigChannel+0x834>)
 8001c20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f7fe fde5 	bl	80007fa <LL_ADC_SetCommonPathInternalCh>
 8001c30:	e008      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c36:	f043 0220 	orr.w	r2, r3, #32
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001c4c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	37d8      	adds	r7, #216	@ 0xd8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	50000700 	.word	0x50000700
 8001c5c:	c3210000 	.word	0xc3210000
 8001c60:	90c00010 	.word	0x90c00010
 8001c64:	50000100 	.word	0x50000100
 8001c68:	50000300 	.word	0x50000300
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	053e2d63 	.word	0x053e2d63
 8001c74:	c7520000 	.word	0xc7520000
 8001c78:	cb840000 	.word	0xcb840000

08001c7c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe ffde 	bl	8000c54 <LL_ADC_REG_IsConversionOngoing>
 8001c98:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe ffff 	bl	8000ca2 <LL_ADC_INJ_IsConversionOngoing>
 8001ca4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d103      	bne.n	8001cb4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8098 	beq.w	8001de4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d02a      	beq.n	8001d18 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7f5b      	ldrb	r3, [r3, #29]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d126      	bne.n	8001d18 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7f1b      	ldrb	r3, [r3, #28]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d122      	bne.n	8001d18 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001cd6:	e014      	b.n	8001d02 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	4a45      	ldr	r2, [pc, #276]	@ (8001df0 <ADC_ConversionStop+0x174>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d90d      	bls.n	8001cfc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce4:	f043 0210 	orr.w	r2, r3, #16
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cf0:	f043 0201 	orr.w	r2, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e074      	b.n	8001de6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0c:	2b40      	cmp	r3, #64	@ 0x40
 8001d0e:	d1e3      	bne.n	8001cd8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2240      	movs	r2, #64	@ 0x40
 8001d16:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d014      	beq.n	8001d48 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe ff96 	bl	8000c54 <LL_ADC_REG_IsConversionOngoing>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00c      	beq.n	8001d48 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe ff53 	bl	8000bde <LL_ADC_IsDisableOngoing>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d104      	bne.n	8001d48 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe ff72 	bl	8000c2c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d014      	beq.n	8001d78 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe ffa5 	bl	8000ca2 <LL_ADC_INJ_IsConversionOngoing>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00c      	beq.n	8001d78 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe ff3b 	bl	8000bde <LL_ADC_IsDisableOngoing>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d104      	bne.n	8001d78 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe ff81 	bl	8000c7a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d005      	beq.n	8001d8a <ADC_ConversionStop+0x10e>
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d105      	bne.n	8001d90 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001d84:	230c      	movs	r3, #12
 8001d86:	617b      	str	r3, [r7, #20]
        break;
 8001d88:	e005      	b.n	8001d96 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001d8a:	2308      	movs	r3, #8
 8001d8c:	617b      	str	r3, [r7, #20]
        break;
 8001d8e:	e002      	b.n	8001d96 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001d90:	2304      	movs	r3, #4
 8001d92:	617b      	str	r3, [r7, #20]
        break;
 8001d94:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001d96:	f7fe fd11 	bl	80007bc <HAL_GetTick>
 8001d9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001d9c:	e01b      	b.n	8001dd6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d9e:	f7fe fd0d 	bl	80007bc <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b05      	cmp	r3, #5
 8001daa:	d914      	bls.n	8001dd6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00d      	beq.n	8001dd6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbe:	f043 0210 	orr.w	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e007      	b.n	8001de6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1dc      	bne.n	8001d9e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	a33fffff 	.word	0xa33fffff

08001df4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fed7 	bl	8000bb8 <LL_ADC_IsEnabled>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d176      	bne.n	8001efe <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	4b3c      	ldr	r3, [pc, #240]	@ (8001f08 <ADC_Enable+0x114>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00d      	beq.n	8001e3a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e22:	f043 0210 	orr.w	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2e:	f043 0201 	orr.w	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e062      	b.n	8001f00 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fe92 	bl	8000b68 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e4c:	d004      	beq.n	8001e58 <ADC_Enable+0x64>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a2e      	ldr	r2, [pc, #184]	@ (8001f0c <ADC_Enable+0x118>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d101      	bne.n	8001e5c <ADC_Enable+0x68>
 8001e58:	4b2d      	ldr	r3, [pc, #180]	@ (8001f10 <ADC_Enable+0x11c>)
 8001e5a:	e000      	b.n	8001e5e <ADC_Enable+0x6a>
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f14 <ADC_Enable+0x120>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fcde 	bl	8000820 <LL_ADC_GetCommonPathInternalCh>
 8001e64:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001e66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d013      	beq.n	8001e96 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f18 <ADC_Enable+0x124>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	099b      	lsrs	r3, r3, #6
 8001e74:	4a29      	ldr	r2, [pc, #164]	@ (8001f1c <ADC_Enable+0x128>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	099b      	lsrs	r3, r3, #6
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e88:	e002      	b.n	8001e90 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f9      	bne.n	8001e8a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e96:	f7fe fc91 	bl	80007bc <HAL_GetTick>
 8001e9a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e9c:	e028      	b.n	8001ef0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fe88 	bl	8000bb8 <LL_ADC_IsEnabled>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d104      	bne.n	8001eb8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fe58 	bl	8000b68 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001eb8:	f7fe fc80 	bl	80007bc <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d914      	bls.n	8001ef0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d00d      	beq.n	8001ef0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed8:	f043 0210 	orr.w	r2, r3, #16
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee4:	f043 0201 	orr.w	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e007      	b.n	8001f00 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d1cf      	bne.n	8001e9e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	8000003f 	.word	0x8000003f
 8001f0c:	50000100 	.word	0x50000100
 8001f10:	50000300 	.word	0x50000300
 8001f14:	50000700 	.word	0x50000700
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	053e2d63 	.word	0x053e2d63

08001f20 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fe56 	bl	8000bde <LL_ADC_IsDisableOngoing>
 8001f32:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fe3d 	bl	8000bb8 <LL_ADC_IsEnabled>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d047      	beq.n	8001fd4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d144      	bne.n	8001fd4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 030d 	and.w	r3, r3, #13
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10c      	bne.n	8001f72 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fe17 	bl	8000b90 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2203      	movs	r2, #3
 8001f68:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f6a:	f7fe fc27 	bl	80007bc <HAL_GetTick>
 8001f6e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f70:	e029      	b.n	8001fc6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f76:	f043 0210 	orr.w	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f82:	f043 0201 	orr.w	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e023      	b.n	8001fd6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f8e:	f7fe fc15 	bl	80007bc <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d914      	bls.n	8001fc6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00d      	beq.n	8001fc6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fae:	f043 0210 	orr.w	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fba:	f043 0201 	orr.w	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e007      	b.n	8001fd6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1dc      	bne.n	8001f8e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <LL_ADC_IsEnabled>:
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <LL_ADC_IsEnabled+0x18>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <LL_ADC_IsEnabled+0x1a>
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_REG_IsConversionOngoing>:
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b04      	cmp	r3, #4
 8002016:	d101      	bne.n	800201c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b0a1      	sub	sp, #132	@ 0x84
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002046:	2302      	movs	r3, #2
 8002048:	e0cb      	b.n	80021e2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002052:	2300      	movs	r3, #0
 8002054:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002056:	2300      	movs	r3, #0
 8002058:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002062:	d102      	bne.n	800206a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002064:	4b61      	ldr	r3, [pc, #388]	@ (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	e001      	b.n	800206e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10b      	bne.n	800208c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0aa      	b.n	80021e2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ffb8 	bl	8002004 <LL_ADC_REG_IsConversionOngoing>
 8002094:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ffb2 	bl	8002004 <LL_ADC_REG_IsConversionOngoing>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 808c 	bne.w	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80020a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 8088 	bne.w	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020b8:	d004      	beq.n	80020c4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a4b      	ldr	r2, [pc, #300]	@ (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d101      	bne.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80020c4:	4b4a      	ldr	r3, [pc, #296]	@ (80021f0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 80020c6:	e000      	b.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80020c8:	4b4a      	ldr	r3, [pc, #296]	@ (80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80020ca:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d041      	beq.n	8002158 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80020d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6859      	ldr	r1, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020e6:	035b      	lsls	r3, r3, #13
 80020e8:	430b      	orrs	r3, r1
 80020ea:	431a      	orrs	r2, r3
 80020ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020f8:	d004      	beq.n	8002104 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a3b      	ldr	r2, [pc, #236]	@ (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d10f      	bne.n	8002124 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8002104:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002108:	f7ff ff69 	bl	8001fde <LL_ADC_IsEnabled>
 800210c:	4604      	mov	r4, r0
 800210e:	4837      	ldr	r0, [pc, #220]	@ (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002110:	f7ff ff65 	bl	8001fde <LL_ADC_IsEnabled>
 8002114:	4603      	mov	r3, r0
 8002116:	4323      	orrs	r3, r4
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	e008      	b.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8002124:	4834      	ldr	r0, [pc, #208]	@ (80021f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002126:	f7ff ff5a 	bl	8001fde <LL_ADC_IsEnabled>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d04c      	beq.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800213a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002142:	f023 030f 	bic.w	r3, r3, #15
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	6811      	ldr	r1, [r2, #0]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	6892      	ldr	r2, [r2, #8]
 800214e:	430a      	orrs	r2, r1
 8002150:	431a      	orrs	r2, r3
 8002152:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002154:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002156:	e03d      	b.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002158:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002160:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002162:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800216c:	d004      	beq.n	8002178 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a1e      	ldr	r2, [pc, #120]	@ (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d10f      	bne.n	8002198 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8002178:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800217c:	f7ff ff2f 	bl	8001fde <LL_ADC_IsEnabled>
 8002180:	4604      	mov	r4, r0
 8002182:	481a      	ldr	r0, [pc, #104]	@ (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002184:	f7ff ff2b 	bl	8001fde <LL_ADC_IsEnabled>
 8002188:	4603      	mov	r3, r0
 800218a:	4323      	orrs	r3, r4
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	e008      	b.n	80021aa <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8002198:	4817      	ldr	r0, [pc, #92]	@ (80021f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800219a:	f7ff ff20 	bl	8001fde <LL_ADC_IsEnabled>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf0c      	ite	eq
 80021a4:	2301      	moveq	r3, #1
 80021a6:	2300      	movne	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d012      	beq.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80021b6:	f023 030f 	bic.w	r3, r3, #15
 80021ba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80021bc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021be:	e009      	b.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c4:	f043 0220 	orr.w	r2, r3, #32
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80021d2:	e000      	b.n	80021d6 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80021de:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3784      	adds	r7, #132	@ 0x84
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd90      	pop	{r4, r7, pc}
 80021ea:	bf00      	nop
 80021ec:	50000100 	.word	0x50000100
 80021f0:	50000300 	.word	0x50000300
 80021f4:	50000700 	.word	0x50000700
 80021f8:	50000400 	.word	0x50000400

080021fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800220c:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002218:	4013      	ands	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002224:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800222c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222e:	4a04      	ldr	r2, [pc, #16]	@ (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	60d3      	str	r3, [r2, #12]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002248:	4b04      	ldr	r3, [pc, #16]	@ (800225c <__NVIC_GetPriorityGrouping+0x18>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	f003 0307 	and.w	r3, r3, #7
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db0a      	blt.n	800228a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	490c      	ldr	r1, [pc, #48]	@ (80022ac <__NVIC_SetPriority+0x4c>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	440b      	add	r3, r1
 8002284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002288:	e00a      	b.n	80022a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4908      	ldr	r1, [pc, #32]	@ (80022b0 <__NVIC_SetPriority+0x50>)
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	3b04      	subs	r3, #4
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	440b      	add	r3, r1
 800229e:	761a      	strb	r2, [r3, #24]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000e100 	.word	0xe000e100
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	@ 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f1c3 0307 	rsb	r3, r3, #7
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	bf28      	it	cs
 80022d2:	2304      	movcs	r3, #4
 80022d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3304      	adds	r3, #4
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d902      	bls.n	80022e4 <NVIC_EncodePriority+0x30>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3b03      	subs	r3, #3
 80022e2:	e000      	b.n	80022e6 <NVIC_EncodePriority+0x32>
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	401a      	ands	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43d9      	mvns	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	4313      	orrs	r3, r2
         );
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	@ 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800232c:	d301      	bcc.n	8002332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232e:	2301      	movs	r3, #1
 8002330:	e00f      	b.n	8002352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002332:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <SysTick_Config+0x40>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233a:	210f      	movs	r1, #15
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	f7ff ff8e 	bl	8002260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002344:	4b05      	ldr	r3, [pc, #20]	@ (800235c <SysTick_Config+0x40>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234a:	4b04      	ldr	r3, [pc, #16]	@ (800235c <SysTick_Config+0x40>)
 800234c:	2207      	movs	r2, #7
 800234e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	e000e010 	.word	0xe000e010

08002360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff47 	bl	80021fc <__NVIC_SetPriorityGrouping>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002384:	f7ff ff5e 	bl	8002244 <__NVIC_GetPriorityGrouping>
 8002388:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	6978      	ldr	r0, [r7, #20]
 8002390:	f7ff ff90 	bl	80022b4 <NVIC_EncodePriority>
 8002394:	4602      	mov	r2, r0
 8002396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff5f 	bl	8002260 <__NVIC_SetPriority>
}
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffb2 	bl	800231c <SysTick_Config>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023d2:	e15a      	b.n	800268a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2101      	movs	r1, #1
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	4013      	ands	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 814c 	beq.w	8002684 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d005      	beq.n	8002404 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002400:	2b02      	cmp	r3, #2
 8002402:	d130      	bne.n	8002466 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800243a:	2201      	movs	r2, #1
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	f003 0201 	and.w	r2, r3, #1
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b03      	cmp	r3, #3
 8002470:	d017      	beq.n	80024a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2203      	movs	r2, #3
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d123      	bne.n	80024f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	08da      	lsrs	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3208      	adds	r2, #8
 80024b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	220f      	movs	r2, #15
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	08da      	lsrs	r2, r3, #3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3208      	adds	r2, #8
 80024f0:	6939      	ldr	r1, [r7, #16]
 80024f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0203 	and.w	r2, r3, #3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80a6 	beq.w	8002684 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002538:	4b5b      	ldr	r3, [pc, #364]	@ (80026a8 <HAL_GPIO_Init+0x2e4>)
 800253a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800253c:	4a5a      	ldr	r2, [pc, #360]	@ (80026a8 <HAL_GPIO_Init+0x2e4>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6613      	str	r3, [r2, #96]	@ 0x60
 8002544:	4b58      	ldr	r3, [pc, #352]	@ (80026a8 <HAL_GPIO_Init+0x2e4>)
 8002546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002550:	4a56      	ldr	r2, [pc, #344]	@ (80026ac <HAL_GPIO_Init+0x2e8>)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	089b      	lsrs	r3, r3, #2
 8002556:	3302      	adds	r3, #2
 8002558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	220f      	movs	r2, #15
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800257a:	d01f      	beq.n	80025bc <HAL_GPIO_Init+0x1f8>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a4c      	ldr	r2, [pc, #304]	@ (80026b0 <HAL_GPIO_Init+0x2ec>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d019      	beq.n	80025b8 <HAL_GPIO_Init+0x1f4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a4b      	ldr	r2, [pc, #300]	@ (80026b4 <HAL_GPIO_Init+0x2f0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d013      	beq.n	80025b4 <HAL_GPIO_Init+0x1f0>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a4a      	ldr	r2, [pc, #296]	@ (80026b8 <HAL_GPIO_Init+0x2f4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00d      	beq.n	80025b0 <HAL_GPIO_Init+0x1ec>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a49      	ldr	r2, [pc, #292]	@ (80026bc <HAL_GPIO_Init+0x2f8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d007      	beq.n	80025ac <HAL_GPIO_Init+0x1e8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a48      	ldr	r2, [pc, #288]	@ (80026c0 <HAL_GPIO_Init+0x2fc>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d101      	bne.n	80025a8 <HAL_GPIO_Init+0x1e4>
 80025a4:	2305      	movs	r3, #5
 80025a6:	e00a      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025a8:	2306      	movs	r3, #6
 80025aa:	e008      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025ac:	2304      	movs	r3, #4
 80025ae:	e006      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025b0:	2303      	movs	r3, #3
 80025b2:	e004      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e002      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <HAL_GPIO_Init+0x1fa>
 80025bc:	2300      	movs	r3, #0
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	f002 0203 	and.w	r2, r2, #3
 80025c4:	0092      	lsls	r2, r2, #2
 80025c6:	4093      	lsls	r3, r2
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ce:	4937      	ldr	r1, [pc, #220]	@ (80026ac <HAL_GPIO_Init+0x2e8>)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	3302      	adds	r3, #2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025dc:	4b39      	ldr	r3, [pc, #228]	@ (80026c4 <HAL_GPIO_Init+0x300>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002600:	4a30      	ldr	r2, [pc, #192]	@ (80026c4 <HAL_GPIO_Init+0x300>)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002606:	4b2f      	ldr	r3, [pc, #188]	@ (80026c4 <HAL_GPIO_Init+0x300>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	43db      	mvns	r3, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800262a:	4a26      	ldr	r2, [pc, #152]	@ (80026c4 <HAL_GPIO_Init+0x300>)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002630:	4b24      	ldr	r3, [pc, #144]	@ (80026c4 <HAL_GPIO_Init+0x300>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	43db      	mvns	r3, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002654:	4a1b      	ldr	r2, [pc, #108]	@ (80026c4 <HAL_GPIO_Init+0x300>)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800265a:	4b1a      	ldr	r3, [pc, #104]	@ (80026c4 <HAL_GPIO_Init+0x300>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800267e:	4a11      	ldr	r2, [pc, #68]	@ (80026c4 <HAL_GPIO_Init+0x300>)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3301      	adds	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	f47f ae9d 	bne.w	80023d4 <HAL_GPIO_Init+0x10>
  }
}
 800269a:	bf00      	nop
 800269c:	bf00      	nop
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40010000 	.word	0x40010000
 80026b0:	48000400 	.word	0x48000400
 80026b4:	48000800 	.word	0x48000800
 80026b8:	48000c00 	.word	0x48000c00
 80026bc:	48001000 	.word	0x48001000
 80026c0:	48001400 	.word	0x48001400
 80026c4:	40010400 	.word	0x40010400

080026c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d141      	bne.n	800275a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026d6:	4b4b      	ldr	r3, [pc, #300]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026e2:	d131      	bne.n	8002748 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026e4:	4b47      	ldr	r3, [pc, #284]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026ea:	4a46      	ldr	r2, [pc, #280]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f4:	4b43      	ldr	r3, [pc, #268]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026fc:	4a41      	ldr	r2, [pc, #260]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002702:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002704:	4b40      	ldr	r3, [pc, #256]	@ (8002808 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2232      	movs	r2, #50	@ 0x32
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	4a3f      	ldr	r2, [pc, #252]	@ (800280c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	0c9b      	lsrs	r3, r3, #18
 8002716:	3301      	adds	r3, #1
 8002718:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800271a:	e002      	b.n	8002722 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3b01      	subs	r3, #1
 8002720:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002722:	4b38      	ldr	r3, [pc, #224]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800272e:	d102      	bne.n	8002736 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f2      	bne.n	800271c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002736:	4b33      	ldr	r3, [pc, #204]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800273e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002742:	d158      	bne.n	80027f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e057      	b.n	80027f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002748:	4b2e      	ldr	r3, [pc, #184]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800274e:	4a2d      	ldr	r2, [pc, #180]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002754:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002758:	e04d      	b.n	80027f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002760:	d141      	bne.n	80027e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002762:	4b28      	ldr	r3, [pc, #160]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800276a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800276e:	d131      	bne.n	80027d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002770:	4b24      	ldr	r3, [pc, #144]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002776:	4a23      	ldr	r2, [pc, #140]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800277c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002780:	4b20      	ldr	r3, [pc, #128]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002788:	4a1e      	ldr	r2, [pc, #120]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800278e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002790:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2232      	movs	r2, #50	@ 0x32
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	4a1c      	ldr	r2, [pc, #112]	@ (800280c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800279c:	fba2 2303 	umull	r2, r3, r2, r3
 80027a0:	0c9b      	lsrs	r3, r3, #18
 80027a2:	3301      	adds	r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a6:	e002      	b.n	80027ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ae:	4b15      	ldr	r3, [pc, #84]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ba:	d102      	bne.n	80027c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f2      	bne.n	80027a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027c2:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ce:	d112      	bne.n	80027f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e011      	b.n	80027f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027da:	4a0a      	ldr	r2, [pc, #40]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80027e4:	e007      	b.n	80027f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027e6:	4b07      	ldr	r3, [pc, #28]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027ee:	4a05      	ldr	r2, [pc, #20]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	40007000 	.word	0x40007000
 8002808:	20000000 	.word	0x20000000
 800280c:	431bde83 	.word	0x431bde83

08002810 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002814:	4b05      	ldr	r3, [pc, #20]	@ (800282c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	4a04      	ldr	r2, [pc, #16]	@ (800282c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800281a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800281e:	6093      	str	r3, [r2, #8]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40007000 	.word	0x40007000

08002830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e2fe      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d075      	beq.n	800293a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800284e:	4b97      	ldr	r3, [pc, #604]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002858:	4b94      	ldr	r3, [pc, #592]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	2b0c      	cmp	r3, #12
 8002866:	d102      	bne.n	800286e <HAL_RCC_OscConfig+0x3e>
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d002      	beq.n	8002874 <HAL_RCC_OscConfig+0x44>
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d10b      	bne.n	800288c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	4b8d      	ldr	r3, [pc, #564]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d05b      	beq.n	8002938 <HAL_RCC_OscConfig+0x108>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d157      	bne.n	8002938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e2d9      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002894:	d106      	bne.n	80028a4 <HAL_RCC_OscConfig+0x74>
 8002896:	4b85      	ldr	r3, [pc, #532]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a84      	ldr	r2, [pc, #528]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e01d      	b.n	80028e0 <HAL_RCC_OscConfig+0xb0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x98>
 80028ae:	4b7f      	ldr	r3, [pc, #508]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a7e      	ldr	r2, [pc, #504]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 80028b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4b7c      	ldr	r3, [pc, #496]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7b      	ldr	r2, [pc, #492]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e00b      	b.n	80028e0 <HAL_RCC_OscConfig+0xb0>
 80028c8:	4b78      	ldr	r3, [pc, #480]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a77      	ldr	r2, [pc, #476]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 80028ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b75      	ldr	r3, [pc, #468]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a74      	ldr	r2, [pc, #464]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 80028da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d013      	beq.n	8002910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fd ff68 	bl	80007bc <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f0:	f7fd ff64 	bl	80007bc <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	@ 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e29e      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002902:	4b6a      	ldr	r3, [pc, #424]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0xc0>
 800290e:	e014      	b.n	800293a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fd ff54 	bl	80007bc <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002918:	f7fd ff50 	bl	80007bc <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	@ 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e28a      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800292a:	4b60      	ldr	r3, [pc, #384]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0xe8>
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d075      	beq.n	8002a32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002946:	4b59      	ldr	r3, [pc, #356]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002950:	4b56      	ldr	r3, [pc, #344]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2b0c      	cmp	r3, #12
 800295e:	d102      	bne.n	8002966 <HAL_RCC_OscConfig+0x136>
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d002      	beq.n	800296c <HAL_RCC_OscConfig+0x13c>
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2b04      	cmp	r3, #4
 800296a:	d11f      	bne.n	80029ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800296c:	4b4f      	ldr	r3, [pc, #316]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_OscConfig+0x154>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e25d      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002984:	4b49      	ldr	r3, [pc, #292]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	4946      	ldr	r1, [pc, #280]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002998:	4b45      	ldr	r3, [pc, #276]	@ (8002ab0 <HAL_RCC_OscConfig+0x280>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fec1 	bl	8000724 <HAL_InitTick>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d043      	beq.n	8002a30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e249      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d023      	beq.n	80029fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b4:	4b3d      	ldr	r3, [pc, #244]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a3c      	ldr	r2, [pc, #240]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fd fefc 	bl	80007bc <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c8:	f7fd fef8 	bl	80007bc <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e232      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029da:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e6:	4b31      	ldr	r3, [pc, #196]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	061b      	lsls	r3, r3, #24
 80029f4:	492d      	ldr	r1, [pc, #180]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
 80029fa:	e01a      	b.n	8002a32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fc:	4b2b      	ldr	r3, [pc, #172]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2a      	ldr	r2, [pc, #168]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002a02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fd fed8 	bl	80007bc <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a10:	f7fd fed4 	bl	80007bc <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e20e      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a22:	4b22      	ldr	r3, [pc, #136]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x1e0>
 8002a2e:	e000      	b.n	8002a32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d041      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d01c      	beq.n	8002a80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a46:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a4c:	4a17      	ldr	r2, [pc, #92]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a56:	f7fd feb1 	bl	80007bc <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5e:	f7fd fead 	bl	80007bc <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e1e7      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a70:	4b0e      	ldr	r3, [pc, #56]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0ef      	beq.n	8002a5e <HAL_RCC_OscConfig+0x22e>
 8002a7e:	e020      	b.n	8002ac2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a80:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a86:	4a09      	ldr	r2, [pc, #36]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7fd fe94 	bl	80007bc <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a96:	e00d      	b.n	8002ab4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a98:	f7fd fe90 	bl	80007bc <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d906      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e1ca      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ab4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1ea      	bne.n	8002a98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80a6 	beq.w	8002c1c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ad4:	4b84      	ldr	r3, [pc, #528]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x2b4>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_RCC_OscConfig+0x2b6>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aee:	4a7e      	ldr	r2, [pc, #504]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002af6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b02:	2301      	movs	r3, #1
 8002b04:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b06:	4b79      	ldr	r3, [pc, #484]	@ (8002cec <HAL_RCC_OscConfig+0x4bc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d118      	bne.n	8002b44 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b12:	4b76      	ldr	r3, [pc, #472]	@ (8002cec <HAL_RCC_OscConfig+0x4bc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a75      	ldr	r2, [pc, #468]	@ (8002cec <HAL_RCC_OscConfig+0x4bc>)
 8002b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b1e:	f7fd fe4d 	bl	80007bc <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b26:	f7fd fe49 	bl	80007bc <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e183      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b38:	4b6c      	ldr	r3, [pc, #432]	@ (8002cec <HAL_RCC_OscConfig+0x4bc>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d108      	bne.n	8002b5e <HAL_RCC_OscConfig+0x32e>
 8002b4c:	4b66      	ldr	r3, [pc, #408]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b52:	4a65      	ldr	r2, [pc, #404]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b5c:	e024      	b.n	8002ba8 <HAL_RCC_OscConfig+0x378>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b05      	cmp	r3, #5
 8002b64:	d110      	bne.n	8002b88 <HAL_RCC_OscConfig+0x358>
 8002b66:	4b60      	ldr	r3, [pc, #384]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6c:	4a5e      	ldr	r2, [pc, #376]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002b6e:	f043 0304 	orr.w	r3, r3, #4
 8002b72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b76:	4b5c      	ldr	r3, [pc, #368]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b86:	e00f      	b.n	8002ba8 <HAL_RCC_OscConfig+0x378>
 8002b88:	4b57      	ldr	r3, [pc, #348]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8e:	4a56      	ldr	r2, [pc, #344]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b98:	4b53      	ldr	r3, [pc, #332]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9e:	4a52      	ldr	r2, [pc, #328]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d016      	beq.n	8002bde <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7fd fe04 	bl	80007bc <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb8:	f7fd fe00 	bl	80007bc <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e138      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bce:	4b46      	ldr	r3, [pc, #280]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ed      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x388>
 8002bdc:	e015      	b.n	8002c0a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7fd fded 	bl	80007bc <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f7fd fde9 	bl	80007bc <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e121      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1ed      	bne.n	8002be6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c0a:	7ffb      	ldrb	r3, [r7, #31]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c10:	4b35      	ldr	r3, [pc, #212]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c14:	4a34      	ldr	r2, [pc, #208]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002c16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d03c      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01c      	beq.n	8002c6a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c30:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c36:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c40:	f7fd fdbc 	bl	80007bc <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c48:	f7fd fdb8 	bl	80007bc <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e0f2      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c5a:	4b23      	ldr	r3, [pc, #140]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ef      	beq.n	8002c48 <HAL_RCC_OscConfig+0x418>
 8002c68:	e01b      	b.n	8002ca2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c70:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7fd fd9f 	bl	80007bc <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c82:	f7fd fd9b 	bl	80007bc <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e0d5      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c94:	4b14      	ldr	r3, [pc, #80]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1ef      	bne.n	8002c82 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 80c9 	beq.w	8002e3e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b0c      	cmp	r3, #12
 8002cb6:	f000 8083 	beq.w	8002dc0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d15e      	bne.n	8002d80 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc2:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a08      	ldr	r2, [pc, #32]	@ (8002ce8 <HAL_RCC_OscConfig+0x4b8>)
 8002cc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7fd fd75 	bl	80007bc <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd4:	e00c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd6:	f7fd fd71 	bl	80007bc <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d905      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e0ab      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf0:	4b55      	ldr	r3, [pc, #340]	@ (8002e48 <HAL_RCC_OscConfig+0x618>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1ec      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cfc:	4b52      	ldr	r3, [pc, #328]	@ (8002e48 <HAL_RCC_OscConfig+0x618>)
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	4b52      	ldr	r3, [pc, #328]	@ (8002e4c <HAL_RCC_OscConfig+0x61c>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6a11      	ldr	r1, [r2, #32]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d0c:	3a01      	subs	r2, #1
 8002d0e:	0112      	lsls	r2, r2, #4
 8002d10:	4311      	orrs	r1, r2
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002d16:	0212      	lsls	r2, r2, #8
 8002d18:	4311      	orrs	r1, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d1e:	0852      	lsrs	r2, r2, #1
 8002d20:	3a01      	subs	r2, #1
 8002d22:	0552      	lsls	r2, r2, #21
 8002d24:	4311      	orrs	r1, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d2a:	0852      	lsrs	r2, r2, #1
 8002d2c:	3a01      	subs	r2, #1
 8002d2e:	0652      	lsls	r2, r2, #25
 8002d30:	4311      	orrs	r1, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d36:	06d2      	lsls	r2, r2, #27
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	4943      	ldr	r1, [pc, #268]	@ (8002e48 <HAL_RCC_OscConfig+0x618>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d40:	4b41      	ldr	r3, [pc, #260]	@ (8002e48 <HAL_RCC_OscConfig+0x618>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a40      	ldr	r2, [pc, #256]	@ (8002e48 <HAL_RCC_OscConfig+0x618>)
 8002d46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d4c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e48 <HAL_RCC_OscConfig+0x618>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4a3d      	ldr	r2, [pc, #244]	@ (8002e48 <HAL_RCC_OscConfig+0x618>)
 8002d52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7fd fd30 	bl	80007bc <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d60:	f7fd fd2c 	bl	80007bc <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e066      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d72:	4b35      	ldr	r3, [pc, #212]	@ (8002e48 <HAL_RCC_OscConfig+0x618>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x530>
 8002d7e:	e05e      	b.n	8002e3e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d80:	4b31      	ldr	r3, [pc, #196]	@ (8002e48 <HAL_RCC_OscConfig+0x618>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a30      	ldr	r2, [pc, #192]	@ (8002e48 <HAL_RCC_OscConfig+0x618>)
 8002d86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fd fd16 	bl	80007bc <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d94:	f7fd fd12 	bl	80007bc <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e04c      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da6:	4b28      	ldr	r3, [pc, #160]	@ (8002e48 <HAL_RCC_OscConfig+0x618>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002db2:	4b25      	ldr	r3, [pc, #148]	@ (8002e48 <HAL_RCC_OscConfig+0x618>)
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	4924      	ldr	r1, [pc, #144]	@ (8002e48 <HAL_RCC_OscConfig+0x618>)
 8002db8:	4b25      	ldr	r3, [pc, #148]	@ (8002e50 <HAL_RCC_OscConfig+0x620>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	60cb      	str	r3, [r1, #12]
 8002dbe:	e03e      	b.n	8002e3e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e039      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8002e48 <HAL_RCC_OscConfig+0x618>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f003 0203 	and.w	r2, r3, #3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d12c      	bne.n	8002e3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	3b01      	subs	r3, #1
 8002dec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d123      	bne.n	8002e3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d11b      	bne.n	8002e3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d113      	bne.n	8002e3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d109      	bne.n	8002e3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	3b01      	subs	r3, #1
 8002e34:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d001      	beq.n	8002e3e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3720      	adds	r7, #32
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	019f800c 	.word	0x019f800c
 8002e50:	feeefffc 	.word	0xfeeefffc

08002e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e11e      	b.n	80030aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b91      	ldr	r3, [pc, #580]	@ (80030b4 <HAL_RCC_ClockConfig+0x260>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d910      	bls.n	8002e9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b8e      	ldr	r3, [pc, #568]	@ (80030b4 <HAL_RCC_ClockConfig+0x260>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 020f 	bic.w	r2, r3, #15
 8002e82:	498c      	ldr	r1, [pc, #560]	@ (80030b4 <HAL_RCC_ClockConfig+0x260>)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8a:	4b8a      	ldr	r3, [pc, #552]	@ (80030b4 <HAL_RCC_ClockConfig+0x260>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e106      	b.n	80030aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d073      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d129      	bne.n	8002f04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb0:	4b81      	ldr	r3, [pc, #516]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0f4      	b.n	80030aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ec0:	f000 f966 	bl	8003190 <RCC_GetSysClockFreqFromPLLSource>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4a7c      	ldr	r2, [pc, #496]	@ (80030bc <HAL_RCC_ClockConfig+0x268>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d93f      	bls.n	8002f4e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ece:	4b7a      	ldr	r3, [pc, #488]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d033      	beq.n	8002f4e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d12f      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002eee:	4b72      	ldr	r3, [pc, #456]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ef6:	4a70      	ldr	r2, [pc, #448]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002efc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002efe:	2380      	movs	r3, #128	@ 0x80
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	e024      	b.n	8002f4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d107      	bne.n	8002f1c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f0c:	4b6a      	ldr	r3, [pc, #424]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d109      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0c6      	b.n	80030aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f1c:	4b66      	ldr	r3, [pc, #408]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0be      	b.n	80030aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f2c:	f000 f8ce 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4a61      	ldr	r2, [pc, #388]	@ (80030bc <HAL_RCC_ClockConfig+0x268>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d909      	bls.n	8002f4e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f42:	4a5d      	ldr	r2, [pc, #372]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f4a:	2380      	movs	r3, #128	@ 0x80
 8002f4c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f4e:	4b5a      	ldr	r3, [pc, #360]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f023 0203 	bic.w	r2, r3, #3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4957      	ldr	r1, [pc, #348]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f60:	f7fd fc2c 	bl	80007bc <HAL_GetTick>
 8002f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f68:	f7fd fc28 	bl	80007bc <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e095      	b.n	80030aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 020c 	and.w	r2, r3, #12
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d1eb      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d023      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa8:	4b43      	ldr	r3, [pc, #268]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4a42      	ldr	r2, [pc, #264]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002fae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fb2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002fc8:	4a3b      	ldr	r2, [pc, #236]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002fca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd0:	4b39      	ldr	r3, [pc, #228]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4936      	ldr	r1, [pc, #216]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	2b80      	cmp	r3, #128	@ 0x80
 8002fe8:	d105      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002fea:	4b33      	ldr	r3, [pc, #204]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	4a32      	ldr	r2, [pc, #200]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8002ff0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ff4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff6:	4b2f      	ldr	r3, [pc, #188]	@ (80030b4 <HAL_RCC_ClockConfig+0x260>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d21d      	bcs.n	8003040 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003004:	4b2b      	ldr	r3, [pc, #172]	@ (80030b4 <HAL_RCC_ClockConfig+0x260>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f023 020f 	bic.w	r2, r3, #15
 800300c:	4929      	ldr	r1, [pc, #164]	@ (80030b4 <HAL_RCC_ClockConfig+0x260>)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	4313      	orrs	r3, r2
 8003012:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003014:	f7fd fbd2 	bl	80007bc <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	e00a      	b.n	8003032 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800301c:	f7fd fbce 	bl	80007bc <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e03b      	b.n	80030aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b20      	ldr	r3, [pc, #128]	@ (80030b4 <HAL_RCC_ClockConfig+0x260>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d1ed      	bne.n	800301c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800304c:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4917      	ldr	r1, [pc, #92]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800306a:	4b13      	ldr	r3, [pc, #76]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	490f      	ldr	r1, [pc, #60]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800307e:	f000 f825 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8003082:	4602      	mov	r2, r0
 8003084:	4b0c      	ldr	r3, [pc, #48]	@ (80030b8 <HAL_RCC_ClockConfig+0x264>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	490c      	ldr	r1, [pc, #48]	@ (80030c0 <HAL_RCC_ClockConfig+0x26c>)
 8003090:	5ccb      	ldrb	r3, [r1, r3]
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	fa22 f303 	lsr.w	r3, r2, r3
 800309a:	4a0a      	ldr	r2, [pc, #40]	@ (80030c4 <HAL_RCC_ClockConfig+0x270>)
 800309c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800309e:	4b0a      	ldr	r3, [pc, #40]	@ (80030c8 <HAL_RCC_ClockConfig+0x274>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd fb3e 	bl	8000724 <HAL_InitTick>
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40022000 	.word	0x40022000
 80030b8:	40021000 	.word	0x40021000
 80030bc:	04c4b400 	.word	0x04c4b400
 80030c0:	08003704 	.word	0x08003704
 80030c4:	20000000 	.word	0x20000000
 80030c8:	20000004 	.word	0x20000004

080030cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003184 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d102      	bne.n	80030e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030de:	4b2a      	ldr	r3, [pc, #168]	@ (8003188 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	e047      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030e4:	4b27      	ldr	r3, [pc, #156]	@ (8003184 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 030c 	and.w	r3, r3, #12
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d102      	bne.n	80030f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030f0:	4b26      	ldr	r3, [pc, #152]	@ (800318c <HAL_RCC_GetSysClockFreq+0xc0>)
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	e03e      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80030f6:	4b23      	ldr	r3, [pc, #140]	@ (8003184 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d136      	bne.n	8003170 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003102:	4b20      	ldr	r3, [pc, #128]	@ (8003184 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800310c:	4b1d      	ldr	r3, [pc, #116]	@ (8003184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	3301      	adds	r3, #1
 8003118:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d10c      	bne.n	800313a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003120:	4a1a      	ldr	r2, [pc, #104]	@ (800318c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	fbb2 f3f3 	udiv	r3, r2, r3
 8003128:	4a16      	ldr	r2, [pc, #88]	@ (8003184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800312a:	68d2      	ldr	r2, [r2, #12]
 800312c:	0a12      	lsrs	r2, r2, #8
 800312e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	617b      	str	r3, [r7, #20]
      break;
 8003138:	e00c      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800313a:	4a13      	ldr	r2, [pc, #76]	@ (8003188 <HAL_RCC_GetSysClockFreq+0xbc>)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003142:	4a10      	ldr	r2, [pc, #64]	@ (8003184 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003144:	68d2      	ldr	r2, [r2, #12]
 8003146:	0a12      	lsrs	r2, r2, #8
 8003148:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800314c:	fb02 f303 	mul.w	r3, r2, r3
 8003150:	617b      	str	r3, [r7, #20]
      break;
 8003152:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003154:	4b0b      	ldr	r3, [pc, #44]	@ (8003184 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0e5b      	lsrs	r3, r3, #25
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	3301      	adds	r3, #1
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	e001      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003174:	693b      	ldr	r3, [r7, #16]
}
 8003176:	4618      	mov	r0, r3
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000
 8003188:	00f42400 	.word	0x00f42400
 800318c:	007a1200 	.word	0x007a1200

08003190 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003196:	4b1e      	ldr	r3, [pc, #120]	@ (8003210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	3301      	adds	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d10c      	bne.n	80031ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031b4:	4a17      	ldr	r2, [pc, #92]	@ (8003214 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031bc:	4a14      	ldr	r2, [pc, #80]	@ (8003210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031be:	68d2      	ldr	r2, [r2, #12]
 80031c0:	0a12      	lsrs	r2, r2, #8
 80031c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	617b      	str	r3, [r7, #20]
    break;
 80031cc:	e00c      	b.n	80031e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031ce:	4a12      	ldr	r2, [pc, #72]	@ (8003218 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031d8:	68d2      	ldr	r2, [r2, #12]
 80031da:	0a12      	lsrs	r2, r2, #8
 80031dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031e0:	fb02 f303 	mul.w	r3, r2, r3
 80031e4:	617b      	str	r3, [r7, #20]
    break;
 80031e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031e8:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	0e5b      	lsrs	r3, r3, #25
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	3301      	adds	r3, #1
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003202:	687b      	ldr	r3, [r7, #4]
}
 8003204:	4618      	mov	r0, r3
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	40021000 	.word	0x40021000
 8003214:	007a1200 	.word	0x007a1200
 8003218:	00f42400 	.word	0x00f42400

0800321c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003224:	2300      	movs	r3, #0
 8003226:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003228:	2300      	movs	r3, #0
 800322a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8098 	beq.w	800336a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323e:	4b43      	ldr	r3, [pc, #268]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10d      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324a:	4b40      	ldr	r3, [pc, #256]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800324c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324e:	4a3f      	ldr	r2, [pc, #252]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003254:	6593      	str	r3, [r2, #88]	@ 0x58
 8003256:	4b3d      	ldr	r3, [pc, #244]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003262:	2301      	movs	r3, #1
 8003264:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003266:	4b3a      	ldr	r3, [pc, #232]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a39      	ldr	r2, [pc, #228]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800326c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003270:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003272:	f7fd faa3 	bl	80007bc <HAL_GetTick>
 8003276:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003278:	e009      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327a:	f7fd fa9f 	bl	80007bc <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d902      	bls.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	74fb      	strb	r3, [r7, #19]
        break;
 800328c:	e005      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800328e:	4b30      	ldr	r3, [pc, #192]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0ef      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d159      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032a0:	4b2a      	ldr	r3, [pc, #168]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01e      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d019      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032bc:	4b23      	ldr	r3, [pc, #140]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032c8:	4b20      	ldr	r3, [pc, #128]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ce:	4a1f      	ldr	r2, [pc, #124]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032d8:	4b1c      	ldr	r3, [pc, #112]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032de:	4a1b      	ldr	r2, [pc, #108]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032e8:	4a18      	ldr	r2, [pc, #96]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d016      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fa:	f7fd fa5f 	bl	80007bc <HAL_GetTick>
 80032fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003300:	e00b      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f7fd fa5b 	bl	80007bc <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003310:	4293      	cmp	r3, r2
 8003312:	d902      	bls.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	74fb      	strb	r3, [r7, #19]
            break;
 8003318:	e006      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800331a:	4b0c      	ldr	r3, [pc, #48]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800331c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0ec      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10b      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800332e:	4b07      	ldr	r3, [pc, #28]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003334:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333c:	4903      	ldr	r1, [pc, #12]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003344:	e008      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003346:	7cfb      	ldrb	r3, [r7, #19]
 8003348:	74bb      	strb	r3, [r7, #18]
 800334a:	e005      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800334c:	40021000 	.word	0x40021000
 8003350:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003354:	7cfb      	ldrb	r3, [r7, #19]
 8003356:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003358:	7c7b      	ldrb	r3, [r7, #17]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d105      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335e:	4ba7      	ldr	r3, [pc, #668]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003362:	4aa6      	ldr	r2, [pc, #664]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003364:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003368:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003376:	4ba1      	ldr	r3, [pc, #644]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337c:	f023 0203 	bic.w	r2, r3, #3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	499d      	ldr	r1, [pc, #628]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003398:	4b98      	ldr	r3, [pc, #608]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339e:	f023 020c 	bic.w	r2, r3, #12
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	4995      	ldr	r1, [pc, #596]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033ba:	4b90      	ldr	r3, [pc, #576]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	498c      	ldr	r1, [pc, #560]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033dc:	4b87      	ldr	r3, [pc, #540]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	4984      	ldr	r1, [pc, #528]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033fe:	4b7f      	ldr	r3, [pc, #508]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003404:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	497b      	ldr	r1, [pc, #492]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003420:	4b76      	ldr	r3, [pc, #472]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003426:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	4973      	ldr	r1, [pc, #460]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003442:	4b6e      	ldr	r3, [pc, #440]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003448:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	496a      	ldr	r1, [pc, #424]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003464:	4b65      	ldr	r3, [pc, #404]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4962      	ldr	r1, [pc, #392]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003486:	4b5d      	ldr	r3, [pc, #372]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	4959      	ldr	r1, [pc, #356]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034a8:	4b54      	ldr	r3, [pc, #336]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ae:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b6:	4951      	ldr	r1, [pc, #324]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d015      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034ca:	4b4c      	ldr	r3, [pc, #304]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d8:	4948      	ldr	r1, [pc, #288]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034e8:	d105      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ea:	4b44      	ldr	r3, [pc, #272]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	4a43      	ldr	r2, [pc, #268]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034f4:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d015      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003502:	4b3e      	ldr	r3, [pc, #248]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003508:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003510:	493a      	ldr	r1, [pc, #232]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003520:	d105      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003522:	4b36      	ldr	r3, [pc, #216]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	4a35      	ldr	r2, [pc, #212]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800352c:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d015      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800353a:	4b30      	ldr	r3, [pc, #192]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003540:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003548:	492c      	ldr	r1, [pc, #176]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003554:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003558:	d105      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800355a:	4b28      	ldr	r3, [pc, #160]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	4a27      	ldr	r2, [pc, #156]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003560:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003564:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d015      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003572:	4b22      	ldr	r3, [pc, #136]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003578:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003580:	491e      	ldr	r1, [pc, #120]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003590:	d105      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003592:	4b1a      	ldr	r3, [pc, #104]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	4a19      	ldr	r2, [pc, #100]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003598:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800359c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d015      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035aa:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b8:	4910      	ldr	r1, [pc, #64]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035c8:	d105      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ca:	4b0c      	ldr	r3, [pc, #48]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	4a0b      	ldr	r2, [pc, #44]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035d4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d018      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035e2:	4b06      	ldr	r3, [pc, #24]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	4902      	ldr	r1, [pc, #8]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	e001      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80035fc:	40021000 	.word	0x40021000
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003606:	d105      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003608:	4b21      	ldr	r3, [pc, #132]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4a20      	ldr	r2, [pc, #128]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800360e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003612:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d015      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003620:	4b1b      	ldr	r3, [pc, #108]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003626:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	4918      	ldr	r1, [pc, #96]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800363e:	d105      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003640:	4b13      	ldr	r3, [pc, #76]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4a12      	ldr	r2, [pc, #72]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800364a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d015      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003658:	4b0d      	ldr	r3, [pc, #52]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800365a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800365e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003666:	490a      	ldr	r1, [pc, #40]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003672:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003676:	d105      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003678:	4b05      	ldr	r3, [pc, #20]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4a04      	ldr	r2, [pc, #16]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800367e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003682:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003684:	7cbb      	ldrb	r3, [r7, #18]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000

08003694 <memset>:
 8003694:	4402      	add	r2, r0
 8003696:	4603      	mov	r3, r0
 8003698:	4293      	cmp	r3, r2
 800369a:	d100      	bne.n	800369e <memset+0xa>
 800369c:	4770      	bx	lr
 800369e:	f803 1b01 	strb.w	r1, [r3], #1
 80036a2:	e7f9      	b.n	8003698 <memset+0x4>

080036a4 <__libc_init_array>:
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	4d0d      	ldr	r5, [pc, #52]	@ (80036dc <__libc_init_array+0x38>)
 80036a8:	4c0d      	ldr	r4, [pc, #52]	@ (80036e0 <__libc_init_array+0x3c>)
 80036aa:	1b64      	subs	r4, r4, r5
 80036ac:	10a4      	asrs	r4, r4, #2
 80036ae:	2600      	movs	r6, #0
 80036b0:	42a6      	cmp	r6, r4
 80036b2:	d109      	bne.n	80036c8 <__libc_init_array+0x24>
 80036b4:	4d0b      	ldr	r5, [pc, #44]	@ (80036e4 <__libc_init_array+0x40>)
 80036b6:	4c0c      	ldr	r4, [pc, #48]	@ (80036e8 <__libc_init_array+0x44>)
 80036b8:	f000 f818 	bl	80036ec <_init>
 80036bc:	1b64      	subs	r4, r4, r5
 80036be:	10a4      	asrs	r4, r4, #2
 80036c0:	2600      	movs	r6, #0
 80036c2:	42a6      	cmp	r6, r4
 80036c4:	d105      	bne.n	80036d2 <__libc_init_array+0x2e>
 80036c6:	bd70      	pop	{r4, r5, r6, pc}
 80036c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036cc:	4798      	blx	r3
 80036ce:	3601      	adds	r6, #1
 80036d0:	e7ee      	b.n	80036b0 <__libc_init_array+0xc>
 80036d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d6:	4798      	blx	r3
 80036d8:	3601      	adds	r6, #1
 80036da:	e7f2      	b.n	80036c2 <__libc_init_array+0x1e>
 80036dc:	08003714 	.word	0x08003714
 80036e0:	08003714 	.word	0x08003714
 80036e4:	08003714 	.word	0x08003714
 80036e8:	08003718 	.word	0x08003718

080036ec <_init>:
 80036ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ee:	bf00      	nop
 80036f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f2:	bc08      	pop	{r3}
 80036f4:	469e      	mov	lr, r3
 80036f6:	4770      	bx	lr

080036f8 <_fini>:
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fa:	bf00      	nop
 80036fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fe:	bc08      	pop	{r3}
 8003700:	469e      	mov	lr, r3
 8003702:	4770      	bx	lr
