
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a38  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003c10  08003c10  00004c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c2c  08003c2c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c2c  08003c2c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c2c  08003c2c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c2c  08003c2c  00004c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c30  08003c30  00004c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c34  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08003c40  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003c40  000050e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a02b  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc4  00000000  00000000  0000f067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  00010c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000079b  00000000  00000000  00011630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d53c  00000000  00000000  00011dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5d2  00000000  00000000  0002f307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b94fa  00000000  00000000  0003b8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4dd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d4  00000000  00000000  000f4e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000f75ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003bf8 	.word	0x08003bf8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003bf8 	.word	0x08003bf8

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 faa0 	bl	8000762 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f82f 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f8f9 	bl	800041c <MX_GPIO_Init>
  MX_I2C1_Init();
 800022a:	f000 f877 	bl	800031c <MX_I2C1_Init>
  MX_I2C2_Init();
 800022e:	f000 f8b5 	bl	800039c <MX_I2C2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  memset(RxBuf, 0, I2CBUF);
 8000232:	220a      	movs	r2, #10
 8000234:	2100      	movs	r1, #0
 8000236:	480e      	ldr	r0, [pc, #56]	@ (8000270 <main+0x58>)
 8000238:	f003 fcb2 	bl	8003ba0 <memset>
	  RxDone = 0;
 800023c:	4b0d      	ldr	r3, [pc, #52]	@ (8000274 <main+0x5c>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Slave_Receive_IT(&hi2c2, RxBuf, I2CBUF);
 8000242:	220a      	movs	r2, #10
 8000244:	490a      	ldr	r1, [pc, #40]	@ (8000270 <main+0x58>)
 8000246:	480c      	ldr	r0, [pc, #48]	@ (8000278 <main+0x60>)
 8000248:	f000 ffb6 	bl	80011b8 <HAL_I2C_Slave_Receive_IT>
	  HAL_I2C_Master_Transmit(&hi2c1, 0x10<<1, (uint8_t*)TxBuf, I2CBUF, 1000);
 800024c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000250:	9300      	str	r3, [sp, #0]
 8000252:	230a      	movs	r3, #10
 8000254:	4a09      	ldr	r2, [pc, #36]	@ (800027c <main+0x64>)
 8000256:	2120      	movs	r1, #32
 8000258:	4809      	ldr	r0, [pc, #36]	@ (8000280 <main+0x68>)
 800025a:	f000 fe95 	bl	8000f88 <HAL_I2C_Master_Transmit>
	  while(RxDone == 0)
 800025e:	bf00      	nop
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <main+0x5c>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0fa      	beq.n	8000260 <main+0x48>
		  ;
	  __NOP();
 800026a:	bf00      	nop
	  memset(RxBuf, 0, I2CBUF);
 800026c:	e7e1      	b.n	8000232 <main+0x1a>
 800026e:	bf00      	nop
 8000270:	200000d0 	.word	0x200000d0
 8000274:	200000da 	.word	0x200000da
 8000278:	2000007c 	.word	0x2000007c
 800027c:	08003c10 	.word	0x08003c10
 8000280:	20000028 	.word	0x20000028

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b094      	sub	sp, #80	@ 0x50
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	2238      	movs	r2, #56	@ 0x38
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f003 fc84 	bl	8003ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002aa:	f002 fc93 	bl	8002bd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ae:	2302      	movs	r3, #2
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b8:	2340      	movs	r3, #64	@ 0x40
 80002ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002bc:	2302      	movs	r3, #2
 80002be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c0:	2302      	movs	r3, #2
 80002c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002c4:	2301      	movs	r3, #1
 80002c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 80002c8:	2315      	movs	r3, #21
 80002ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002cc:	2302      	movs	r3, #2
 80002ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002d0:	2302      	movs	r3, #2
 80002d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d4:	2302      	movs	r3, #2
 80002d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d8:	f107 0318 	add.w	r3, r7, #24
 80002dc:	4618      	mov	r0, r3
 80002de:	f002 fd2d 	bl	8002d3c <HAL_RCC_OscConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002e8:	f000 f8de 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ec:	230f      	movs	r3, #15
 80002ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f0:	2303      	movs	r3, #3
 80002f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002f4:	2380      	movs	r3, #128	@ 0x80
 80002f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2102      	movs	r1, #2
 8000304:	4618      	mov	r0, r3
 8000306:	f003 f82b 	bl	8003360 <HAL_RCC_ClockConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000310:	f000 f8ca 	bl	80004a8 <Error_Handler>
  }
}
 8000314:	bf00      	nop
 8000316:	3750      	adds	r7, #80	@ 0x50
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000320:	4b1b      	ldr	r3, [pc, #108]	@ (8000390 <MX_I2C1_Init+0x74>)
 8000322:	4a1c      	ldr	r2, [pc, #112]	@ (8000394 <MX_I2C1_Init+0x78>)
 8000324:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20916F9D;
 8000326:	4b1a      	ldr	r3, [pc, #104]	@ (8000390 <MX_I2C1_Init+0x74>)
 8000328:	4a1b      	ldr	r2, [pc, #108]	@ (8000398 <MX_I2C1_Init+0x7c>)
 800032a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800032c:	4b18      	ldr	r3, [pc, #96]	@ (8000390 <MX_I2C1_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000332:	4b17      	ldr	r3, [pc, #92]	@ (8000390 <MX_I2C1_Init+0x74>)
 8000334:	2201      	movs	r2, #1
 8000336:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000338:	4b15      	ldr	r3, [pc, #84]	@ (8000390 <MX_I2C1_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800033e:	4b14      	ldr	r3, [pc, #80]	@ (8000390 <MX_I2C1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000344:	4b12      	ldr	r3, [pc, #72]	@ (8000390 <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800034a:	4b11      	ldr	r3, [pc, #68]	@ (8000390 <MX_I2C1_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000350:	4b0f      	ldr	r3, [pc, #60]	@ (8000390 <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000356:	480e      	ldr	r0, [pc, #56]	@ (8000390 <MX_I2C1_Init+0x74>)
 8000358:	f000 fd7a 	bl	8000e50 <HAL_I2C_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000362:	f000 f8a1 	bl	80004a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000366:	2100      	movs	r1, #0
 8000368:	4809      	ldr	r0, [pc, #36]	@ (8000390 <MX_I2C1_Init+0x74>)
 800036a:	f002 fb9b 	bl	8002aa4 <HAL_I2CEx_ConfigAnalogFilter>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000374:	f000 f898 	bl	80004a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000378:	2100      	movs	r1, #0
 800037a:	4805      	ldr	r0, [pc, #20]	@ (8000390 <MX_I2C1_Init+0x74>)
 800037c:	f002 fbdd 	bl	8002b3a <HAL_I2CEx_ConfigDigitalFilter>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000386:	f000 f88f 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000028 	.word	0x20000028
 8000394:	40005400 	.word	0x40005400
 8000398:	20916f9d 	.word	0x20916f9d

0800039c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000414 <MX_I2C2_Init+0x78>)
 80003a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20916F9D;
 80003a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000418 <MX_I2C2_Init+0x7c>)
 80003aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 32;
 80003ac:	4b18      	ldr	r3, [pc, #96]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003ae:	2220      	movs	r2, #32
 80003b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b2:	4b17      	ldr	r3, [pc, #92]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b8:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003be:	4b14      	ldr	r3, [pc, #80]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c4:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ca:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003d6:	480e      	ldr	r0, [pc, #56]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003d8:	f000 fd3a 	bl	8000e50 <HAL_I2C_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003e2:	f000 f861 	bl	80004a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003e6:	2100      	movs	r1, #0
 80003e8:	4809      	ldr	r0, [pc, #36]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003ea:	f002 fb5b 	bl	8002aa4 <HAL_I2CEx_ConfigAnalogFilter>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003f4:	f000 f858 	bl	80004a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003f8:	2100      	movs	r1, #0
 80003fa:	4805      	ldr	r0, [pc, #20]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003fc:	f002 fb9d 	bl	8002b3a <HAL_I2CEx_ConfigDigitalFilter>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000406:	f000 f84f 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	2000007c 	.word	0x2000007c
 8000414:	40005800 	.word	0x40005800
 8000418:	20916f9d 	.word	0x20916f9d

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000422:	4b15      	ldr	r3, [pc, #84]	@ (8000478 <MX_GPIO_Init+0x5c>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000426:	4a14      	ldr	r2, [pc, #80]	@ (8000478 <MX_GPIO_Init+0x5c>)
 8000428:	f043 0320 	orr.w	r3, r3, #32
 800042c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800042e:	4b12      	ldr	r3, [pc, #72]	@ (8000478 <MX_GPIO_Init+0x5c>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000432:	f003 0320 	and.w	r3, r3, #32
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043a:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <MX_GPIO_Init+0x5c>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043e:	4a0e      	ldr	r2, [pc, #56]	@ (8000478 <MX_GPIO_Init+0x5c>)
 8000440:	f043 0304 	orr.w	r3, r3, #4
 8000444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000446:	4b0c      	ldr	r3, [pc, #48]	@ (8000478 <MX_GPIO_Init+0x5c>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044a:	f003 0304 	and.w	r3, r3, #4
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b09      	ldr	r3, [pc, #36]	@ (8000478 <MX_GPIO_Init+0x5c>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000456:	4a08      	ldr	r2, [pc, #32]	@ (8000478 <MX_GPIO_Init+0x5c>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800045e:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <MX_GPIO_Init+0x5c>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000

0800047c <HAL_I2C_SlaveRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2){
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a06      	ldr	r2, [pc, #24]	@ (80004a0 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d102      	bne.n	8000492 <HAL_I2C_SlaveRxCpltCallback+0x16>
		RxDone = 1;
 800048c:	4b05      	ldr	r3, [pc, #20]	@ (80004a4 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 800048e:	2201      	movs	r2, #1
 8000490:	701a      	strb	r2, [r3, #0]
	}
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	2000007c 	.word	0x2000007c
 80004a4:	200000da 	.word	0x200000da

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <Error_Handler+0x8>

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ba:	4b0f      	ldr	r3, [pc, #60]	@ (80004f8 <HAL_MspInit+0x44>)
 80004bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004be:	4a0e      	ldr	r2, [pc, #56]	@ (80004f8 <HAL_MspInit+0x44>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80004c6:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <HAL_MspInit+0x44>)
 80004c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b09      	ldr	r3, [pc, #36]	@ (80004f8 <HAL_MspInit+0x44>)
 80004d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004d6:	4a08      	ldr	r2, [pc, #32]	@ (80004f8 <HAL_MspInit+0x44>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80004de:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <HAL_MspInit+0x44>)
 80004e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004ea:	f002 fc17 	bl	8002d1c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b0a0      	sub	sp, #128	@ 0x80
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000514:	f107 031c 	add.w	r3, r7, #28
 8000518:	2250      	movs	r2, #80	@ 0x50
 800051a:	2100      	movs	r1, #0
 800051c:	4618      	mov	r0, r3
 800051e:	f003 fb3f 	bl	8003ba0 <memset>
  if(hi2c->Instance==I2C1)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a4f      	ldr	r2, [pc, #316]	@ (8000664 <HAL_I2C_MspInit+0x168>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d138      	bne.n	800059e <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800052c:	2340      	movs	r3, #64	@ 0x40
 800052e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000530:	2300      	movs	r3, #0
 8000532:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000534:	f107 031c 	add.w	r3, r7, #28
 8000538:	4618      	mov	r0, r3
 800053a:	f003 f8f5 	bl	8003728 <HAL_RCCEx_PeriphCLKConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000544:	f7ff ffb0 	bl	80004a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b47      	ldr	r3, [pc, #284]	@ (8000668 <HAL_I2C_MspInit+0x16c>)
 800054a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054c:	4a46      	ldr	r2, [pc, #280]	@ (8000668 <HAL_I2C_MspInit+0x16c>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000554:	4b44      	ldr	r3, [pc, #272]	@ (8000668 <HAL_I2C_MspInit+0x16c>)
 8000556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	61bb      	str	r3, [r7, #24]
 800055e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA13     ------> I2C1_SCL
    PA14     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000560:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000564:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000566:	2312      	movs	r3, #18
 8000568:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800056a:	2301      	movs	r3, #1
 800056c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	2300      	movs	r3, #0
 8000570:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000572:	2304      	movs	r3, #4
 8000574:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000576:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800057a:	4619      	mov	r1, r3
 800057c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000580:	f000 fae4 	bl	8000b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000584:	4b38      	ldr	r3, [pc, #224]	@ (8000668 <HAL_I2C_MspInit+0x16c>)
 8000586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000588:	4a37      	ldr	r2, [pc, #220]	@ (8000668 <HAL_I2C_MspInit+0x16c>)
 800058a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800058e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000590:	4b35      	ldr	r3, [pc, #212]	@ (8000668 <HAL_I2C_MspInit+0x16c>)
 8000592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000598:	617b      	str	r3, [r7, #20]
 800059a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800059c:	e05e      	b.n	800065c <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C2)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a32      	ldr	r2, [pc, #200]	@ (800066c <HAL_I2C_MspInit+0x170>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d159      	bne.n	800065c <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80005a8:	2380      	movs	r3, #128	@ 0x80
 80005aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b0:	f107 031c 	add.w	r3, r7, #28
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 f8b7 	bl	8003728 <HAL_RCCEx_PeriphCLKConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <HAL_I2C_MspInit+0xc8>
      Error_Handler();
 80005c0:	f7ff ff72 	bl	80004a8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c4:	4b28      	ldr	r3, [pc, #160]	@ (8000668 <HAL_I2C_MspInit+0x16c>)
 80005c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c8:	4a27      	ldr	r2, [pc, #156]	@ (8000668 <HAL_I2C_MspInit+0x16c>)
 80005ca:	f043 0320 	orr.w	r3, r3, #32
 80005ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d0:	4b25      	ldr	r3, [pc, #148]	@ (8000668 <HAL_I2C_MspInit+0x16c>)
 80005d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d4:	f003 0320 	and.w	r3, r3, #32
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005dc:	4b22      	ldr	r3, [pc, #136]	@ (8000668 <HAL_I2C_MspInit+0x16c>)
 80005de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e0:	4a21      	ldr	r2, [pc, #132]	@ (8000668 <HAL_I2C_MspInit+0x16c>)
 80005e2:	f043 0304 	orr.w	r3, r3, #4
 80005e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000668 <HAL_I2C_MspInit+0x16c>)
 80005ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ec:	f003 0304 	and.w	r3, r3, #4
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005f4:	2301      	movs	r3, #1
 80005f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f8:	2312      	movs	r3, #18
 80005fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2300      	movs	r3, #0
 8000602:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000604:	2304      	movs	r3, #4
 8000606:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000608:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800060c:	4619      	mov	r1, r3
 800060e:	4818      	ldr	r0, [pc, #96]	@ (8000670 <HAL_I2C_MspInit+0x174>)
 8000610:	f000 fa9c 	bl	8000b4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000614:	2310      	movs	r3, #16
 8000616:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000618:	2312      	movs	r3, #18
 800061a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	2300      	movs	r3, #0
 8000622:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000624:	2304      	movs	r3, #4
 8000626:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000628:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800062c:	4619      	mov	r1, r3
 800062e:	4811      	ldr	r0, [pc, #68]	@ (8000674 <HAL_I2C_MspInit+0x178>)
 8000630:	f000 fa8c 	bl	8000b4c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000634:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <HAL_I2C_MspInit+0x16c>)
 8000636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000638:	4a0b      	ldr	r2, [pc, #44]	@ (8000668 <HAL_I2C_MspInit+0x16c>)
 800063a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800063e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000640:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <HAL_I2C_MspInit+0x16c>)
 8000642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000644:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	2101      	movs	r1, #1
 8000650:	2021      	movs	r0, #33	@ 0x21
 8000652:	f000 f9d2 	bl	80009fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000656:	2021      	movs	r0, #33	@ 0x21
 8000658:	f000 f9e9 	bl	8000a2e <HAL_NVIC_EnableIRQ>
}
 800065c:	bf00      	nop
 800065e:	3780      	adds	r7, #128	@ 0x80
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40005400 	.word	0x40005400
 8000668:	40021000 	.word	0x40021000
 800066c:	40005800 	.word	0x40005800
 8000670:	48001400 	.word	0x48001400
 8000674:	48000800 	.word	0x48000800

08000678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <NMI_Handler+0x4>

08000680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <HardFault_Handler+0x4>

08000688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <MemManage_Handler+0x4>

08000690 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <UsageFault_Handler+0x4>

080006a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ce:	f000 f89b 	bl	8000808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80006dc:	4802      	ldr	r0, [pc, #8]	@ (80006e8 <I2C2_EV_IRQHandler+0x10>)
 80006de:	f000 fdbb 	bl	8001258 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000007c 	.word	0x2000007c

080006ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <SystemInit+0x20>)
 80006f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006f6:	4a05      	ldr	r2, [pc, #20]	@ (800070c <SystemInit+0x20>)
 80006f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000710:	480d      	ldr	r0, [pc, #52]	@ (8000748 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000712:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000714:	f7ff ffea 	bl	80006ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480c      	ldr	r0, [pc, #48]	@ (800074c <LoopForever+0x6>)
  ldr r1, =_edata
 800071a:	490d      	ldr	r1, [pc, #52]	@ (8000750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800071c:	4a0d      	ldr	r2, [pc, #52]	@ (8000754 <LoopForever+0xe>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0a      	ldr	r2, [pc, #40]	@ (8000758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000730:	4c0a      	ldr	r4, [pc, #40]	@ (800075c <LoopForever+0x16>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073e:	f003 fa37 	bl	8003bb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000742:	f7ff fd69 	bl	8000218 <main>

08000746 <LoopForever>:

LoopForever:
    b LoopForever
 8000746:	e7fe      	b.n	8000746 <LoopForever>
  ldr   r0, =_estack
 8000748:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000754:	08003c34 	.word	0x08003c34
  ldr r2, =_sbss
 8000758:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800075c:	200000e0 	.word	0x200000e0

08000760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>

08000762 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000768:	2300      	movs	r3, #0
 800076a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800076c:	2003      	movs	r0, #3
 800076e:	f000 f939 	bl	80009e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000772:	200f      	movs	r0, #15
 8000774:	f000 f80e 	bl	8000794 <HAL_InitTick>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	71fb      	strb	r3, [r7, #7]
 8000782:	e001      	b.n	8000788 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000784:	f7ff fe96 	bl	80004b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000788:	79fb      	ldrb	r3, [r7, #7]

}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80007a0:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <HAL_InitTick+0x68>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d022      	beq.n	80007ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80007a8:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <HAL_InitTick+0x6c>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <HAL_InitTick+0x68>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80007b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f944 	bl	8000a4a <HAL_SYSTICK_Config>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d10f      	bne.n	80007e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b0f      	cmp	r3, #15
 80007cc:	d809      	bhi.n	80007e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ce:	2200      	movs	r2, #0
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	f04f 30ff 	mov.w	r0, #4294967295
 80007d6:	f000 f910 	bl	80009fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007da:	4a0a      	ldr	r2, [pc, #40]	@ (8000804 <HAL_InitTick+0x70>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	e007      	b.n	80007f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	73fb      	strb	r3, [r7, #15]
 80007e6:	e004      	b.n	80007f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007e8:	2301      	movs	r3, #1
 80007ea:	73fb      	strb	r3, [r7, #15]
 80007ec:	e001      	b.n	80007f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000000 	.word	0x20000000
 8000804:	20000004 	.word	0x20000004

08000808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <HAL_IncTick+0x1c>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <HAL_IncTick+0x20>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4413      	add	r3, r2
 8000816:	4a03      	ldr	r2, [pc, #12]	@ (8000824 <HAL_IncTick+0x1c>)
 8000818:	6013      	str	r3, [r2, #0]
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	200000dc 	.word	0x200000dc
 8000828:	20000008 	.word	0x20000008

0800082c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return uwTick;
 8000830:	4b03      	ldr	r3, [pc, #12]	@ (8000840 <HAL_GetTick+0x14>)
 8000832:	681b      	ldr	r3, [r3, #0]
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	200000dc 	.word	0x200000dc

08000844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800086c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000876:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	60d3      	str	r3, [r2, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000890:	4b04      	ldr	r3, [pc, #16]	@ (80008a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	f003 0307 	and.w	r3, r3, #7
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	db0b      	blt.n	80008d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	f003 021f 	and.w	r2, r3, #31
 80008c0:	4907      	ldr	r1, [pc, #28]	@ (80008e0 <__NVIC_EnableIRQ+0x38>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	095b      	lsrs	r3, r3, #5
 80008c8:	2001      	movs	r0, #1
 80008ca:	fa00 f202 	lsl.w	r2, r0, r2
 80008ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000e100 	.word	0xe000e100

080008e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	db0a      	blt.n	800090e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	490c      	ldr	r1, [pc, #48]	@ (8000930 <__NVIC_SetPriority+0x4c>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	0112      	lsls	r2, r2, #4
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	440b      	add	r3, r1
 8000908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800090c:	e00a      	b.n	8000924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4908      	ldr	r1, [pc, #32]	@ (8000934 <__NVIC_SetPriority+0x50>)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	3b04      	subs	r3, #4
 800091c:	0112      	lsls	r2, r2, #4
 800091e:	b2d2      	uxtb	r2, r2
 8000920:	440b      	add	r3, r1
 8000922:	761a      	strb	r2, [r3, #24]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000e100 	.word	0xe000e100
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000938:	b480      	push	{r7}
 800093a:	b089      	sub	sp, #36	@ 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f1c3 0307 	rsb	r3, r3, #7
 8000952:	2b04      	cmp	r3, #4
 8000954:	bf28      	it	cs
 8000956:	2304      	movcs	r3, #4
 8000958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3304      	adds	r3, #4
 800095e:	2b06      	cmp	r3, #6
 8000960:	d902      	bls.n	8000968 <NVIC_EncodePriority+0x30>
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3b03      	subs	r3, #3
 8000966:	e000      	b.n	800096a <NVIC_EncodePriority+0x32>
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43da      	mvns	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	401a      	ands	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000980:	f04f 31ff 	mov.w	r1, #4294967295
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	43d9      	mvns	r1, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	4313      	orrs	r3, r2
         );
}
 8000992:	4618      	mov	r0, r3
 8000994:	3724      	adds	r7, #36	@ 0x24
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009b0:	d301      	bcc.n	80009b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00f      	b.n	80009d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b6:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <SysTick_Config+0x40>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009be:	210f      	movs	r1, #15
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f7ff ff8e 	bl	80008e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c8:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <SysTick_Config+0x40>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ce:	4b04      	ldr	r3, [pc, #16]	@ (80009e0 <SysTick_Config+0x40>)
 80009d0:	2207      	movs	r2, #7
 80009d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	e000e010 	.word	0xe000e010

080009e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ff29 	bl	8000844 <__NVIC_SetPriorityGrouping>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a08:	f7ff ff40 	bl	800088c <__NVIC_GetPriorityGrouping>
 8000a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	68b9      	ldr	r1, [r7, #8]
 8000a12:	6978      	ldr	r0, [r7, #20]
 8000a14:	f7ff ff90 	bl	8000938 <NVIC_EncodePriority>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff5f 	bl	80008e4 <__NVIC_SetPriority>
}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff33 	bl	80008a8 <__NVIC_EnableIRQ>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ffa4 	bl	80009a0 <SysTick_Config>
 8000a58:	4603      	mov	r3, r0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d00d      	beq.n	8000a96 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2201      	movs	r2, #1
 8000a84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]
 8000a94:	e047      	b.n	8000b26 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f022 020e 	bic.w	r2, r2, #14
 8000aa4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f022 0201 	bic.w	r2, r2, #1
 8000ab4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ac0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ac4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	f003 021f 	and.w	r2, r3, #31
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000ae2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d00c      	beq.n	8000b06 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000af6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000afa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000b04:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	4798      	blx	r3
    }
  }
  return status;
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000b3e:	b2db      	uxtb	r3, r3
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b5a:	e15a      	b.n	8000e12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	2101      	movs	r1, #1
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 814c 	beq.w	8000e0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d005      	beq.n	8000b8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d130      	bne.n	8000bee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	2203      	movs	r2, #3
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	68da      	ldr	r2, [r3, #12]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	091b      	lsrs	r3, r3, #4
 8000bd8:	f003 0201 	and.w	r2, r3, #1
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 0303 	and.w	r3, r3, #3
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d017      	beq.n	8000c2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	2203      	movs	r2, #3
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d123      	bne.n	8000c7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	08da      	lsrs	r2, r3, #3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3208      	adds	r2, #8
 8000c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	220f      	movs	r2, #15
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	691a      	ldr	r2, [r3, #16]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f003 0307 	and.w	r3, r3, #7
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	08da      	lsrs	r2, r3, #3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3208      	adds	r2, #8
 8000c78:	6939      	ldr	r1, [r7, #16]
 8000c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	2203      	movs	r2, #3
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0203 	and.w	r2, r3, #3
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 80a6 	beq.w	8000e0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc0:	4b5b      	ldr	r3, [pc, #364]	@ (8000e30 <HAL_GPIO_Init+0x2e4>)
 8000cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc4:	4a5a      	ldr	r2, [pc, #360]	@ (8000e30 <HAL_GPIO_Init+0x2e4>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ccc:	4b58      	ldr	r3, [pc, #352]	@ (8000e30 <HAL_GPIO_Init+0x2e4>)
 8000cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cd8:	4a56      	ldr	r2, [pc, #344]	@ (8000e34 <HAL_GPIO_Init+0x2e8>)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	089b      	lsrs	r3, r3, #2
 8000cde:	3302      	adds	r3, #2
 8000ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d02:	d01f      	beq.n	8000d44 <HAL_GPIO_Init+0x1f8>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a4c      	ldr	r2, [pc, #304]	@ (8000e38 <HAL_GPIO_Init+0x2ec>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d019      	beq.n	8000d40 <HAL_GPIO_Init+0x1f4>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a4b      	ldr	r2, [pc, #300]	@ (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d013      	beq.n	8000d3c <HAL_GPIO_Init+0x1f0>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a4a      	ldr	r2, [pc, #296]	@ (8000e40 <HAL_GPIO_Init+0x2f4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d00d      	beq.n	8000d38 <HAL_GPIO_Init+0x1ec>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a49      	ldr	r2, [pc, #292]	@ (8000e44 <HAL_GPIO_Init+0x2f8>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d007      	beq.n	8000d34 <HAL_GPIO_Init+0x1e8>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a48      	ldr	r2, [pc, #288]	@ (8000e48 <HAL_GPIO_Init+0x2fc>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d101      	bne.n	8000d30 <HAL_GPIO_Init+0x1e4>
 8000d2c:	2305      	movs	r3, #5
 8000d2e:	e00a      	b.n	8000d46 <HAL_GPIO_Init+0x1fa>
 8000d30:	2306      	movs	r3, #6
 8000d32:	e008      	b.n	8000d46 <HAL_GPIO_Init+0x1fa>
 8000d34:	2304      	movs	r3, #4
 8000d36:	e006      	b.n	8000d46 <HAL_GPIO_Init+0x1fa>
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e004      	b.n	8000d46 <HAL_GPIO_Init+0x1fa>
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	e002      	b.n	8000d46 <HAL_GPIO_Init+0x1fa>
 8000d40:	2301      	movs	r3, #1
 8000d42:	e000      	b.n	8000d46 <HAL_GPIO_Init+0x1fa>
 8000d44:	2300      	movs	r3, #0
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	f002 0203 	and.w	r2, r2, #3
 8000d4c:	0092      	lsls	r2, r2, #2
 8000d4e:	4093      	lsls	r3, r2
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d56:	4937      	ldr	r1, [pc, #220]	@ (8000e34 <HAL_GPIO_Init+0x2e8>)
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	089b      	lsrs	r3, r3, #2
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d64:	4b39      	ldr	r3, [pc, #228]	@ (8000e4c <HAL_GPIO_Init+0x300>)
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d88:	4a30      	ldr	r2, [pc, #192]	@ (8000e4c <HAL_GPIO_Init+0x300>)
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e4c <HAL_GPIO_Init+0x300>)
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000db2:	4a26      	ldr	r2, [pc, #152]	@ (8000e4c <HAL_GPIO_Init+0x300>)
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000db8:	4b24      	ldr	r3, [pc, #144]	@ (8000e4c <HAL_GPIO_Init+0x300>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e4c <HAL_GPIO_Init+0x300>)
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <HAL_GPIO_Init+0x300>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e06:	4a11      	ldr	r2, [pc, #68]	@ (8000e4c <HAL_GPIO_Init+0x300>)
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f47f ae9d 	bne.w	8000b5c <HAL_GPIO_Init+0x10>
  }
}
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	371c      	adds	r7, #28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010000 	.word	0x40010000
 8000e38:	48000400 	.word	0x48000400
 8000e3c:	48000800 	.word	0x48000800
 8000e40:	48000c00 	.word	0x48000c00
 8000e44:	48001000 	.word	0x48001000
 8000e48:	48001400 	.word	0x48001400
 8000e4c:	40010400 	.word	0x40010400

08000e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e08d      	b.n	8000f7e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d106      	bne.n	8000e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fb40 	bl	80004fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2224      	movs	r2, #36	@ 0x24
 8000e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0201 	bic.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000ea0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000eb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d107      	bne.n	8000eca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	e006      	b.n	8000ed8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000ed6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d108      	bne.n	8000ef2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	e007      	b.n	8000f02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	6812      	ldr	r2, [r2, #0]
 8000f0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69d9      	ldr	r1, [r3, #28]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a1a      	ldr	r2, [r3, #32]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0201 	orr.w	r2, r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2220      	movs	r2, #32
 8000f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	461a      	mov	r2, r3
 8000f94:	460b      	mov	r3, r1
 8000f96:	817b      	strh	r3, [r7, #10]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b20      	cmp	r3, #32
 8000fa6:	f040 80fd 	bne.w	80011a4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d101      	bne.n	8000fb8 <HAL_I2C_Master_Transmit+0x30>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e0f6      	b.n	80011a6 <HAL_I2C_Master_Transmit+0x21e>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fc0:	f7ff fc34 	bl	800082c <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2319      	movs	r3, #25
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f001 fa8f 	bl	80024f6 <I2C_WaitOnFlagUntilTimeout>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e0e1      	b.n	80011a6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2221      	movs	r2, #33	@ 0x21
 8000fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2210      	movs	r2, #16
 8000fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	893a      	ldrh	r2, [r7, #8]
 8001002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2200      	movs	r2, #0
 8001008:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800100e:	b29b      	uxth	r3, r3
 8001010:	2bff      	cmp	r3, #255	@ 0xff
 8001012:	d906      	bls.n	8001022 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	22ff      	movs	r2, #255	@ 0xff
 8001018:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800101a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	e007      	b.n	8001032 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001026:	b29a      	uxth	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800102c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001030:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001036:	2b00      	cmp	r3, #0
 8001038:	d024      	beq.n	8001084 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001054:	b29b      	uxth	r3, r3
 8001056:	3b01      	subs	r3, #1
 8001058:	b29a      	uxth	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001062:	3b01      	subs	r3, #1
 8001064:	b29a      	uxth	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800106e:	b2db      	uxtb	r3, r3
 8001070:	3301      	adds	r3, #1
 8001072:	b2da      	uxtb	r2, r3
 8001074:	8979      	ldrh	r1, [r7, #10]
 8001076:	4b4e      	ldr	r3, [pc, #312]	@ (80011b0 <HAL_I2C_Master_Transmit+0x228>)
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f001 fbfd 	bl	800287c <I2C_TransferConfig>
 8001082:	e066      	b.n	8001152 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001088:	b2da      	uxtb	r2, r3
 800108a:	8979      	ldrh	r1, [r7, #10]
 800108c:	4b48      	ldr	r3, [pc, #288]	@ (80011b0 <HAL_I2C_Master_Transmit+0x228>)
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f001 fbf2 	bl	800287c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001098:	e05b      	b.n	8001152 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	6a39      	ldr	r1, [r7, #32]
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f001 fa82 	bl	80025a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e07b      	b.n	80011a6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b2:	781a      	ldrb	r2, [r3, #0]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	3b01      	subs	r3, #1
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010d6:	3b01      	subs	r3, #1
 80010d8:	b29a      	uxth	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d034      	beq.n	8001152 <HAL_I2C_Master_Transmit+0x1ca>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d130      	bne.n	8001152 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	2200      	movs	r2, #0
 80010f8:	2180      	movs	r1, #128	@ 0x80
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f001 f9fb 	bl	80024f6 <I2C_WaitOnFlagUntilTimeout>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e04d      	b.n	80011a6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800110e:	b29b      	uxth	r3, r3
 8001110:	2bff      	cmp	r3, #255	@ 0xff
 8001112:	d90e      	bls.n	8001132 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	22ff      	movs	r2, #255	@ 0xff
 8001118:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800111e:	b2da      	uxtb	r2, r3
 8001120:	8979      	ldrh	r1, [r7, #10]
 8001122:	2300      	movs	r3, #0
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f001 fba6 	bl	800287c <I2C_TransferConfig>
 8001130:	e00f      	b.n	8001152 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001136:	b29a      	uxth	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001140:	b2da      	uxtb	r2, r3
 8001142:	8979      	ldrh	r1, [r7, #10]
 8001144:	2300      	movs	r3, #0
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f001 fb95 	bl	800287c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001156:	b29b      	uxth	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d19e      	bne.n	800109a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	6a39      	ldr	r1, [r7, #32]
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f001 fa68 	bl	8002636 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e01a      	b.n	80011a6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2220      	movs	r2, #32
 8001176:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6859      	ldr	r1, [r3, #4]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <HAL_I2C_Master_Transmit+0x22c>)
 8001184:	400b      	ands	r3, r1
 8001186:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2220      	movs	r2, #32
 800118c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	e000      	b.n	80011a6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80011a4:	2302      	movs	r3, #2
  }
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	80002000 	.word	0x80002000
 80011b4:	fe00e800 	.word	0xfe00e800

080011b8 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	4613      	mov	r3, r2
 80011c4:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b20      	cmp	r3, #32
 80011d0:	d139      	bne.n	8001246 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_I2C_Slave_Receive_IT+0x28>
 80011dc:	2302      	movs	r3, #2
 80011de:	e033      	b.n	8001248 <HAL_I2C_Slave_Receive_IT+0x90>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2222      	movs	r2, #34	@ 0x22
 80011ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2220      	movs	r2, #32
 80011f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2200      	movs	r2, #0
 80011fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800120c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	88fa      	ldrh	r2, [r7, #6]
 8001218:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800121e:	b29a      	uxth	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <HAL_I2C_Slave_Receive_IT+0x98>)
 8001228:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4a09      	ldr	r2, [pc, #36]	@ (8001254 <HAL_I2C_Slave_Receive_IT+0x9c>)
 800122e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001238:	f248 0102 	movw	r1, #32770	@ 0x8002
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f001 fb4f 	bl	80028e0 <I2C_Enable_IRQ>

    return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001246:	2302      	movs	r3, #2
  }
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	ffff0000 	.word	0xffff0000
 8001254:	08001349 	.word	0x08001349

08001258 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	4798      	blx	r3
  }
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	70fb      	strb	r3, [r7, #3]
 80012d4:	4613      	mov	r3, r2
 80012d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001358:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <I2C_Slave_ISR_IT+0x24>
 8001368:	2302      	movs	r3, #2
 800136a:	e0e2      	b.n	8001532 <I2C_Slave_ISR_IT+0x1ea>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f003 0320 	and.w	r3, r3, #32
 800137a:	2b00      	cmp	r3, #0
 800137c:	d009      	beq.n	8001392 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001388:	6939      	ldr	r1, [r7, #16]
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f000 fda2 	bl	8001ed4 <I2C_ITSlaveCplt>
 8001390:	e0ca      	b.n	8001528 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	2b00      	cmp	r3, #0
 800139a:	d04b      	beq.n	8001434 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d046      	beq.n	8001434 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d128      	bne.n	8001402 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b28      	cmp	r3, #40	@ 0x28
 80013ba:	d108      	bne.n	80013ce <I2C_Slave_ISR_IT+0x86>
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80013c2:	d104      	bne.n	80013ce <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80013c4:	6939      	ldr	r1, [r7, #16]
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 fee8 	bl	800219c <I2C_ITListenCplt>
 80013cc:	e031      	b.n	8001432 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b29      	cmp	r3, #41	@ 0x29
 80013d8:	d10e      	bne.n	80013f8 <I2C_Slave_ISR_IT+0xb0>
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80013e0:	d00a      	beq.n	80013f8 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2210      	movs	r2, #16
 80013e8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f001 f841 	bl	8002472 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f000 fc4b 	bl	8001c8c <I2C_ITSlaveSeqCplt>
 80013f6:	e01c      	b.n	8001432 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2210      	movs	r2, #16
 80013fe:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001400:	e08f      	b.n	8001522 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2210      	movs	r2, #16
 8001408:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140e:	f043 0204 	orr.w	r2, r3, #4
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <I2C_Slave_ISR_IT+0xdc>
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001422:	d17e      	bne.n	8001522 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001428:	4619      	mov	r1, r3
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 ff0a 	bl	8002244 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001430:	e077      	b.n	8001522 <I2C_Slave_ISR_IT+0x1da>
 8001432:	e076      	b.n	8001522 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	2b00      	cmp	r3, #0
 800143c:	d02f      	beq.n	800149e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001444:	2b00      	cmp	r3, #0
 8001446:	d02a      	beq.n	800149e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800144c:	b29b      	uxth	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d018      	beq.n	8001484 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800146e:	3b01      	subs	r3, #1
 8001470:	b29a      	uxth	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800147a:	b29b      	uxth	r3, r3
 800147c:	3b01      	subs	r3, #1
 800147e:	b29a      	uxth	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001488:	b29b      	uxth	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d14b      	bne.n	8001526 <I2C_Slave_ISR_IT+0x1de>
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001494:	d047      	beq.n	8001526 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f000 fbf8 	bl	8001c8c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800149c:	e043      	b.n	8001526 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d009      	beq.n	80014bc <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d004      	beq.n	80014bc <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80014b2:	6939      	ldr	r1, [r7, #16]
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f000 fb28 	bl	8001b0a <I2C_ITAddrCplt>
 80014ba:	e035      	b.n	8001528 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d030      	beq.n	8001528 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d02b      	beq.n	8001528 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d018      	beq.n	800150c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014de:	781a      	ldrb	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	3b01      	subs	r3, #1
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001502:	3b01      	subs	r3, #1
 8001504:	b29a      	uxth	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	851a      	strh	r2, [r3, #40]	@ 0x28
 800150a:	e00d      	b.n	8001528 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001512:	d002      	beq.n	800151a <I2C_Slave_ISR_IT+0x1d2>
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d106      	bne.n	8001528 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 fbb6 	bl	8001c8c <I2C_ITSlaveSeqCplt>
 8001520:	e002      	b.n	8001528 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8001522:	bf00      	nop
 8001524:	e000      	b.n	8001528 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8001526:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b088      	sub	sp, #32
 800153e:	af02      	add	r7, sp, #8
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800154c:	2b01      	cmp	r3, #1
 800154e:	d101      	bne.n	8001554 <I2C_Master_ISR_DMA+0x1a>
 8001550:	2302      	movs	r3, #2
 8001552:	e0d9      	b.n	8001708 <I2C_Master_ISR_DMA+0x1ce>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2b00      	cmp	r3, #0
 8001564:	d016      	beq.n	8001594 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800156c:	2b00      	cmp	r3, #0
 800156e:	d011      	beq.n	8001594 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2210      	movs	r2, #16
 8001576:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157c:	f043 0204 	orr.w	r2, r3, #4
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001584:	2120      	movs	r1, #32
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f001 f9aa 	bl	80028e0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f000 ff70 	bl	8002472 <I2C_Flush_TXDR>
 8001592:	e0b4      	b.n	80016fe <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159a:	2b00      	cmp	r3, #0
 800159c:	d071      	beq.n	8001682 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d06c      	beq.n	8001682 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015b6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d04e      	beq.n	8001660 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015ce:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	2bff      	cmp	r3, #255	@ 0xff
 80015d8:	d906      	bls.n	80015e8 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	22ff      	movs	r2, #255	@ 0xff
 80015de:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80015e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	e010      	b.n	800160a <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80015fa:	d003      	beq.n	8001604 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	e002      	b.n	800160a <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001604:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001608:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800160e:	b2da      	uxtb	r2, r3
 8001610:	8a79      	ldrh	r1, [r7, #18]
 8001612:	2300      	movs	r3, #0
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f001 f92f 	bl	800287c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001622:	b29a      	uxth	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	b29a      	uxth	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b22      	cmp	r3, #34	@ 0x22
 800163a:	d108      	bne.n	800164e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800164a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800164c:	e057      	b.n	80016fe <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800165c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800165e:	e04e      	b.n	80016fe <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800166e:	d003      	beq.n	8001678 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 face 	bl	8001c12 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001676:	e042      	b.n	80016fe <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001678:	2140      	movs	r1, #64	@ 0x40
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 fde2 	bl	8002244 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001680:	e03d      	b.n	80016fe <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001688:	2b00      	cmp	r3, #0
 800168a:	d028      	beq.n	80016de <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001692:	2b00      	cmp	r3, #0
 8001694:	d023      	beq.n	80016de <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800169a:	b29b      	uxth	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d119      	bne.n	80016d4 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80016ae:	d025      	beq.n	80016fc <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80016b8:	d108      	bne.n	80016cc <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80016c8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80016ca:	e017      	b.n	80016fc <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f000 faa0 	bl	8001c12 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80016d2:	e013      	b.n	80016fc <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80016d4:	2140      	movs	r1, #64	@ 0x40
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 fdb4 	bl	8002244 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80016dc:	e00e      	b.n	80016fc <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00a      	beq.n	80016fe <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80016f2:	68b9      	ldr	r1, [r7, #8]
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 fb25 	bl	8001d44 <I2C_ITMasterCplt>
 80016fa:	e000      	b.n	80016fe <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80016fc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af02      	add	r7, sp, #8
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800171c:	4b8d      	ldr	r3, [pc, #564]	@ (8001954 <I2C_Mem_ISR_DMA+0x244>)
 800171e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <I2C_Mem_ISR_DMA+0x1e>
 800172a:	2302      	movs	r3, #2
 800172c:	e10e      	b.n	800194c <I2C_Mem_ISR_DMA+0x23c>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	2b00      	cmp	r3, #0
 800173e:	d016      	beq.n	800176e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001746:	2b00      	cmp	r3, #0
 8001748:	d011      	beq.n	800176e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2210      	movs	r2, #16
 8001750:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	f043 0204 	orr.w	r2, r3, #4
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800175e:	2120      	movs	r1, #32
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f001 f8bd 	bl	80028e0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 fe83 	bl	8002472 <I2C_Flush_TXDR>
 800176c:	e0e9      	b.n	8001942 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00e      	beq.n	8001796 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800177e:	2b00      	cmp	r3, #0
 8001780:	d009      	beq.n	8001796 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800178a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f04f 32ff 	mov.w	r2, #4294967295
 8001792:	651a      	str	r2, [r3, #80]	@ 0x50
 8001794:	e0d5      	b.n	8001942 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800179c:	2b00      	cmp	r3, #0
 800179e:	d05f      	beq.n	8001860 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d05a      	beq.n	8001860 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80017aa:	2101      	movs	r1, #1
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f001 f91b 	bl	80029e8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80017b2:	2110      	movs	r1, #16
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f001 f893 	bl	80028e0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017be:	b29b      	uxth	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d048      	beq.n	8001856 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2bff      	cmp	r3, #255	@ 0xff
 80017cc:	d910      	bls.n	80017f0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	22ff      	movs	r2, #255	@ 0xff
 80017d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d8:	b299      	uxth	r1, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	2300      	movs	r3, #0
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f001 f847 	bl	800287c <I2C_TransferConfig>
 80017ee:	e011      	b.n	8001814 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fe:	b299      	uxth	r1, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001804:	b2da      	uxtb	r2, r3
 8001806:	2300      	movs	r3, #0
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f001 f834 	bl	800287c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b22      	cmp	r3, #34	@ 0x22
 8001830:	d108      	bne.n	8001844 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001840:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001842:	e07e      	b.n	8001942 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001852:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001854:	e075      	b.n	8001942 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001856:	2140      	movs	r1, #64	@ 0x40
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 fcf3 	bl	8002244 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800185e:	e070      	b.n	8001942 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001866:	2b00      	cmp	r3, #0
 8001868:	d05d      	beq.n	8001926 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001870:	2b00      	cmp	r3, #0
 8001872:	d058      	beq.n	8001926 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001874:	2101      	movs	r1, #1
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f001 f8b6 	bl	80029e8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800187c:	2110      	movs	r1, #16
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f001 f82e 	bl	80028e0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b22      	cmp	r3, #34	@ 0x22
 800188e:	d101      	bne.n	8001894 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8001890:	4b31      	ldr	r3, [pc, #196]	@ (8001958 <I2C_Mem_ISR_DMA+0x248>)
 8001892:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001898:	b29b      	uxth	r3, r3
 800189a:	2bff      	cmp	r3, #255	@ 0xff
 800189c:	d910      	bls.n	80018c0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	22ff      	movs	r2, #255	@ 0xff
 80018a2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a8:	b299      	uxth	r1, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 ffdf 	bl	800287c <I2C_TransferConfig>
 80018be:	e011      	b.n	80018e4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ce:	b299      	uxth	r1, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 ffcc 	bl	800287c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b22      	cmp	r3, #34	@ 0x22
 8001900:	d108      	bne.n	8001914 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001910:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001912:	e016      	b.n	8001942 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001922:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001924:	e00d      	b.n	8001942 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 fa01 	bl	8001d44 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	80002000 	.word	0x80002000
 8001958:	80002400 	.word	0x80002400

0800195c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <I2C_Slave_ISR_DMA+0x24>
 800197c:	2302      	movs	r3, #2
 800197e:	e0c0      	b.n	8001b02 <I2C_Slave_ISR_DMA+0x1a6>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f003 0320 	and.w	r3, r3, #32
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 fa98 	bl	8001ed4 <I2C_ITSlaveCplt>
 80019a4:	e0a8      	b.n	8001af8 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 8095 	beq.w	8001adc <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 808f 	beq.w	8001adc <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d104      	bne.n	80019d2 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d07d      	beq.n	8001ace <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00c      	beq.n	80019f4 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d007      	beq.n	80019f4 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80019f0:	2301      	movs	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00c      	beq.n	8001a16 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8001a12:	2301      	movs	r3, #1
 8001a14:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d128      	bne.n	8001a6e <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b28      	cmp	r3, #40	@ 0x28
 8001a26:	d108      	bne.n	8001a3a <I2C_Slave_ISR_DMA+0xde>
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a2e:	d104      	bne.n	8001a3a <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 fbb2 	bl	800219c <I2C_ITListenCplt>
 8001a38:	e048      	b.n	8001acc <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b29      	cmp	r3, #41	@ 0x29
 8001a44:	d10e      	bne.n	8001a64 <I2C_Slave_ISR_DMA+0x108>
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a4c:	d00a      	beq.n	8001a64 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2210      	movs	r2, #16
 8001a54:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 fd0b 	bl	8002472 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 f915 	bl	8001c8c <I2C_ITSlaveSeqCplt>
 8001a62:	e033      	b.n	8001acc <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2210      	movs	r2, #16
 8001a6a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001a6c:	e034      	b.n	8001ad8 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2210      	movs	r2, #16
 8001a74:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	f043 0204 	orr.w	r2, r3, #4
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a88:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <I2C_Slave_ISR_DMA+0x13c>
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a96:	d11f      	bne.n	8001ad8 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001a98:	7dfb      	ldrb	r3, [r7, #23]
 8001a9a:	2b21      	cmp	r3, #33	@ 0x21
 8001a9c:	d002      	beq.n	8001aa4 <I2C_Slave_ISR_DMA+0x148>
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	2b29      	cmp	r3, #41	@ 0x29
 8001aa2:	d103      	bne.n	8001aac <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2221      	movs	r2, #33	@ 0x21
 8001aa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001aaa:	e008      	b.n	8001abe <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	2b22      	cmp	r3, #34	@ 0x22
 8001ab0:	d002      	beq.n	8001ab8 <I2C_Slave_ISR_DMA+0x15c>
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
 8001ab4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ab6:	d102      	bne.n	8001abe <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2222      	movs	r2, #34	@ 0x22
 8001abc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 fbbd 	bl	8002244 <I2C_ITError>
      if (treatdmanack == 1U)
 8001aca:	e005      	b.n	8001ad8 <I2C_Slave_ISR_DMA+0x17c>
 8001acc:	e004      	b.n	8001ad8 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2210      	movs	r2, #16
 8001ad4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001ad6:	e00f      	b.n	8001af8 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8001ad8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001ada:	e00d      	b.n	8001af8 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d008      	beq.n	8001af8 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 f809 	bl	8001b0a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3720      	adds	r7, #32
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001b20:	2b28      	cmp	r3, #40	@ 0x28
 8001b22:	d16a      	bne.n	8001bfa <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	0c1b      	lsrs	r3, r3, #16
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	0c1b      	lsrs	r3, r3, #16
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001b42:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b50:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001b5e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d138      	bne.n	8001bda <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001b68:	897b      	ldrh	r3, [r7, #10]
 8001b6a:	09db      	lsrs	r3, r3, #7
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	89bb      	ldrh	r3, [r7, #12]
 8001b70:	4053      	eors	r3, r2
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	f003 0306 	and.w	r3, r3, #6
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d11c      	bne.n	8001bb6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001b7c:	897b      	ldrh	r3, [r7, #10]
 8001b7e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d13b      	bne.n	8001c0a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001ba8:	89ba      	ldrh	r2, [r7, #12]
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	4619      	mov	r1, r3
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff fb8a 	bl	80012c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001bb4:	e029      	b.n	8001c0a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001bb6:	893b      	ldrh	r3, [r7, #8]
 8001bb8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001bba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 ff12 	bl	80029e8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001bcc:	89ba      	ldrh	r2, [r7, #12]
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fb78 	bl	80012c8 <HAL_I2C_AddrCallback>
}
 8001bd8:	e017      	b.n	8001c0a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001bda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 ff02 	bl	80029e8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001bec:	89ba      	ldrh	r2, [r7, #12]
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff fb68 	bl	80012c8 <HAL_I2C_AddrCallback>
}
 8001bf8:	e007      	b.n	8001c0a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2208      	movs	r2, #8
 8001c00:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b21      	cmp	r3, #33	@ 0x21
 8001c2c:	d115      	bne.n	8001c5a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2220      	movs	r2, #32
 8001c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2211      	movs	r2, #17
 8001c3a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001c42:	2101      	movs	r1, #1
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fecf 	bl	80029e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fb1a 	bl	800128c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001c58:	e014      	b.n	8001c84 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2212      	movs	r2, #18
 8001c66:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001c6e:	2102      	movs	r1, #2
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 feb9 	bl	80029e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fb0e 	bl	80012a0 <HAL_I2C_MasterRxCpltCallback>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d008      	beq.n	8001cc0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	e00c      	b.n	8001cda <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cd8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b29      	cmp	r3, #41	@ 0x29
 8001ce4:	d112      	bne.n	8001d0c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2228      	movs	r2, #40	@ 0x28
 8001cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2221      	movs	r2, #33	@ 0x21
 8001cf2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 fe76 	bl	80029e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fad5 	bl	80012b4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001d0a:	e017      	b.n	8001d3c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d16:	d111      	bne.n	8001d3c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2228      	movs	r2, #40	@ 0x28
 8001d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2222      	movs	r2, #34	@ 0x22
 8001d24:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001d26:	2102      	movs	r1, #2
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fe5d 	bl	80029e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe fba0 	bl	800047c <HAL_I2C_SlaveRxCpltCallback>
}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2220      	movs	r2, #32
 8001d58:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b21      	cmp	r3, #33	@ 0x21
 8001d64:	d107      	bne.n	8001d76 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d66:	2101      	movs	r1, #1
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fe3d 	bl	80029e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2211      	movs	r2, #17
 8001d72:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d74:	e00c      	b.n	8001d90 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b22      	cmp	r3, #34	@ 0x22
 8001d80:	d106      	bne.n	8001d90 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001d82:	2102      	movs	r1, #2
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fe2f 	bl	80029e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2212      	movs	r2, #18
 8001d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6859      	ldr	r1, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4b4c      	ldr	r3, [pc, #304]	@ (8001ecc <I2C_ITMasterCplt+0x188>)
 8001d9c:	400b      	ands	r3, r1
 8001d9e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a49      	ldr	r2, [pc, #292]	@ (8001ed0 <I2C_ITMasterCplt+0x18c>)
 8001daa:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2210      	movs	r2, #16
 8001dbc:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	f043 0204 	orr.w	r2, r3, #4
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b60      	cmp	r3, #96	@ 0x60
 8001dd4:	d10a      	bne.n	8001dec <I2C_ITMasterCplt+0xa8>
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8001dea:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 fb40 	bl	8002472 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b60      	cmp	r3, #96	@ 0x60
 8001e02:	d002      	beq.n	8001e0a <I2C_ITMasterCplt+0xc6>
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d006      	beq.n	8001e18 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fa17 	bl	8002244 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001e16:	e054      	b.n	8001ec2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b21      	cmp	r3, #33	@ 0x21
 8001e22:	d124      	bne.n	8001e6e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b40      	cmp	r3, #64	@ 0x40
 8001e3c:	d10b      	bne.n	8001e56 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff fa52 	bl	80012f8 <HAL_I2C_MemTxCpltCallback>
}
 8001e54:	e035      	b.n	8001ec2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fa10 	bl	800128c <HAL_I2C_MasterTxCpltCallback>
}
 8001e6c:	e029      	b.n	8001ec2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b22      	cmp	r3, #34	@ 0x22
 8001e78:	d123      	bne.n	8001ec2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b40      	cmp	r3, #64	@ 0x40
 8001e92:	d10b      	bne.n	8001eac <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff fa31 	bl	800130c <HAL_I2C_MemRxCpltCallback>
}
 8001eaa:	e00a      	b.n	8001ec2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff f9ef 	bl	80012a0 <HAL_I2C_MasterRxCpltCallback>
}
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	fe00e800 	.word	0xfe00e800
 8001ed0:	ffff0000 	.word	0xffff0000

08001ed4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eee:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2220      	movs	r2, #32
 8001efe:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f00:	7afb      	ldrb	r3, [r7, #11]
 8001f02:	2b21      	cmp	r3, #33	@ 0x21
 8001f04:	d002      	beq.n	8001f0c <I2C_ITSlaveCplt+0x38>
 8001f06:	7afb      	ldrb	r3, [r7, #11]
 8001f08:	2b29      	cmp	r3, #41	@ 0x29
 8001f0a:	d108      	bne.n	8001f1e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001f0c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fd69 	bl	80029e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2221      	movs	r2, #33	@ 0x21
 8001f1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f1c:	e019      	b.n	8001f52 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001f1e:	7afb      	ldrb	r3, [r7, #11]
 8001f20:	2b22      	cmp	r3, #34	@ 0x22
 8001f22:	d002      	beq.n	8001f2a <I2C_ITSlaveCplt+0x56>
 8001f24:	7afb      	ldrb	r3, [r7, #11]
 8001f26:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f28:	d108      	bne.n	8001f3c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001f2a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 fd5a 	bl	80029e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2222      	movs	r2, #34	@ 0x22
 8001f38:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f3a:	e00a      	b.n	8001f52 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001f3c:	7afb      	ldrb	r3, [r7, #11]
 8001f3e:	2b28      	cmp	r3, #40	@ 0x28
 8001f40:	d107      	bne.n	8001f52 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001f42:	f248 0103 	movw	r1, #32771	@ 0x8003
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fd4e 	bl	80029e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f60:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b89      	ldr	r3, [pc, #548]	@ (8002194 <I2C_ITSlaveCplt+0x2c0>)
 8001f6e:	400b      	ands	r3, r1
 8001f70:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fa7d 	bl	8002472 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d013      	beq.n	8001faa <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001f90:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01f      	beq.n	8001fda <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001fa8:	e017      	b.n	8001fda <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d012      	beq.n	8001fda <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fc2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f023 0304 	bic.w	r3, r3, #4
 8001fea:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00c      	beq.n	8002026 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002034:	f043 0204 	orr.w	r2, r3, #4
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b00      	cmp	r3, #0
 8002044:	d049      	beq.n	80020da <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800204c:	2b00      	cmp	r3, #0
 800204e:	d044      	beq.n	80020da <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d128      	bne.n	80020ac <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b28      	cmp	r3, #40	@ 0x28
 8002064:	d108      	bne.n	8002078 <I2C_ITSlaveCplt+0x1a4>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800206c:	d104      	bne.n	8002078 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800206e:	6979      	ldr	r1, [r7, #20]
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f893 	bl	800219c <I2C_ITListenCplt>
 8002076:	e030      	b.n	80020da <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b29      	cmp	r3, #41	@ 0x29
 8002082:	d10e      	bne.n	80020a2 <I2C_ITSlaveCplt+0x1ce>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800208a:	d00a      	beq.n	80020a2 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2210      	movs	r2, #16
 8002092:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f9ec 	bl	8002472 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff fdf6 	bl	8001c8c <I2C_ITSlaveSeqCplt>
 80020a0:	e01b      	b.n	80020da <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2210      	movs	r2, #16
 80020a8:	61da      	str	r2, [r3, #28]
 80020aa:	e016      	b.n	80020da <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2210      	movs	r2, #16
 80020b2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b8:	f043 0204 	orr.w	r2, r3, #4
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <I2C_ITSlaveCplt+0x1fa>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020cc:	d105      	bne.n	80020da <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	4619      	mov	r1, r3
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f8b5 	bl	8002244 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d010      	beq.n	8002112 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f4:	4619      	mov	r1, r3
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f8a4 	bl	8002244 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b28      	cmp	r3, #40	@ 0x28
 8002106:	d141      	bne.n	800218c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002108:	6979      	ldr	r1, [r7, #20]
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f846 	bl	800219c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002110:	e03c      	b.n	800218c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002116:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800211a:	d014      	beq.n	8002146 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff fdb5 	bl	8001c8c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a1c      	ldr	r2, [pc, #112]	@ (8002198 <I2C_ITSlaveCplt+0x2c4>)
 8002126:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff f8d0 	bl	80012e4 <HAL_I2C_ListenCpltCallback>
}
 8002144:	e022      	b.n	800218c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b22      	cmp	r3, #34	@ 0x22
 8002150:	d10e      	bne.n	8002170 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7fe f987 	bl	800047c <HAL_I2C_SlaveRxCpltCallback>
}
 800216e:	e00d      	b.n	800218c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff f894 	bl	80012b4 <HAL_I2C_SlaveTxCpltCallback>
}
 800218c:	bf00      	nop
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	fe00e800 	.word	0xfe00e800
 8002198:	ffff0000 	.word	0xffff0000

0800219c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a25      	ldr	r2, [pc, #148]	@ (8002240 <I2C_ITListenCplt+0xa4>)
 80021aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d022      	beq.n	8002218 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d012      	beq.n	8002218 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002210:	f043 0204 	orr.w	r2, r3, #4
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002218:	f248 0103 	movw	r1, #32771	@ 0x8003
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fbe3 	bl	80029e8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2210      	movs	r2, #16
 8002228:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff f856 	bl	80012e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	ffff0000 	.word	0xffff0000

08002244 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002254:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a6d      	ldr	r2, [pc, #436]	@ (8002418 <I2C_ITError+0x1d4>)
 8002262:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b28      	cmp	r3, #40	@ 0x28
 800227a:	d005      	beq.n	8002288 <I2C_ITError+0x44>
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b29      	cmp	r3, #41	@ 0x29
 8002280:	d002      	beq.n	8002288 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	2b2a      	cmp	r3, #42	@ 0x2a
 8002286:	d10b      	bne.n	80022a0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002288:	2103      	movs	r1, #3
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fbac 	bl	80029e8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2228      	movs	r2, #40	@ 0x28
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a60      	ldr	r2, [pc, #384]	@ (800241c <I2C_ITError+0x1d8>)
 800229c:	635a      	str	r2, [r3, #52]	@ 0x34
 800229e:	e030      	b.n	8002302 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80022a0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fb9f 	bl	80029e8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f8e1 	bl	8002472 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b60      	cmp	r3, #96	@ 0x60
 80022ba:	d01f      	beq.n	80022fc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	d114      	bne.n	80022fc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b10      	cmp	r3, #16
 80022de:	d109      	bne.n	80022f4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2210      	movs	r2, #16
 80022e6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ec:	f043 0204 	orr.w	r2, r3, #4
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2220      	movs	r2, #32
 80022fa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800230c:	2b00      	cmp	r3, #0
 800230e:	d039      	beq.n	8002384 <I2C_ITError+0x140>
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b11      	cmp	r3, #17
 8002314:	d002      	beq.n	800231c <I2C_ITError+0xd8>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b21      	cmp	r3, #33	@ 0x21
 800231a:	d133      	bne.n	8002384 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002326:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800232a:	d107      	bne.n	800233c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800233a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe fbf5 	bl	8000b30 <HAL_DMA_GetState>
 8002346:	4603      	mov	r3, r0
 8002348:	2b01      	cmp	r3, #1
 800234a:	d017      	beq.n	800237c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002350:	4a33      	ldr	r2, [pc, #204]	@ (8002420 <I2C_ITError+0x1dc>)
 8002352:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe fb7e 	bl	8000a62 <HAL_DMA_Abort_IT>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d04d      	beq.n	8002408 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002376:	4610      	mov	r0, r2
 8002378:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800237a:	e045      	b.n	8002408 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f851 	bl	8002424 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002382:	e041      	b.n	8002408 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002388:	2b00      	cmp	r3, #0
 800238a:	d039      	beq.n	8002400 <I2C_ITError+0x1bc>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b12      	cmp	r3, #18
 8002390:	d002      	beq.n	8002398 <I2C_ITError+0x154>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b22      	cmp	r3, #34	@ 0x22
 8002396:	d133      	bne.n	8002400 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023a6:	d107      	bne.n	80023b8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023b6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe fbb7 	bl	8000b30 <HAL_DMA_GetState>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d017      	beq.n	80023f8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023cc:	4a14      	ldr	r2, [pc, #80]	@ (8002420 <I2C_ITError+0x1dc>)
 80023ce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fb40 	bl	8000a62 <HAL_DMA_Abort_IT>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d011      	beq.n	800240c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023f2:	4610      	mov	r0, r2
 80023f4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80023f6:	e009      	b.n	800240c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f813 	bl	8002424 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80023fe:	e005      	b.n	800240c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f80f 	bl	8002424 <I2C_TreatErrorCallback>
  }
}
 8002406:	e002      	b.n	800240e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002408:	bf00      	nop
 800240a:	e000      	b.n	800240e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800240c:	bf00      	nop
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	ffff0000 	.word	0xffff0000
 800241c:	08001349 	.word	0x08001349
 8002420:	080024bb 	.word	0x080024bb

08002424 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b60      	cmp	r3, #96	@ 0x60
 8002436:	d10e      	bne.n	8002456 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe ff70 	bl	8001334 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002454:	e009      	b.n	800246a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7fe ff5b 	bl	8001320 <HAL_I2C_ErrorCallback>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b02      	cmp	r3, #2
 8002486:	d103      	bne.n	8002490 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2200      	movs	r2, #0
 800248e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b01      	cmp	r3, #1
 800249c:	d007      	beq.n	80024ae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699a      	ldr	r2, [r3, #24]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	619a      	str	r2, [r3, #24]
  }
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d4:	2200      	movs	r2, #0
 80024d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e4:	2200      	movs	r2, #0
 80024e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f7ff ff9b 	bl	8002424 <I2C_TreatErrorCallback>
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	4613      	mov	r3, r2
 8002504:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002506:	e03b      	b.n	8002580 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	6839      	ldr	r1, [r7, #0]
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f8d5 	bl	80026bc <I2C_IsErrorOccurred>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e041      	b.n	80025a0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002522:	d02d      	beq.n	8002580 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002524:	f7fe f982 	bl	800082c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d302      	bcc.n	800253a <I2C_WaitOnFlagUntilTimeout+0x44>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d122      	bne.n	8002580 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4013      	ands	r3, r2
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	429a      	cmp	r2, r3
 8002548:	bf0c      	ite	eq
 800254a:	2301      	moveq	r3, #1
 800254c:	2300      	movne	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	429a      	cmp	r2, r3
 8002556:	d113      	bne.n	8002580 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255c:	f043 0220 	orr.w	r2, r3, #32
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e00f      	b.n	80025a0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	4013      	ands	r3, r2
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	429a      	cmp	r2, r3
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	429a      	cmp	r2, r3
 800259c:	d0b4      	beq.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025b4:	e033      	b.n	800261e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f87e 	bl	80026bc <I2C_IsErrorOccurred>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e031      	b.n	800262e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d0:	d025      	beq.n	800261e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d2:	f7fe f92b 	bl	800082c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d302      	bcc.n	80025e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d11a      	bne.n	800261e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d013      	beq.n	800261e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	f043 0220 	orr.w	r2, r3, #32
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e007      	b.n	800262e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b02      	cmp	r3, #2
 800262a:	d1c4      	bne.n	80025b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002642:	e02f      	b.n	80026a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f837 	bl	80026bc <I2C_IsErrorOccurred>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e02d      	b.n	80026b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002658:	f7fe f8e8 	bl	800082c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	429a      	cmp	r2, r3
 8002666:	d302      	bcc.n	800266e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d11a      	bne.n	80026a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b20      	cmp	r3, #32
 800267a:	d013      	beq.n	80026a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002680:	f043 0220 	orr.w	r2, r3, #32
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e007      	b.n	80026b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	d1c8      	bne.n	8002644 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08a      	sub	sp, #40	@ 0x28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d068      	beq.n	80027ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2210      	movs	r2, #16
 80026ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026f0:	e049      	b.n	8002786 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d045      	beq.n	8002786 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026fa:	f7fe f897 	bl	800082c <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	429a      	cmp	r2, r3
 8002708:	d302      	bcc.n	8002710 <I2C_IsErrorOccurred+0x54>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d13a      	bne.n	8002786 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800271a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002722:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800272e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002732:	d121      	bne.n	8002778 <I2C_IsErrorOccurred+0xbc>
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800273a:	d01d      	beq.n	8002778 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	2b20      	cmp	r3, #32
 8002740:	d01a      	beq.n	8002778 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002750:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002752:	f7fe f86b 	bl	800082c <HAL_GetTick>
 8002756:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002758:	e00e      	b.n	8002778 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800275a:	f7fe f867 	bl	800082c <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b19      	cmp	r3, #25
 8002766:	d907      	bls.n	8002778 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	f043 0320 	orr.w	r3, r3, #32
 800276e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002776:	e006      	b.n	8002786 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b20      	cmp	r3, #32
 8002784:	d1e9      	bne.n	800275a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b20      	cmp	r3, #32
 8002792:	d003      	beq.n	800279c <I2C_IsErrorOccurred+0xe0>
 8002794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0aa      	beq.n	80026f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800279c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d103      	bne.n	80027ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2220      	movs	r2, #32
 80027aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	f043 0304 	orr.w	r3, r3, #4
 80027b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00b      	beq.n	80027e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	f043 0308 	orr.w	r3, r3, #8
 80027f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00b      	beq.n	8002828 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	f043 0302 	orr.w	r3, r3, #2
 8002816:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002820:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002828:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01c      	beq.n	800286a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f7ff fe1e 	bl	8002472 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6859      	ldr	r1, [r3, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <I2C_IsErrorOccurred+0x1bc>)
 8002842:	400b      	ands	r3, r1
 8002844:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	431a      	orrs	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800286a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800286e:	4618      	mov	r0, r3
 8002870:	3728      	adds	r7, #40	@ 0x28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	fe00e800 	.word	0xfe00e800

0800287c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	817b      	strh	r3, [r7, #10]
 800288a:	4613      	mov	r3, r2
 800288c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800288e:	897b      	ldrh	r3, [r7, #10]
 8002890:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002894:	7a7b      	ldrb	r3, [r7, #9]
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800289c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	0d5b      	lsrs	r3, r3, #21
 80028b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80028ba:	4b08      	ldr	r3, [pc, #32]	@ (80028dc <I2C_TransferConfig+0x60>)
 80028bc:	430b      	orrs	r3, r1
 80028be:	43db      	mvns	r3, r3
 80028c0:	ea02 0103 	and.w	r1, r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	03ff63ff 	.word	0x03ff63ff

080028e0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f4:	4a39      	ldr	r2, [pc, #228]	@ (80029dc <I2C_Enable_IRQ+0xfc>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d032      	beq.n	8002960 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80028fe:	4a38      	ldr	r2, [pc, #224]	@ (80029e0 <I2C_Enable_IRQ+0x100>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d02d      	beq.n	8002960 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002908:	4a36      	ldr	r2, [pc, #216]	@ (80029e4 <I2C_Enable_IRQ+0x104>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d028      	beq.n	8002960 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800290e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002912:	2b00      	cmp	r3, #0
 8002914:	da03      	bge.n	800291e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800291c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800291e:	887b      	ldrh	r3, [r7, #2]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800292e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002930:	887b      	ldrh	r3, [r7, #2]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002940:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002942:	887b      	ldrh	r3, [r7, #2]
 8002944:	2b10      	cmp	r3, #16
 8002946:	d103      	bne.n	8002950 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800294e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002950:	887b      	ldrh	r3, [r7, #2]
 8002952:	2b20      	cmp	r3, #32
 8002954:	d133      	bne.n	80029be <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f043 0320 	orr.w	r3, r3, #32
 800295c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800295e:	e02e      	b.n	80029be <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002960:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002964:	2b00      	cmp	r3, #0
 8002966:	da03      	bge.n	8002970 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800296e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002970:	887b      	ldrh	r3, [r7, #2]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002980:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002982:	887b      	ldrh	r3, [r7, #2]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002992:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002994:	887b      	ldrh	r3, [r7, #2]
 8002996:	2b10      	cmp	r3, #16
 8002998:	d103      	bne.n	80029a2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80029a0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80029a2:	887b      	ldrh	r3, [r7, #2]
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d103      	bne.n	80029b0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80029ae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80029b0:	887b      	ldrh	r3, [r7, #2]
 80029b2:	2b40      	cmp	r3, #64	@ 0x40
 80029b4:	d103      	bne.n	80029be <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029bc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6819      	ldr	r1, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]
}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	0800153b 	.word	0x0800153b
 80029e0:	0800195d 	.word	0x0800195d
 80029e4:	08001711 	.word	0x08001711

080029e8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80029f8:	887b      	ldrh	r3, [r7, #2]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00f      	beq.n	8002a22 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002a08:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a16:	2b28      	cmp	r3, #40	@ 0x28
 8002a18:	d003      	beq.n	8002a22 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002a20:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002a22:	887b      	ldrh	r3, [r7, #2]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00f      	beq.n	8002a4c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002a32:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a40:	2b28      	cmp	r3, #40	@ 0x28
 8002a42:	d003      	beq.n	8002a4c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002a4a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002a4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	da03      	bge.n	8002a5c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002a5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002a5c:	887b      	ldrh	r3, [r7, #2]
 8002a5e:	2b10      	cmp	r3, #16
 8002a60:	d103      	bne.n	8002a6a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002a68:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002a6a:	887b      	ldrh	r3, [r7, #2]
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d103      	bne.n	8002a78 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f043 0320 	orr.w	r3, r3, #32
 8002a76:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002a78:	887b      	ldrh	r3, [r7, #2]
 8002a7a:	2b40      	cmp	r3, #64	@ 0x40
 8002a7c:	d103      	bne.n	8002a86 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a84:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6819      	ldr	r1, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	400a      	ands	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	d138      	bne.n	8002b2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e032      	b.n	8002b2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2224      	movs	r2, #36	@ 0x24
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002af6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e000      	b.n	8002b2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b2c:	2302      	movs	r3, #2
  }
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d139      	bne.n	8002bc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e033      	b.n	8002bc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2224      	movs	r2, #36	@ 0x24
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d141      	bne.n	8002c66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002be2:	4b4b      	ldr	r3, [pc, #300]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bee:	d131      	bne.n	8002c54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bf0:	4b47      	ldr	r3, [pc, #284]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bf6:	4a46      	ldr	r2, [pc, #280]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c00:	4b43      	ldr	r3, [pc, #268]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c08:	4a41      	ldr	r2, [pc, #260]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c10:	4b40      	ldr	r3, [pc, #256]	@ (8002d14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2232      	movs	r2, #50	@ 0x32
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	0c9b      	lsrs	r3, r3, #18
 8002c22:	3301      	adds	r3, #1
 8002c24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c26:	e002      	b.n	8002c2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c2e:	4b38      	ldr	r3, [pc, #224]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3a:	d102      	bne.n	8002c42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f2      	bne.n	8002c28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c42:	4b33      	ldr	r3, [pc, #204]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c4e:	d158      	bne.n	8002d02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e057      	b.n	8002d04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c54:	4b2e      	ldr	r3, [pc, #184]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c5a:	4a2d      	ldr	r2, [pc, #180]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c64:	e04d      	b.n	8002d02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c6c:	d141      	bne.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c6e:	4b28      	ldr	r3, [pc, #160]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7a:	d131      	bne.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c7c:	4b24      	ldr	r3, [pc, #144]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c82:	4a23      	ldr	r2, [pc, #140]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c8c:	4b20      	ldr	r3, [pc, #128]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c94:	4a1e      	ldr	r2, [pc, #120]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2232      	movs	r2, #50	@ 0x32
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	0c9b      	lsrs	r3, r3, #18
 8002cae:	3301      	adds	r3, #1
 8002cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cb2:	e002      	b.n	8002cba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cba:	4b15      	ldr	r3, [pc, #84]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cc6:	d102      	bne.n	8002cce <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f2      	bne.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cce:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cda:	d112      	bne.n	8002d02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e011      	b.n	8002d04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002cf0:	e007      	b.n	8002d02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cf2:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cfa:	4a05      	ldr	r2, [pc, #20]	@ (8002d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	40007000 	.word	0x40007000
 8002d14:	20000000 	.word	0x20000000
 8002d18:	431bde83 	.word	0x431bde83

08002d1c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d20:	4b05      	ldr	r3, [pc, #20]	@ (8002d38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4a04      	ldr	r2, [pc, #16]	@ (8002d38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d2a:	6093      	str	r3, [r2, #8]
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40007000 	.word	0x40007000

08002d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e2fe      	b.n	800334c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d075      	beq.n	8002e46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5a:	4b97      	ldr	r3, [pc, #604]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d64:	4b94      	ldr	r3, [pc, #592]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2b0c      	cmp	r3, #12
 8002d72:	d102      	bne.n	8002d7a <HAL_RCC_OscConfig+0x3e>
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	d002      	beq.n	8002d80 <HAL_RCC_OscConfig+0x44>
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d10b      	bne.n	8002d98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d80:	4b8d      	ldr	r3, [pc, #564]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d05b      	beq.n	8002e44 <HAL_RCC_OscConfig+0x108>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d157      	bne.n	8002e44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e2d9      	b.n	800334c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da0:	d106      	bne.n	8002db0 <HAL_RCC_OscConfig+0x74>
 8002da2:	4b85      	ldr	r3, [pc, #532]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a84      	ldr	r2, [pc, #528]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e01d      	b.n	8002dec <HAL_RCC_OscConfig+0xb0>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x98>
 8002dba:	4b7f      	ldr	r3, [pc, #508]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a7e      	ldr	r2, [pc, #504]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	4b7c      	ldr	r3, [pc, #496]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a7b      	ldr	r2, [pc, #492]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	e00b      	b.n	8002dec <HAL_RCC_OscConfig+0xb0>
 8002dd4:	4b78      	ldr	r3, [pc, #480]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a77      	ldr	r2, [pc, #476]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	4b75      	ldr	r3, [pc, #468]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a74      	ldr	r2, [pc, #464]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002de6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d013      	beq.n	8002e1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fd fd1a 	bl	800082c <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7fd fd16 	bl	800082c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	@ 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e29e      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e0e:	4b6a      	ldr	r3, [pc, #424]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0xc0>
 8002e1a:	e014      	b.n	8002e46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fd fd06 	bl	800082c <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e24:	f7fd fd02 	bl	800082c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	@ 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e28a      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e36:	4b60      	ldr	r3, [pc, #384]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0xe8>
 8002e42:	e000      	b.n	8002e46 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d075      	beq.n	8002f3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e52:	4b59      	ldr	r3, [pc, #356]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e5c:	4b56      	ldr	r3, [pc, #344]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b0c      	cmp	r3, #12
 8002e6a:	d102      	bne.n	8002e72 <HAL_RCC_OscConfig+0x136>
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d002      	beq.n	8002e78 <HAL_RCC_OscConfig+0x13c>
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d11f      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e78:	4b4f      	ldr	r3, [pc, #316]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_OscConfig+0x154>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e25d      	b.n	800334c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e90:	4b49      	ldr	r3, [pc, #292]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	061b      	lsls	r3, r3, #24
 8002e9e:	4946      	ldr	r1, [pc, #280]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ea4:	4b45      	ldr	r3, [pc, #276]	@ (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fc73 	bl	8000794 <HAL_InitTick>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d043      	beq.n	8002f3c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e249      	b.n	800334c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d023      	beq.n	8002f08 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a3c      	ldr	r2, [pc, #240]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002ec6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fd fcae 	bl	800082c <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7fd fcaa 	bl	800082c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e232      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee6:	4b34      	ldr	r3, [pc, #208]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b31      	ldr	r3, [pc, #196]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	061b      	lsls	r3, r3, #24
 8002f00:	492d      	ldr	r1, [pc, #180]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
 8002f06:	e01a      	b.n	8002f3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f08:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002f0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fd fc8a 	bl	800082c <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f1c:	f7fd fc86 	bl	800082c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e20e      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f2e:	4b22      	ldr	r3, [pc, #136]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x1e0>
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d041      	beq.n	8002fce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01c      	beq.n	8002f8c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f52:	4b19      	ldr	r3, [pc, #100]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f58:	4a17      	ldr	r2, [pc, #92]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7fd fc63 	bl	800082c <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f6a:	f7fd fc5f 	bl	800082c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e1e7      	b.n	800334c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0ef      	beq.n	8002f6a <HAL_RCC_OscConfig+0x22e>
 8002f8a:	e020      	b.n	8002fce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f92:	4a09      	ldr	r2, [pc, #36]	@ (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fd fc46 	bl	800082c <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fa2:	e00d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa4:	f7fd fc42 	bl	800082c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d906      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e1ca      	b.n	800334c <HAL_RCC_OscConfig+0x610>
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fc0:	4b8c      	ldr	r3, [pc, #560]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 8002fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1ea      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 80a6 	beq.w	8003128 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fe0:	4b84      	ldr	r3, [pc, #528]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x2b4>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x2b6>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00d      	beq.n	8003012 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffa:	4a7e      	ldr	r2, [pc, #504]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 8002ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003000:	6593      	str	r3, [r2, #88]	@ 0x58
 8003002:	4b7c      	ldr	r3, [pc, #496]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800300e:	2301      	movs	r3, #1
 8003010:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003012:	4b79      	ldr	r3, [pc, #484]	@ (80031f8 <HAL_RCC_OscConfig+0x4bc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800301a:	2b00      	cmp	r3, #0
 800301c:	d118      	bne.n	8003050 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800301e:	4b76      	ldr	r3, [pc, #472]	@ (80031f8 <HAL_RCC_OscConfig+0x4bc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a75      	ldr	r2, [pc, #468]	@ (80031f8 <HAL_RCC_OscConfig+0x4bc>)
 8003024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302a:	f7fd fbff 	bl	800082c <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003032:	f7fd fbfb 	bl	800082c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e183      	b.n	800334c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003044:	4b6c      	ldr	r3, [pc, #432]	@ (80031f8 <HAL_RCC_OscConfig+0x4bc>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d108      	bne.n	800306a <HAL_RCC_OscConfig+0x32e>
 8003058:	4b66      	ldr	r3, [pc, #408]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305e:	4a65      	ldr	r2, [pc, #404]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003068:	e024      	b.n	80030b4 <HAL_RCC_OscConfig+0x378>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b05      	cmp	r3, #5
 8003070:	d110      	bne.n	8003094 <HAL_RCC_OscConfig+0x358>
 8003072:	4b60      	ldr	r3, [pc, #384]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003078:	4a5e      	ldr	r2, [pc, #376]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 800307a:	f043 0304 	orr.w	r3, r3, #4
 800307e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003082:	4b5c      	ldr	r3, [pc, #368]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003088:	4a5a      	ldr	r2, [pc, #360]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003092:	e00f      	b.n	80030b4 <HAL_RCC_OscConfig+0x378>
 8003094:	4b57      	ldr	r3, [pc, #348]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309a:	4a56      	ldr	r2, [pc, #344]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030a4:	4b53      	ldr	r3, [pc, #332]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030aa:	4a52      	ldr	r2, [pc, #328]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 80030ac:	f023 0304 	bic.w	r3, r3, #4
 80030b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d016      	beq.n	80030ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030bc:	f7fd fbb6 	bl	800082c <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c2:	e00a      	b.n	80030da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c4:	f7fd fbb2 	bl	800082c <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e138      	b.n	800334c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030da:	4b46      	ldr	r3, [pc, #280]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0ed      	beq.n	80030c4 <HAL_RCC_OscConfig+0x388>
 80030e8:	e015      	b.n	8003116 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ea:	f7fd fb9f 	bl	800082c <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030f0:	e00a      	b.n	8003108 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f2:	f7fd fb9b 	bl	800082c <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003100:	4293      	cmp	r3, r2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e121      	b.n	800334c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003108:	4b3a      	ldr	r3, [pc, #232]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1ed      	bne.n	80030f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003116:	7ffb      	ldrb	r3, [r7, #31]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d105      	bne.n	8003128 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311c:	4b35      	ldr	r3, [pc, #212]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 800311e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003120:	4a34      	ldr	r2, [pc, #208]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 8003122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003126:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b00      	cmp	r3, #0
 8003132:	d03c      	beq.n	80031ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01c      	beq.n	8003176 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800313c:	4b2d      	ldr	r3, [pc, #180]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 800313e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003142:	4a2c      	ldr	r2, [pc, #176]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7fd fb6e 	bl	800082c <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003154:	f7fd fb6a 	bl	800082c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e0f2      	b.n	800334c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003166:	4b23      	ldr	r3, [pc, #140]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 8003168:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ef      	beq.n	8003154 <HAL_RCC_OscConfig+0x418>
 8003174:	e01b      	b.n	80031ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003176:	4b1f      	ldr	r3, [pc, #124]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 8003178:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800317c:	4a1d      	ldr	r2, [pc, #116]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003186:	f7fd fb51 	bl	800082c <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800318e:	f7fd fb4d 	bl	800082c <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e0d5      	b.n	800334c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031a0:	4b14      	ldr	r3, [pc, #80]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 80031a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1ef      	bne.n	800318e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 80c9 	beq.w	800334a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031b8:	4b0e      	ldr	r3, [pc, #56]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	f000 8083 	beq.w	80032cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d15e      	bne.n	800328c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ce:	4b09      	ldr	r3, [pc, #36]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a08      	ldr	r2, [pc, #32]	@ (80031f4 <HAL_RCC_OscConfig+0x4b8>)
 80031d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031da:	f7fd fb27 	bl	800082c <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e0:	e00c      	b.n	80031fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e2:	f7fd fb23 	bl	800082c <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d905      	bls.n	80031fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e0ab      	b.n	800334c <HAL_RCC_OscConfig+0x610>
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031fc:	4b55      	ldr	r3, [pc, #340]	@ (8003354 <HAL_RCC_OscConfig+0x618>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ec      	bne.n	80031e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003208:	4b52      	ldr	r3, [pc, #328]	@ (8003354 <HAL_RCC_OscConfig+0x618>)
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	4b52      	ldr	r3, [pc, #328]	@ (8003358 <HAL_RCC_OscConfig+0x61c>)
 800320e:	4013      	ands	r3, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6a11      	ldr	r1, [r2, #32]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003218:	3a01      	subs	r2, #1
 800321a:	0112      	lsls	r2, r2, #4
 800321c:	4311      	orrs	r1, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003222:	0212      	lsls	r2, r2, #8
 8003224:	4311      	orrs	r1, r2
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800322a:	0852      	lsrs	r2, r2, #1
 800322c:	3a01      	subs	r2, #1
 800322e:	0552      	lsls	r2, r2, #21
 8003230:	4311      	orrs	r1, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003236:	0852      	lsrs	r2, r2, #1
 8003238:	3a01      	subs	r2, #1
 800323a:	0652      	lsls	r2, r2, #25
 800323c:	4311      	orrs	r1, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003242:	06d2      	lsls	r2, r2, #27
 8003244:	430a      	orrs	r2, r1
 8003246:	4943      	ldr	r1, [pc, #268]	@ (8003354 <HAL_RCC_OscConfig+0x618>)
 8003248:	4313      	orrs	r3, r2
 800324a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800324c:	4b41      	ldr	r3, [pc, #260]	@ (8003354 <HAL_RCC_OscConfig+0x618>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a40      	ldr	r2, [pc, #256]	@ (8003354 <HAL_RCC_OscConfig+0x618>)
 8003252:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003256:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003258:	4b3e      	ldr	r3, [pc, #248]	@ (8003354 <HAL_RCC_OscConfig+0x618>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4a3d      	ldr	r2, [pc, #244]	@ (8003354 <HAL_RCC_OscConfig+0x618>)
 800325e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003262:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fd fae2 	bl	800082c <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326c:	f7fd fade 	bl	800082c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e066      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800327e:	4b35      	ldr	r3, [pc, #212]	@ (8003354 <HAL_RCC_OscConfig+0x618>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x530>
 800328a:	e05e      	b.n	800334a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328c:	4b31      	ldr	r3, [pc, #196]	@ (8003354 <HAL_RCC_OscConfig+0x618>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a30      	ldr	r2, [pc, #192]	@ (8003354 <HAL_RCC_OscConfig+0x618>)
 8003292:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fd fac8 	bl	800082c <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fd fac4 	bl	800082c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e04c      	b.n	800334c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b2:	4b28      	ldr	r3, [pc, #160]	@ (8003354 <HAL_RCC_OscConfig+0x618>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80032be:	4b25      	ldr	r3, [pc, #148]	@ (8003354 <HAL_RCC_OscConfig+0x618>)
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	4924      	ldr	r1, [pc, #144]	@ (8003354 <HAL_RCC_OscConfig+0x618>)
 80032c4:	4b25      	ldr	r3, [pc, #148]	@ (800335c <HAL_RCC_OscConfig+0x620>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	60cb      	str	r3, [r1, #12]
 80032ca:	e03e      	b.n	800334a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e039      	b.n	800334c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80032d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003354 <HAL_RCC_OscConfig+0x618>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f003 0203 	and.w	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d12c      	bne.n	8003346 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	3b01      	subs	r3, #1
 80032f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d123      	bne.n	8003346 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003308:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d11b      	bne.n	8003346 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d113      	bne.n	8003346 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003328:	085b      	lsrs	r3, r3, #1
 800332a:	3b01      	subs	r3, #1
 800332c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800332e:	429a      	cmp	r2, r3
 8003330:	d109      	bne.n	8003346 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	3b01      	subs	r3, #1
 8003340:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d001      	beq.n	800334a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3720      	adds	r7, #32
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000
 8003358:	019f800c 	.word	0x019f800c
 800335c:	feeefffc 	.word	0xfeeefffc

08003360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e11e      	b.n	80035b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003378:	4b91      	ldr	r3, [pc, #580]	@ (80035c0 <HAL_RCC_ClockConfig+0x260>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d910      	bls.n	80033a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b8e      	ldr	r3, [pc, #568]	@ (80035c0 <HAL_RCC_ClockConfig+0x260>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 020f 	bic.w	r2, r3, #15
 800338e:	498c      	ldr	r1, [pc, #560]	@ (80035c0 <HAL_RCC_ClockConfig+0x260>)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b8a      	ldr	r3, [pc, #552]	@ (80035c0 <HAL_RCC_ClockConfig+0x260>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e106      	b.n	80035b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d073      	beq.n	800349c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b03      	cmp	r3, #3
 80033ba:	d129      	bne.n	8003410 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033bc:	4b81      	ldr	r3, [pc, #516]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0f4      	b.n	80035b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80033cc:	f000 f966 	bl	800369c <RCC_GetSysClockFreqFromPLLSource>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4a7c      	ldr	r2, [pc, #496]	@ (80035c8 <HAL_RCC_ClockConfig+0x268>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d93f      	bls.n	800345a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033da:	4b7a      	ldr	r3, [pc, #488]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d033      	beq.n	800345a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d12f      	bne.n	800345a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033fa:	4b72      	ldr	r3, [pc, #456]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003402:	4a70      	ldr	r2, [pc, #448]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 8003404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003408:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800340a:	2380      	movs	r3, #128	@ 0x80
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	e024      	b.n	800345a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d107      	bne.n	8003428 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003418:	4b6a      	ldr	r3, [pc, #424]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0c6      	b.n	80035b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003428:	4b66      	ldr	r3, [pc, #408]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0be      	b.n	80035b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003438:	f000 f8ce 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 800343c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4a61      	ldr	r2, [pc, #388]	@ (80035c8 <HAL_RCC_ClockConfig+0x268>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d909      	bls.n	800345a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003446:	4b5f      	ldr	r3, [pc, #380]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800344e:	4a5d      	ldr	r2, [pc, #372]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 8003450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003454:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003456:	2380      	movs	r3, #128	@ 0x80
 8003458:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800345a:	4b5a      	ldr	r3, [pc, #360]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f023 0203 	bic.w	r2, r3, #3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4957      	ldr	r1, [pc, #348]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 8003468:	4313      	orrs	r3, r2
 800346a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800346c:	f7fd f9de 	bl	800082c <HAL_GetTick>
 8003470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	e00a      	b.n	800348a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003474:	f7fd f9da 	bl	800082c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e095      	b.n	80035b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348a:	4b4e      	ldr	r3, [pc, #312]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 020c 	and.w	r2, r3, #12
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	429a      	cmp	r2, r3
 800349a:	d1eb      	bne.n	8003474 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d023      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b4:	4b43      	ldr	r3, [pc, #268]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a42      	ldr	r2, [pc, #264]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 80034ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80034cc:	4b3d      	ldr	r3, [pc, #244]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80034d4:	4a3b      	ldr	r2, [pc, #236]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 80034d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034dc:	4b39      	ldr	r3, [pc, #228]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4936      	ldr	r1, [pc, #216]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
 80034ee:	e008      	b.n	8003502 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b80      	cmp	r3, #128	@ 0x80
 80034f4:	d105      	bne.n	8003502 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80034f6:	4b33      	ldr	r3, [pc, #204]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	4a32      	ldr	r2, [pc, #200]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 80034fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003500:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003502:	4b2f      	ldr	r3, [pc, #188]	@ (80035c0 <HAL_RCC_ClockConfig+0x260>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d21d      	bcs.n	800354c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003510:	4b2b      	ldr	r3, [pc, #172]	@ (80035c0 <HAL_RCC_ClockConfig+0x260>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 020f 	bic.w	r2, r3, #15
 8003518:	4929      	ldr	r1, [pc, #164]	@ (80035c0 <HAL_RCC_ClockConfig+0x260>)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003520:	f7fd f984 	bl	800082c <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	e00a      	b.n	800353e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003528:	f7fd f980 	bl	800082c <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e03b      	b.n	80035b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b20      	ldr	r3, [pc, #128]	@ (80035c0 <HAL_RCC_ClockConfig+0x260>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d1ed      	bne.n	8003528 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003558:	4b1a      	ldr	r3, [pc, #104]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4917      	ldr	r1, [pc, #92]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003576:	4b13      	ldr	r3, [pc, #76]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	490f      	ldr	r1, [pc, #60]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800358a:	f000 f825 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 800358e:	4602      	mov	r2, r0
 8003590:	4b0c      	ldr	r3, [pc, #48]	@ (80035c4 <HAL_RCC_ClockConfig+0x264>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	490c      	ldr	r1, [pc, #48]	@ (80035cc <HAL_RCC_ClockConfig+0x26c>)
 800359c:	5ccb      	ldrb	r3, [r1, r3]
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	fa22 f303 	lsr.w	r3, r2, r3
 80035a6:	4a0a      	ldr	r2, [pc, #40]	@ (80035d0 <HAL_RCC_ClockConfig+0x270>)
 80035a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035aa:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <HAL_RCC_ClockConfig+0x274>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fd f8f0 	bl	8000794 <HAL_InitTick>
 80035b4:	4603      	mov	r3, r0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40022000 	.word	0x40022000
 80035c4:	40021000 	.word	0x40021000
 80035c8:	04c4b400 	.word	0x04c4b400
 80035cc:	08003c1c 	.word	0x08003c1c
 80035d0:	20000000 	.word	0x20000000
 80035d4:	20000004 	.word	0x20000004

080035d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035de:	4b2c      	ldr	r3, [pc, #176]	@ (8003690 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d102      	bne.n	80035f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003694 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	e047      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035f0:	4b27      	ldr	r3, [pc, #156]	@ (8003690 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d102      	bne.n	8003602 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035fc:	4b26      	ldr	r3, [pc, #152]	@ (8003698 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	e03e      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003602:	4b23      	ldr	r3, [pc, #140]	@ (8003690 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b0c      	cmp	r3, #12
 800360c:	d136      	bne.n	800367c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800360e:	4b20      	ldr	r3, [pc, #128]	@ (8003690 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003618:	4b1d      	ldr	r3, [pc, #116]	@ (8003690 <HAL_RCC_GetSysClockFreq+0xb8>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	3301      	adds	r3, #1
 8003624:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b03      	cmp	r3, #3
 800362a:	d10c      	bne.n	8003646 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800362c:	4a1a      	ldr	r2, [pc, #104]	@ (8003698 <HAL_RCC_GetSysClockFreq+0xc0>)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	fbb2 f3f3 	udiv	r3, r2, r3
 8003634:	4a16      	ldr	r2, [pc, #88]	@ (8003690 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003636:	68d2      	ldr	r2, [r2, #12]
 8003638:	0a12      	lsrs	r2, r2, #8
 800363a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	617b      	str	r3, [r7, #20]
      break;
 8003644:	e00c      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003646:	4a13      	ldr	r2, [pc, #76]	@ (8003694 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	4a10      	ldr	r2, [pc, #64]	@ (8003690 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003650:	68d2      	ldr	r2, [r2, #12]
 8003652:	0a12      	lsrs	r2, r2, #8
 8003654:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003658:	fb02 f303 	mul.w	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]
      break;
 800365e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003660:	4b0b      	ldr	r3, [pc, #44]	@ (8003690 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	0e5b      	lsrs	r3, r3, #25
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	3301      	adds	r3, #1
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	e001      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003680:	693b      	ldr	r3, [r7, #16]
}
 8003682:	4618      	mov	r0, r3
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000
 8003694:	00f42400 	.word	0x00f42400
 8003698:	007a1200 	.word	0x007a1200

0800369c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036a2:	4b1e      	ldr	r3, [pc, #120]	@ (800371c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036ac:	4b1b      	ldr	r3, [pc, #108]	@ (800371c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	3301      	adds	r3, #1
 80036b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d10c      	bne.n	80036da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036c0:	4a17      	ldr	r2, [pc, #92]	@ (8003720 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	4a14      	ldr	r2, [pc, #80]	@ (800371c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036ca:	68d2      	ldr	r2, [r2, #12]
 80036cc:	0a12      	lsrs	r2, r2, #8
 80036ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	617b      	str	r3, [r7, #20]
    break;
 80036d8:	e00c      	b.n	80036f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036da:	4a12      	ldr	r2, [pc, #72]	@ (8003724 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e2:	4a0e      	ldr	r2, [pc, #56]	@ (800371c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036e4:	68d2      	ldr	r2, [r2, #12]
 80036e6:	0a12      	lsrs	r2, r2, #8
 80036e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036ec:	fb02 f303 	mul.w	r3, r2, r3
 80036f0:	617b      	str	r3, [r7, #20]
    break;
 80036f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036f4:	4b09      	ldr	r3, [pc, #36]	@ (800371c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	0e5b      	lsrs	r3, r3, #25
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	3301      	adds	r3, #1
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	fbb2 f3f3 	udiv	r3, r2, r3
 800370c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800370e:	687b      	ldr	r3, [r7, #4]
}
 8003710:	4618      	mov	r0, r3
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	40021000 	.word	0x40021000
 8003720:	007a1200 	.word	0x007a1200
 8003724:	00f42400 	.word	0x00f42400

08003728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003730:	2300      	movs	r3, #0
 8003732:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003734:	2300      	movs	r3, #0
 8003736:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8098 	beq.w	8003876 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374a:	4b43      	ldr	r3, [pc, #268]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10d      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003756:	4b40      	ldr	r3, [pc, #256]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375a:	4a3f      	ldr	r2, [pc, #252]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003760:	6593      	str	r3, [r2, #88]	@ 0x58
 8003762:	4b3d      	ldr	r3, [pc, #244]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376e:	2301      	movs	r3, #1
 8003770:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003772:	4b3a      	ldr	r3, [pc, #232]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a39      	ldr	r2, [pc, #228]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800377c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800377e:	f7fd f855 	bl	800082c <HAL_GetTick>
 8003782:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003784:	e009      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003786:	f7fd f851 	bl	800082c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d902      	bls.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	74fb      	strb	r3, [r7, #19]
        break;
 8003798:	e005      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800379a:	4b30      	ldr	r3, [pc, #192]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0ef      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037a6:	7cfb      	ldrb	r3, [r7, #19]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d159      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d01e      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d019      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037c8:	4b23      	ldr	r3, [pc, #140]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037d4:	4b20      	ldr	r3, [pc, #128]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037da:	4a1f      	ldr	r2, [pc, #124]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037f4:	4a18      	ldr	r2, [pc, #96]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d016      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003806:	f7fd f811 	bl	800082c <HAL_GetTick>
 800380a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380c:	e00b      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380e:	f7fd f80d 	bl	800082c <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381c:	4293      	cmp	r3, r2
 800381e:	d902      	bls.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	74fb      	strb	r3, [r7, #19]
            break;
 8003824:	e006      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003826:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0ec      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800383a:	4b07      	ldr	r3, [pc, #28]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003840:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003848:	4903      	ldr	r1, [pc, #12]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003850:	e008      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003852:	7cfb      	ldrb	r3, [r7, #19]
 8003854:	74bb      	strb	r3, [r7, #18]
 8003856:	e005      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003858:	40021000 	.word	0x40021000
 800385c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003864:	7c7b      	ldrb	r3, [r7, #17]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d105      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800386a:	4ba7      	ldr	r3, [pc, #668]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800386c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386e:	4aa6      	ldr	r2, [pc, #664]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003870:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003874:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003882:	4ba1      	ldr	r3, [pc, #644]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003888:	f023 0203 	bic.w	r2, r3, #3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	499d      	ldr	r1, [pc, #628]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038a4:	4b98      	ldr	r3, [pc, #608]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038aa:	f023 020c 	bic.w	r2, r3, #12
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	4995      	ldr	r1, [pc, #596]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038c6:	4b90      	ldr	r3, [pc, #576]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	498c      	ldr	r1, [pc, #560]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038e8:	4b87      	ldr	r3, [pc, #540]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	4984      	ldr	r1, [pc, #528]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800390a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003910:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	497b      	ldr	r1, [pc, #492]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800392c:	4b76      	ldr	r3, [pc, #472]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003932:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	4973      	ldr	r1, [pc, #460]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800394e:	4b6e      	ldr	r3, [pc, #440]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003954:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	496a      	ldr	r1, [pc, #424]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003970:	4b65      	ldr	r3, [pc, #404]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003976:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	4962      	ldr	r1, [pc, #392]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003992:	4b5d      	ldr	r3, [pc, #372]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003998:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a0:	4959      	ldr	r1, [pc, #356]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039b4:	4b54      	ldr	r3, [pc, #336]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ba:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c2:	4951      	ldr	r1, [pc, #324]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d015      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e4:	4948      	ldr	r1, [pc, #288]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039f4:	d105      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039f6:	4b44      	ldr	r3, [pc, #272]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	4a43      	ldr	r2, [pc, #268]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a00:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d015      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a14:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1c:	493a      	ldr	r1, [pc, #232]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a2c:	d105      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a2e:	4b36      	ldr	r3, [pc, #216]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	4a35      	ldr	r2, [pc, #212]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a38:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d015      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a46:	4b30      	ldr	r3, [pc, #192]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a54:	492c      	ldr	r1, [pc, #176]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a64:	d105      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a66:	4b28      	ldr	r3, [pc, #160]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	4a27      	ldr	r2, [pc, #156]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a70:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d015      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a7e:	4b22      	ldr	r3, [pc, #136]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a84:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8c:	491e      	ldr	r1, [pc, #120]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a9c:	d105      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	4a19      	ldr	r2, [pc, #100]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aa8:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d015      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ab6:	4b14      	ldr	r3, [pc, #80]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003abc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac4:	4910      	ldr	r1, [pc, #64]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ad4:	d105      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	4a0b      	ldr	r2, [pc, #44]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003adc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ae0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d018      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003aee:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	4902      	ldr	r1, [pc, #8]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	e001      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b12:	d105      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b14:	4b21      	ldr	r3, [pc, #132]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a20      	ldr	r2, [pc, #128]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b1e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d015      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b32:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3a:	4918      	ldr	r1, [pc, #96]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b4a:	d105      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b4c:	4b13      	ldr	r3, [pc, #76]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4a12      	ldr	r2, [pc, #72]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b56:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d015      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b64:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b72:	490a      	ldr	r1, [pc, #40]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b82:	d105      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b84:	4b05      	ldr	r3, [pc, #20]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a04      	ldr	r2, [pc, #16]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b90:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000

08003ba0 <memset>:
 8003ba0:	4402      	add	r2, r0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d100      	bne.n	8003baa <memset+0xa>
 8003ba8:	4770      	bx	lr
 8003baa:	f803 1b01 	strb.w	r1, [r3], #1
 8003bae:	e7f9      	b.n	8003ba4 <memset+0x4>

08003bb0 <__libc_init_array>:
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	4d0d      	ldr	r5, [pc, #52]	@ (8003be8 <__libc_init_array+0x38>)
 8003bb4:	4c0d      	ldr	r4, [pc, #52]	@ (8003bec <__libc_init_array+0x3c>)
 8003bb6:	1b64      	subs	r4, r4, r5
 8003bb8:	10a4      	asrs	r4, r4, #2
 8003bba:	2600      	movs	r6, #0
 8003bbc:	42a6      	cmp	r6, r4
 8003bbe:	d109      	bne.n	8003bd4 <__libc_init_array+0x24>
 8003bc0:	4d0b      	ldr	r5, [pc, #44]	@ (8003bf0 <__libc_init_array+0x40>)
 8003bc2:	4c0c      	ldr	r4, [pc, #48]	@ (8003bf4 <__libc_init_array+0x44>)
 8003bc4:	f000 f818 	bl	8003bf8 <_init>
 8003bc8:	1b64      	subs	r4, r4, r5
 8003bca:	10a4      	asrs	r4, r4, #2
 8003bcc:	2600      	movs	r6, #0
 8003bce:	42a6      	cmp	r6, r4
 8003bd0:	d105      	bne.n	8003bde <__libc_init_array+0x2e>
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}
 8003bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd8:	4798      	blx	r3
 8003bda:	3601      	adds	r6, #1
 8003bdc:	e7ee      	b.n	8003bbc <__libc_init_array+0xc>
 8003bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be2:	4798      	blx	r3
 8003be4:	3601      	adds	r6, #1
 8003be6:	e7f2      	b.n	8003bce <__libc_init_array+0x1e>
 8003be8:	08003c2c 	.word	0x08003c2c
 8003bec:	08003c2c 	.word	0x08003c2c
 8003bf0:	08003c2c 	.word	0x08003c2c
 8003bf4:	08003c30 	.word	0x08003c30

08003bf8 <_init>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	bf00      	nop
 8003bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfe:	bc08      	pop	{r3}
 8003c00:	469e      	mov	lr, r3
 8003c02:	4770      	bx	lr

08003c04 <_fini>:
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	bf00      	nop
 8003c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0a:	bc08      	pop	{r3}
 8003c0c:	469e      	mov	lr, r3
 8003c0e:	4770      	bx	lr
