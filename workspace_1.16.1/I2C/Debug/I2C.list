
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a9c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003c74  08003c74  00004c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c90  08003c90  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c90  08003c90  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c90  08003c90  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c90  08003c90  00004c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c94  08003c94  00004c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c98  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08003ca4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003ca4  000050e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a064  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc4  00000000  00000000  0000f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  00010c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000079b  00000000  00000000  00011668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d53c  00000000  00000000  00011e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5e4  00000000  00000000  0002f33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b94fa  00000000  00000000  0003b923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4e1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d4  00000000  00000000  000f4e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000f7634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003c5c 	.word	0x08003c5c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003c5c 	.word	0x08003c5c

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fad2 	bl	80007c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f82f 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f8f9 	bl	800041c <MX_GPIO_Init>
  MX_I2C1_Init();
 800022a:	f000 f877 	bl	800031c <MX_I2C1_Init>
  MX_I2C2_Init();
 800022e:	f000 f8b5 	bl	800039c <MX_I2C2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  memset(RxBuf, 0, I2CBUF);
 8000232:	220a      	movs	r2, #10
 8000234:	2100      	movs	r1, #0
 8000236:	480e      	ldr	r0, [pc, #56]	@ (8000270 <main+0x58>)
 8000238:	f003 fce4 	bl	8003c04 <memset>
	  RxDone = 0;
 800023c:	4b0d      	ldr	r3, [pc, #52]	@ (8000274 <main+0x5c>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Slave_Receive_IT(&hi2c2, RxBuf, I2CBUF);
 8000242:	220a      	movs	r2, #10
 8000244:	490a      	ldr	r1, [pc, #40]	@ (8000270 <main+0x58>)
 8000246:	480c      	ldr	r0, [pc, #48]	@ (8000278 <main+0x60>)
 8000248:	f000 ffe8 	bl	800121c <HAL_I2C_Slave_Receive_IT>
	  HAL_I2C_Master_Transmit(&hi2c1, 0x10<<1, (uint8_t*)TxBuf, I2CBUF, 1000);
 800024c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000250:	9300      	str	r3, [sp, #0]
 8000252:	230a      	movs	r3, #10
 8000254:	4a09      	ldr	r2, [pc, #36]	@ (800027c <main+0x64>)
 8000256:	2120      	movs	r1, #32
 8000258:	4809      	ldr	r0, [pc, #36]	@ (8000280 <main+0x68>)
 800025a:	f000 fec7 	bl	8000fec <HAL_I2C_Master_Transmit>
	  while(RxDone == 0)
 800025e:	bf00      	nop
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <main+0x5c>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0fa      	beq.n	8000260 <main+0x48>
		  ;
	  __NOP();
 800026a:	bf00      	nop
	  memset(RxBuf, 0, I2CBUF);
 800026c:	e7e1      	b.n	8000232 <main+0x1a>
 800026e:	bf00      	nop
 8000270:	200000d0 	.word	0x200000d0
 8000274:	200000da 	.word	0x200000da
 8000278:	2000007c 	.word	0x2000007c
 800027c:	08003c74 	.word	0x08003c74
 8000280:	20000028 	.word	0x20000028

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b094      	sub	sp, #80	@ 0x50
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	2238      	movs	r2, #56	@ 0x38
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f003 fcb6 	bl	8003c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002aa:	f002 fcc5 	bl	8002c38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ae:	2302      	movs	r3, #2
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b8:	2340      	movs	r3, #64	@ 0x40
 80002ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002bc:	2302      	movs	r3, #2
 80002be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c0:	2302      	movs	r3, #2
 80002c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002c4:	2301      	movs	r3, #1
 80002c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 80002c8:	2315      	movs	r3, #21
 80002ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002cc:	2302      	movs	r3, #2
 80002ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002d0:	2302      	movs	r3, #2
 80002d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d4:	2302      	movs	r3, #2
 80002d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d8:	f107 0318 	add.w	r3, r7, #24
 80002dc:	4618      	mov	r0, r3
 80002de:	f002 fd5f 	bl	8002da0 <HAL_RCC_OscConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002e8:	f000 f8ea 	bl	80004c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ec:	230f      	movs	r3, #15
 80002ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f0:	2303      	movs	r3, #3
 80002f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002f4:	2380      	movs	r3, #128	@ 0x80
 80002f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2102      	movs	r1, #2
 8000304:	4618      	mov	r0, r3
 8000306:	f003 f85d 	bl	80033c4 <HAL_RCC_ClockConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000310:	f000 f8d6 	bl	80004c0 <Error_Handler>
  }
}
 8000314:	bf00      	nop
 8000316:	3750      	adds	r7, #80	@ 0x50
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000320:	4b1b      	ldr	r3, [pc, #108]	@ (8000390 <MX_I2C1_Init+0x74>)
 8000322:	4a1c      	ldr	r2, [pc, #112]	@ (8000394 <MX_I2C1_Init+0x78>)
 8000324:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20916F9D;
 8000326:	4b1a      	ldr	r3, [pc, #104]	@ (8000390 <MX_I2C1_Init+0x74>)
 8000328:	4a1b      	ldr	r2, [pc, #108]	@ (8000398 <MX_I2C1_Init+0x7c>)
 800032a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800032c:	4b18      	ldr	r3, [pc, #96]	@ (8000390 <MX_I2C1_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000332:	4b17      	ldr	r3, [pc, #92]	@ (8000390 <MX_I2C1_Init+0x74>)
 8000334:	2201      	movs	r2, #1
 8000336:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000338:	4b15      	ldr	r3, [pc, #84]	@ (8000390 <MX_I2C1_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800033e:	4b14      	ldr	r3, [pc, #80]	@ (8000390 <MX_I2C1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000344:	4b12      	ldr	r3, [pc, #72]	@ (8000390 <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800034a:	4b11      	ldr	r3, [pc, #68]	@ (8000390 <MX_I2C1_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000350:	4b0f      	ldr	r3, [pc, #60]	@ (8000390 <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000356:	480e      	ldr	r0, [pc, #56]	@ (8000390 <MX_I2C1_Init+0x74>)
 8000358:	f000 fdac 	bl	8000eb4 <HAL_I2C_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000362:	f000 f8ad 	bl	80004c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000366:	2100      	movs	r1, #0
 8000368:	4809      	ldr	r0, [pc, #36]	@ (8000390 <MX_I2C1_Init+0x74>)
 800036a:	f002 fbcd 	bl	8002b08 <HAL_I2CEx_ConfigAnalogFilter>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000374:	f000 f8a4 	bl	80004c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000378:	2100      	movs	r1, #0
 800037a:	4805      	ldr	r0, [pc, #20]	@ (8000390 <MX_I2C1_Init+0x74>)
 800037c:	f002 fc0f 	bl	8002b9e <HAL_I2CEx_ConfigDigitalFilter>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000386:	f000 f89b 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000028 	.word	0x20000028
 8000394:	40005400 	.word	0x40005400
 8000398:	20916f9d 	.word	0x20916f9d

0800039c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000414 <MX_I2C2_Init+0x78>)
 80003a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20916F9D;
 80003a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000418 <MX_I2C2_Init+0x7c>)
 80003aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 32;
 80003ac:	4b18      	ldr	r3, [pc, #96]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003ae:	2220      	movs	r2, #32
 80003b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b2:	4b17      	ldr	r3, [pc, #92]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b8:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003be:	4b14      	ldr	r3, [pc, #80]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c4:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ca:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003d6:	480e      	ldr	r0, [pc, #56]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003d8:	f000 fd6c 	bl	8000eb4 <HAL_I2C_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003e2:	f000 f86d 	bl	80004c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003e6:	2100      	movs	r1, #0
 80003e8:	4809      	ldr	r0, [pc, #36]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003ea:	f002 fb8d 	bl	8002b08 <HAL_I2CEx_ConfigAnalogFilter>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003f4:	f000 f864 	bl	80004c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003f8:	2100      	movs	r1, #0
 80003fa:	4805      	ldr	r0, [pc, #20]	@ (8000410 <MX_I2C2_Init+0x74>)
 80003fc:	f002 fbcf 	bl	8002b9e <HAL_I2CEx_ConfigDigitalFilter>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000406:	f000 f85b 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	2000007c 	.word	0x2000007c
 8000414:	40005800 	.word	0x40005800
 8000418:	20916f9d 	.word	0x20916f9d

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000422:	4b1b      	ldr	r3, [pc, #108]	@ (8000490 <MX_GPIO_Init+0x74>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000426:	4a1a      	ldr	r2, [pc, #104]	@ (8000490 <MX_GPIO_Init+0x74>)
 8000428:	f043 0320 	orr.w	r3, r3, #32
 800042c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800042e:	4b18      	ldr	r3, [pc, #96]	@ (8000490 <MX_GPIO_Init+0x74>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000432:	f003 0320 	and.w	r3, r3, #32
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043a:	4b15      	ldr	r3, [pc, #84]	@ (8000490 <MX_GPIO_Init+0x74>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043e:	4a14      	ldr	r2, [pc, #80]	@ (8000490 <MX_GPIO_Init+0x74>)
 8000440:	f043 0304 	orr.w	r3, r3, #4
 8000444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000446:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <MX_GPIO_Init+0x74>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044a:	f003 0304 	and.w	r3, r3, #4
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <MX_GPIO_Init+0x74>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000456:	4a0e      	ldr	r2, [pc, #56]	@ (8000490 <MX_GPIO_Init+0x74>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800045e:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <MX_GPIO_Init+0x74>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046a:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <MX_GPIO_Init+0x74>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046e:	4a08      	ldr	r2, [pc, #32]	@ (8000490 <MX_GPIO_Init+0x74>)
 8000470:	f043 0302 	orr.w	r3, r3, #2
 8000474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000476:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <MX_GPIO_Init+0x74>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047a:	f003 0302 	and.w	r3, r3, #2
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000482:	bf00      	nop
 8000484:	3714      	adds	r7, #20
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	40021000 	.word	0x40021000

08000494 <HAL_I2C_SlaveRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2){
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a06      	ldr	r2, [pc, #24]	@ (80004b8 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d102      	bne.n	80004aa <HAL_I2C_SlaveRxCpltCallback+0x16>
		RxDone = 1;
 80004a4:	4b05      	ldr	r3, [pc, #20]	@ (80004bc <HAL_I2C_SlaveRxCpltCallback+0x28>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
	}
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	2000007c 	.word	0x2000007c
 80004bc:	200000da 	.word	0x200000da

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <Error_Handler+0x8>

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <HAL_MspInit+0x44>)
 80004d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000510 <HAL_MspInit+0x44>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <HAL_MspInit+0x44>)
 80004e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b09      	ldr	r3, [pc, #36]	@ (8000510 <HAL_MspInit+0x44>)
 80004ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004ee:	4a08      	ldr	r2, [pc, #32]	@ (8000510 <HAL_MspInit+0x44>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80004f6:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <HAL_MspInit+0x44>)
 80004f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000502:	f002 fc3d 	bl	8002d80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b0a2      	sub	sp, #136	@ 0x88
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800052c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000530:	2250      	movs	r2, #80	@ 0x50
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f003 fb65 	bl	8003c04 <memset>
  if(hi2c->Instance==I2C1)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a61      	ldr	r2, [pc, #388]	@ (80006c4 <HAL_I2C_MspInit+0x1b0>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d158      	bne.n	80005f6 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000544:	2340      	movs	r3, #64	@ 0x40
 8000546:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000548:	2300      	movs	r3, #0
 800054a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800054c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000550:	4618      	mov	r0, r3
 8000552:	f003 f91b 	bl	800378c <HAL_RCCEx_PeriphCLKConfig>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800055c:	f7ff ffb0 	bl	80004c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000560:	4b59      	ldr	r3, [pc, #356]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 8000562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000564:	4a58      	ldr	r2, [pc, #352]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 8000566:	f043 0301 	orr.w	r3, r3, #1
 800056a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800056c:	4b56      	ldr	r3, [pc, #344]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 800056e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	623b      	str	r3, [r7, #32]
 8000576:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000578:	4b53      	ldr	r3, [pc, #332]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 800057a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057c:	4a52      	ldr	r2, [pc, #328]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 800057e:	f043 0302 	orr.w	r3, r3, #2
 8000582:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000584:	4b50      	ldr	r3, [pc, #320]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 8000586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000588:	f003 0302 	and.w	r3, r3, #2
 800058c:	61fb      	str	r3, [r7, #28]
 800058e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000590:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000594:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000596:	2312      	movs	r3, #18
 8000598:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800059a:	2301      	movs	r3, #1
 800059c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005a4:	2304      	movs	r3, #4
 80005a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80005ae:	4619      	mov	r1, r3
 80005b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b4:	f000 fafc 	bl	8000bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005bc:	2312      	movs	r3, #18
 80005be:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2300      	movs	r3, #0
 80005c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005ca:	2304      	movs	r3, #4
 80005cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80005d4:	4619      	mov	r1, r3
 80005d6:	483d      	ldr	r0, [pc, #244]	@ (80006cc <HAL_I2C_MspInit+0x1b8>)
 80005d8:	f000 faea 	bl	8000bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005dc:	4b3a      	ldr	r3, [pc, #232]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 80005de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005e0:	4a39      	ldr	r2, [pc, #228]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 80005e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 80005ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005f0:	61bb      	str	r3, [r7, #24]
 80005f2:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80005f4:	e062      	b.n	80006bc <HAL_I2C_MspInit+0x1a8>
  else if(hi2c->Instance==I2C2)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a35      	ldr	r2, [pc, #212]	@ (80006d0 <HAL_I2C_MspInit+0x1bc>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d15d      	bne.n	80006bc <HAL_I2C_MspInit+0x1a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000600:	2380      	movs	r3, #128	@ 0x80
 8000602:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000604:	2300      	movs	r3, #0
 8000606:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800060c:	4618      	mov	r0, r3
 800060e:	f003 f8bd 	bl	800378c <HAL_RCCEx_PeriphCLKConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <HAL_I2C_MspInit+0x108>
      Error_Handler();
 8000618:	f7ff ff52 	bl	80004c0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800061c:	4b2a      	ldr	r3, [pc, #168]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 800061e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000620:	4a29      	ldr	r2, [pc, #164]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 8000622:	f043 0320 	orr.w	r3, r3, #32
 8000626:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000628:	4b27      	ldr	r3, [pc, #156]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 800062a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062c:	f003 0320 	and.w	r3, r3, #32
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000634:	4b24      	ldr	r3, [pc, #144]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 8000636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000638:	4a23      	ldr	r2, [pc, #140]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000640:	4b21      	ldr	r3, [pc, #132]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 8000642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000644:	f003 0304 	and.w	r3, r3, #4
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800064c:	2301      	movs	r3, #1
 800064e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000650:	2312      	movs	r3, #18
 8000652:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800065e:	2304      	movs	r3, #4
 8000660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000664:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000668:	4619      	mov	r1, r3
 800066a:	481a      	ldr	r0, [pc, #104]	@ (80006d4 <HAL_I2C_MspInit+0x1c0>)
 800066c:	f000 faa0 	bl	8000bb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000670:	2310      	movs	r3, #16
 8000672:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000674:	2312      	movs	r3, #18
 8000676:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000682:	2304      	movs	r3, #4
 8000684:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000688:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800068c:	4619      	mov	r1, r3
 800068e:	4812      	ldr	r0, [pc, #72]	@ (80006d8 <HAL_I2C_MspInit+0x1c4>)
 8000690:	f000 fa8e 	bl	8000bb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 8000696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000698:	4a0b      	ldr	r2, [pc, #44]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 800069a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800069e:	6593      	str	r3, [r2, #88]	@ 0x58
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <HAL_I2C_MspInit+0x1b4>)
 80006a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2101      	movs	r1, #1
 80006b0:	2021      	movs	r0, #33	@ 0x21
 80006b2:	f000 f9d4 	bl	8000a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80006b6:	2021      	movs	r0, #33	@ 0x21
 80006b8:	f000 f9eb 	bl	8000a92 <HAL_NVIC_EnableIRQ>
}
 80006bc:	bf00      	nop
 80006be:	3788      	adds	r7, #136	@ 0x88
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40005400 	.word	0x40005400
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000400 	.word	0x48000400
 80006d0:	40005800 	.word	0x40005800
 80006d4:	48001400 	.word	0x48001400
 80006d8:	48000800 	.word	0x48000800

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <NMI_Handler+0x4>

080006e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <MemManage_Handler+0x4>

080006f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <UsageFault_Handler+0x4>

08000704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000732:	f000 f89b 	bl	800086c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000740:	4802      	ldr	r0, [pc, #8]	@ (800074c <I2C2_EV_IRQHandler+0x10>)
 8000742:	f000 fdbb 	bl	80012bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000007c 	.word	0x2000007c

08000750 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <SystemInit+0x20>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <SystemInit+0x20>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000774:	480d      	ldr	r0, [pc, #52]	@ (80007ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000776:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000778:	f7ff ffea 	bl	8000750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800077e:	490d      	ldr	r1, [pc, #52]	@ (80007b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000780:	4a0d      	ldr	r2, [pc, #52]	@ (80007b8 <LoopForever+0xe>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	@ (80007bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000794:	4c0a      	ldr	r4, [pc, #40]	@ (80007c0 <LoopForever+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007a2:	f003 fa37 	bl	8003c14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007a6:	f7ff fd37 	bl	8000218 <main>

080007aa <LoopForever>:

LoopForever:
    b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   r0, =_estack
 80007ac:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007b8:	08003c98 	.word	0x08003c98
  ldr r2, =_sbss
 80007bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007c0:	200000e0 	.word	0x200000e0

080007c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_2_IRQHandler>

080007c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007cc:	2300      	movs	r3, #0
 80007ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 f939 	bl	8000a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007d6:	200f      	movs	r0, #15
 80007d8:	f000 f80e 	bl	80007f8 <HAL_InitTick>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	71fb      	strb	r3, [r7, #7]
 80007e6:	e001      	b.n	80007ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007e8:	f7ff fe70 	bl	80004cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007ec:	79fb      	ldrb	r3, [r7, #7]

}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000800:	2300      	movs	r3, #0
 8000802:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000804:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <HAL_InitTick+0x68>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d022      	beq.n	8000852 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <HAL_InitTick+0x6c>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <HAL_InitTick+0x68>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000818:	fbb1 f3f3 	udiv	r3, r1, r3
 800081c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f944 	bl	8000aae <HAL_SYSTICK_Config>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d10f      	bne.n	800084c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b0f      	cmp	r3, #15
 8000830:	d809      	bhi.n	8000846 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000832:	2200      	movs	r2, #0
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	f04f 30ff 	mov.w	r0, #4294967295
 800083a:	f000 f910 	bl	8000a5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800083e:	4a0a      	ldr	r2, [pc, #40]	@ (8000868 <HAL_InitTick+0x70>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	e007      	b.n	8000856 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	73fb      	strb	r3, [r7, #15]
 800084a:	e004      	b.n	8000856 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	73fb      	strb	r3, [r7, #15]
 8000850:	e001      	b.n	8000856 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000856:	7bfb      	ldrb	r3, [r7, #15]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000008 	.word	0x20000008
 8000864:	20000000 	.word	0x20000000
 8000868:	20000004 	.word	0x20000004

0800086c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <HAL_IncTick+0x1c>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <HAL_IncTick+0x20>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4413      	add	r3, r2
 800087a:	4a03      	ldr	r2, [pc, #12]	@ (8000888 <HAL_IncTick+0x1c>)
 800087c:	6013      	str	r3, [r2, #0]
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	200000dc 	.word	0x200000dc
 800088c:	20000008 	.word	0x20000008

08000890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return uwTick;
 8000894:	4b03      	ldr	r3, [pc, #12]	@ (80008a4 <HAL_GetTick+0x14>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	200000dc 	.word	0x200000dc

080008a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008da:	4a04      	ldr	r2, [pc, #16]	@ (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	60d3      	str	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f4:	4b04      	ldr	r3, [pc, #16]	@ (8000908 <__NVIC_GetPriorityGrouping+0x18>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 0307 	and.w	r3, r3, #7
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db0b      	blt.n	8000936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 021f 	and.w	r2, r3, #31
 8000924:	4907      	ldr	r1, [pc, #28]	@ (8000944 <__NVIC_EnableIRQ+0x38>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	2001      	movs	r0, #1
 800092e:	fa00 f202 	lsl.w	r2, r0, r2
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e100 	.word	0xe000e100

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db0a      	blt.n	8000972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	490c      	ldr	r1, [pc, #48]	@ (8000994 <__NVIC_SetPriority+0x4c>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	440b      	add	r3, r1
 800096c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000970:	e00a      	b.n	8000988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4908      	ldr	r1, [pc, #32]	@ (8000998 <__NVIC_SetPriority+0x50>)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	3b04      	subs	r3, #4
 8000980:	0112      	lsls	r2, r2, #4
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	440b      	add	r3, r1
 8000986:	761a      	strb	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	@ 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f1c3 0307 	rsb	r3, r3, #7
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	bf28      	it	cs
 80009ba:	2304      	movcs	r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3304      	adds	r3, #4
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d902      	bls.n	80009cc <NVIC_EncodePriority+0x30>
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3b03      	subs	r3, #3
 80009ca:	e000      	b.n	80009ce <NVIC_EncodePriority+0x32>
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43da      	mvns	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	401a      	ands	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43d9      	mvns	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	4313      	orrs	r3, r2
         );
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3724      	adds	r7, #36	@ 0x24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a14:	d301      	bcc.n	8000a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00f      	b.n	8000a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <SysTick_Config+0x40>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a22:	210f      	movs	r1, #15
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f7ff ff8e 	bl	8000948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2c:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <SysTick_Config+0x40>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a32:	4b04      	ldr	r3, [pc, #16]	@ (8000a44 <SysTick_Config+0x40>)
 8000a34:	2207      	movs	r2, #7
 8000a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	e000e010 	.word	0xe000e010

08000a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff ff29 	bl	80008a8 <__NVIC_SetPriorityGrouping>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a6c:	f7ff ff40 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	68b9      	ldr	r1, [r7, #8]
 8000a76:	6978      	ldr	r0, [r7, #20]
 8000a78:	f7ff ff90 	bl	800099c <NVIC_EncodePriority>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff5f 	bl	8000948 <__NVIC_SetPriority>
}
 8000a8a:	bf00      	nop
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff33 	bl	800090c <__NVIC_EnableIRQ>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ffa4 	bl	8000a04 <SysTick_Config>
 8000abc:	4603      	mov	r3, r0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d00d      	beq.n	8000afa <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	73fb      	strb	r3, [r7, #15]
 8000af8:	e047      	b.n	8000b8a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f022 020e 	bic.w	r2, r2, #14
 8000b08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0201 	bic.w	r2, r2, #1
 8000b18:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000b28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	f003 021f 	and.w	r2, r3, #31
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	2101      	movs	r1, #1
 8000b38:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000b46:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d00c      	beq.n	8000b6a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000b5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000b68:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	4798      	blx	r3
    }
  }
  return status;
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ba2:	b2db      	uxtb	r3, r3
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b087      	sub	sp, #28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000bbe:	e15a      	b.n	8000e76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 814c 	beq.w	8000e70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d005      	beq.n	8000bf0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d130      	bne.n	8000c52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68da      	ldr	r2, [r3, #12]
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c26:	2201      	movs	r2, #1
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	091b      	lsrs	r3, r3, #4
 8000c3c:	f003 0201 	and.w	r2, r3, #1
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d017      	beq.n	8000c8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 0303 	and.w	r3, r3, #3
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d123      	bne.n	8000ce2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	08da      	lsrs	r2, r3, #3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3208      	adds	r2, #8
 8000ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	220f      	movs	r2, #15
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	691a      	ldr	r2, [r3, #16]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	08da      	lsrs	r2, r3, #3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3208      	adds	r2, #8
 8000cdc:	6939      	ldr	r1, [r7, #16]
 8000cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	2203      	movs	r2, #3
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0203 	and.w	r2, r3, #3
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 80a6 	beq.w	8000e70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d24:	4b5b      	ldr	r3, [pc, #364]	@ (8000e94 <HAL_GPIO_Init+0x2e4>)
 8000d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d28:	4a5a      	ldr	r2, [pc, #360]	@ (8000e94 <HAL_GPIO_Init+0x2e4>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d30:	4b58      	ldr	r3, [pc, #352]	@ (8000e94 <HAL_GPIO_Init+0x2e4>)
 8000d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d3c:	4a56      	ldr	r2, [pc, #344]	@ (8000e98 <HAL_GPIO_Init+0x2e8>)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	089b      	lsrs	r3, r3, #2
 8000d42:	3302      	adds	r3, #2
 8000d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	220f      	movs	r2, #15
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d66:	d01f      	beq.n	8000da8 <HAL_GPIO_Init+0x1f8>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a4c      	ldr	r2, [pc, #304]	@ (8000e9c <HAL_GPIO_Init+0x2ec>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d019      	beq.n	8000da4 <HAL_GPIO_Init+0x1f4>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a4b      	ldr	r2, [pc, #300]	@ (8000ea0 <HAL_GPIO_Init+0x2f0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d013      	beq.n	8000da0 <HAL_GPIO_Init+0x1f0>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a4a      	ldr	r2, [pc, #296]	@ (8000ea4 <HAL_GPIO_Init+0x2f4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d00d      	beq.n	8000d9c <HAL_GPIO_Init+0x1ec>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a49      	ldr	r2, [pc, #292]	@ (8000ea8 <HAL_GPIO_Init+0x2f8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d007      	beq.n	8000d98 <HAL_GPIO_Init+0x1e8>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a48      	ldr	r2, [pc, #288]	@ (8000eac <HAL_GPIO_Init+0x2fc>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d101      	bne.n	8000d94 <HAL_GPIO_Init+0x1e4>
 8000d90:	2305      	movs	r3, #5
 8000d92:	e00a      	b.n	8000daa <HAL_GPIO_Init+0x1fa>
 8000d94:	2306      	movs	r3, #6
 8000d96:	e008      	b.n	8000daa <HAL_GPIO_Init+0x1fa>
 8000d98:	2304      	movs	r3, #4
 8000d9a:	e006      	b.n	8000daa <HAL_GPIO_Init+0x1fa>
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e004      	b.n	8000daa <HAL_GPIO_Init+0x1fa>
 8000da0:	2302      	movs	r3, #2
 8000da2:	e002      	b.n	8000daa <HAL_GPIO_Init+0x1fa>
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <HAL_GPIO_Init+0x1fa>
 8000da8:	2300      	movs	r3, #0
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	f002 0203 	and.w	r2, r2, #3
 8000db0:	0092      	lsls	r2, r2, #2
 8000db2:	4093      	lsls	r3, r2
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dba:	4937      	ldr	r1, [pc, #220]	@ (8000e98 <HAL_GPIO_Init+0x2e8>)
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dc8:	4b39      	ldr	r3, [pc, #228]	@ (8000eb0 <HAL_GPIO_Init+0x300>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d003      	beq.n	8000dec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dec:	4a30      	ldr	r2, [pc, #192]	@ (8000eb0 <HAL_GPIO_Init+0x300>)
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000df2:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb0 <HAL_GPIO_Init+0x300>)
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e16:	4a26      	ldr	r2, [pc, #152]	@ (8000eb0 <HAL_GPIO_Init+0x300>)
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000e1c:	4b24      	ldr	r3, [pc, #144]	@ (8000eb0 <HAL_GPIO_Init+0x300>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e40:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb0 <HAL_GPIO_Init+0x300>)
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb0 <HAL_GPIO_Init+0x300>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e6a:	4a11      	ldr	r2, [pc, #68]	@ (8000eb0 <HAL_GPIO_Init+0x300>)
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	3301      	adds	r3, #1
 8000e74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f47f ae9d 	bne.w	8000bc0 <HAL_GPIO_Init+0x10>
  }
}
 8000e86:	bf00      	nop
 8000e88:	bf00      	nop
 8000e8a:	371c      	adds	r7, #28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	48000400 	.word	0x48000400
 8000ea0:	48000800 	.word	0x48000800
 8000ea4:	48000c00 	.word	0x48000c00
 8000ea8:	48001000 	.word	0x48001000
 8000eac:	48001400 	.word	0x48001400
 8000eb0:	40010400 	.word	0x40010400

08000eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e08d      	b.n	8000fe2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d106      	bne.n	8000ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff fb1a 	bl	8000514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2224      	movs	r2, #36	@ 0x24
 8000ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0201 	bic.w	r2, r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000f04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d107      	bne.n	8000f2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	e006      	b.n	8000f3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000f3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d108      	bne.n	8000f56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	e007      	b.n	8000f66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6812      	ldr	r2, [r2, #0]
 8000f70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691a      	ldr	r2, [r3, #16]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69d9      	ldr	r1, [r3, #28]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a1a      	ldr	r2, [r3, #32]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0201 	orr.w	r2, r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2220      	movs	r2, #32
 8000fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	817b      	strh	r3, [r7, #10]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b20      	cmp	r3, #32
 800100a:	f040 80fd 	bne.w	8001208 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <HAL_I2C_Master_Transmit+0x30>
 8001018:	2302      	movs	r3, #2
 800101a:	e0f6      	b.n	800120a <HAL_I2C_Master_Transmit+0x21e>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001024:	f7ff fc34 	bl	8000890 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2319      	movs	r3, #25
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f001 fa8f 	bl	800255a <I2C_WaitOnFlagUntilTimeout>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e0e1      	b.n	800120a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2221      	movs	r2, #33	@ 0x21
 800104a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2210      	movs	r2, #16
 8001052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2200      	movs	r2, #0
 800105a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	893a      	ldrh	r2, [r7, #8]
 8001066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2200      	movs	r2, #0
 800106c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001072:	b29b      	uxth	r3, r3
 8001074:	2bff      	cmp	r3, #255	@ 0xff
 8001076:	d906      	bls.n	8001086 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	22ff      	movs	r2, #255	@ 0xff
 800107c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800107e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e007      	b.n	8001096 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800108a:	b29a      	uxth	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001090:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001094:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800109a:	2b00      	cmp	r3, #0
 800109c:	d024      	beq.n	80010e8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	3b01      	subs	r3, #1
 80010bc:	b29a      	uxth	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010c6:	3b01      	subs	r3, #1
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	3301      	adds	r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	8979      	ldrh	r1, [r7, #10]
 80010da:	4b4e      	ldr	r3, [pc, #312]	@ (8001214 <HAL_I2C_Master_Transmit+0x228>)
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f001 fbfd 	bl	80028e0 <I2C_TransferConfig>
 80010e6:	e066      	b.n	80011b6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	8979      	ldrh	r1, [r7, #10]
 80010f0:	4b48      	ldr	r3, [pc, #288]	@ (8001214 <HAL_I2C_Master_Transmit+0x228>)
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f001 fbf2 	bl	80028e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80010fc:	e05b      	b.n	80011b6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	6a39      	ldr	r1, [r7, #32]
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f001 fa82 	bl	800260c <I2C_WaitOnTXISFlagUntilTimeout>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e07b      	b.n	800120a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800112c:	b29b      	uxth	r3, r3
 800112e:	3b01      	subs	r3, #1
 8001130:	b29a      	uxth	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800113a:	3b01      	subs	r3, #1
 800113c:	b29a      	uxth	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001146:	b29b      	uxth	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d034      	beq.n	80011b6 <HAL_I2C_Master_Transmit+0x1ca>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001150:	2b00      	cmp	r3, #0
 8001152:	d130      	bne.n	80011b6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	2200      	movs	r2, #0
 800115c:	2180      	movs	r1, #128	@ 0x80
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f001 f9fb 	bl	800255a <I2C_WaitOnFlagUntilTimeout>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e04d      	b.n	800120a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001172:	b29b      	uxth	r3, r3
 8001174:	2bff      	cmp	r3, #255	@ 0xff
 8001176:	d90e      	bls.n	8001196 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	22ff      	movs	r2, #255	@ 0xff
 800117c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001182:	b2da      	uxtb	r2, r3
 8001184:	8979      	ldrh	r1, [r7, #10]
 8001186:	2300      	movs	r3, #0
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f001 fba6 	bl	80028e0 <I2C_TransferConfig>
 8001194:	e00f      	b.n	80011b6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800119a:	b29a      	uxth	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	8979      	ldrh	r1, [r7, #10]
 80011a8:	2300      	movs	r3, #0
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f001 fb95 	bl	80028e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d19e      	bne.n	80010fe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	6a39      	ldr	r1, [r7, #32]
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f001 fa68 	bl	800269a <I2C_WaitOnSTOPFlagUntilTimeout>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e01a      	b.n	800120a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2220      	movs	r2, #32
 80011da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6859      	ldr	r1, [r3, #4]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <HAL_I2C_Master_Transmit+0x22c>)
 80011e8:	400b      	ands	r3, r1
 80011ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2220      	movs	r2, #32
 80011f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	e000      	b.n	800120a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001208:	2302      	movs	r3, #2
  }
}
 800120a:	4618      	mov	r0, r3
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	80002000 	.word	0x80002000
 8001218:	fe00e800 	.word	0xfe00e800

0800121c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	4613      	mov	r3, r2
 8001228:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b20      	cmp	r3, #32
 8001234:	d139      	bne.n	80012aa <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800123c:	2b01      	cmp	r3, #1
 800123e:	d101      	bne.n	8001244 <HAL_I2C_Slave_Receive_IT+0x28>
 8001240:	2302      	movs	r3, #2
 8001242:	e033      	b.n	80012ac <HAL_I2C_Slave_Receive_IT+0x90>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2222      	movs	r2, #34	@ 0x22
 8001250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2220      	movs	r2, #32
 8001258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001270:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	88fa      	ldrh	r2, [r7, #6]
 800127c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001282:	b29a      	uxth	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <HAL_I2C_Slave_Receive_IT+0x98>)
 800128c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4a09      	ldr	r2, [pc, #36]	@ (80012b8 <HAL_I2C_Slave_Receive_IT+0x9c>)
 8001292:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 800129c:	f248 0102 	movw	r1, #32770	@ 0x8002
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f001 fb4f 	bl	8002944 <I2C_Enable_IRQ>

    return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 80012aa:	2302      	movs	r3, #2
  }
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	ffff0000 	.word	0xffff0000
 80012b8:	080013ad 	.word	0x080013ad

080012bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	68f9      	ldr	r1, [r7, #12]
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	4798      	blx	r3
  }
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	70fb      	strb	r3, [r7, #3]
 8001338:	4613      	mov	r3, r2
 800133a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <I2C_Slave_ISR_IT+0x24>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e0e2      	b.n	8001596 <I2C_Slave_ISR_IT+0x1ea>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	f003 0320 	and.w	r3, r3, #32
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d009      	beq.n	80013f6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d004      	beq.n	80013f6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80013ec:	6939      	ldr	r1, [r7, #16]
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 fda2 	bl	8001f38 <I2C_ITSlaveCplt>
 80013f4:	e0ca      	b.n	800158c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d04b      	beq.n	8001498 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001406:	2b00      	cmp	r3, #0
 8001408:	d046      	beq.n	8001498 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800140e:	b29b      	uxth	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d128      	bne.n	8001466 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b28      	cmp	r3, #40	@ 0x28
 800141e:	d108      	bne.n	8001432 <I2C_Slave_ISR_IT+0x86>
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001426:	d104      	bne.n	8001432 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001428:	6939      	ldr	r1, [r7, #16]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 fee8 	bl	8002200 <I2C_ITListenCplt>
 8001430:	e031      	b.n	8001496 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b29      	cmp	r3, #41	@ 0x29
 800143c:	d10e      	bne.n	800145c <I2C_Slave_ISR_IT+0xb0>
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001444:	d00a      	beq.n	800145c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2210      	movs	r2, #16
 800144c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f001 f841 	bl	80024d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f000 fc4b 	bl	8001cf0 <I2C_ITSlaveSeqCplt>
 800145a:	e01c      	b.n	8001496 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2210      	movs	r2, #16
 8001462:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001464:	e08f      	b.n	8001586 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2210      	movs	r2, #16
 800146c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f043 0204 	orr.w	r2, r3, #4
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <I2C_Slave_ISR_IT+0xdc>
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001486:	d17e      	bne.n	8001586 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148c:	4619      	mov	r1, r3
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 ff0a 	bl	80022a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001494:	e077      	b.n	8001586 <I2C_Slave_ISR_IT+0x1da>
 8001496:	e076      	b.n	8001586 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d02f      	beq.n	8001502 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d02a      	beq.n	8001502 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d018      	beq.n	80014e8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014d2:	3b01      	subs	r3, #1
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014de:	b29b      	uxth	r3, r3
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d14b      	bne.n	800158a <I2C_Slave_ISR_IT+0x1de>
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80014f8:	d047      	beq.n	800158a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 fbf8 	bl	8001cf0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001500:	e043      	b.n	800158a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d009      	beq.n	8001520 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001512:	2b00      	cmp	r3, #0
 8001514:	d004      	beq.n	8001520 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001516:	6939      	ldr	r1, [r7, #16]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 fb28 	bl	8001b6e <I2C_ITAddrCplt>
 800151e:	e035      	b.n	800158c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d030      	beq.n	800158c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001530:	2b00      	cmp	r3, #0
 8001532:	d02b      	beq.n	800158c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001538:	b29b      	uxth	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d018      	beq.n	8001570 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001542:	781a      	ldrb	r2, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001558:	b29b      	uxth	r3, r3
 800155a:	3b01      	subs	r3, #1
 800155c:	b29a      	uxth	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001566:	3b01      	subs	r3, #1
 8001568:	b29a      	uxth	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800156e:	e00d      	b.n	800158c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001576:	d002      	beq.n	800157e <I2C_Slave_ISR_IT+0x1d2>
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d106      	bne.n	800158c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 fbb6 	bl	8001cf0 <I2C_ITSlaveSeqCplt>
 8001584:	e002      	b.n	800158c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8001586:	bf00      	nop
 8001588:	e000      	b.n	800158c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800158a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b088      	sub	sp, #32
 80015a2:	af02      	add	r7, sp, #8
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <I2C_Master_ISR_DMA+0x1a>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e0d9      	b.n	800176c <I2C_Master_ISR_DMA+0x1ce>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	f003 0310 	and.w	r3, r3, #16
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d016      	beq.n	80015f8 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d011      	beq.n	80015f8 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2210      	movs	r2, #16
 80015da:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e0:	f043 0204 	orr.w	r2, r3, #4
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80015e8:	2120      	movs	r1, #32
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f001 f9aa 	bl	8002944 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f000 ff70 	bl	80024d6 <I2C_Flush_TXDR>
 80015f6:	e0b4      	b.n	8001762 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d071      	beq.n	80016e6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001608:	2b00      	cmp	r3, #0
 800160a:	d06c      	beq.n	80016e6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800161a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001620:	b29b      	uxth	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d04e      	beq.n	80016c4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	b29b      	uxth	r3, r3
 800162e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001632:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001638:	b29b      	uxth	r3, r3
 800163a:	2bff      	cmp	r3, #255	@ 0xff
 800163c:	d906      	bls.n	800164c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	22ff      	movs	r2, #255	@ 0xff
 8001642:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8001644:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e010      	b.n	800166e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001650:	b29a      	uxth	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800165e:	d003      	beq.n	8001668 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e002      	b.n	800166e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001668:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800166c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001672:	b2da      	uxtb	r2, r3
 8001674:	8a79      	ldrh	r1, [r7, #18]
 8001676:	2300      	movs	r3, #0
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f001 f92f 	bl	80028e0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001686:	b29a      	uxth	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	b29a      	uxth	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b22      	cmp	r3, #34	@ 0x22
 800169e:	d108      	bne.n	80016b2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016ae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80016b0:	e057      	b.n	8001762 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80016c0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80016c2:	e04e      	b.n	8001762 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80016d2:	d003      	beq.n	80016dc <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 face 	bl	8001c76 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80016da:	e042      	b.n	8001762 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80016dc:	2140      	movs	r1, #64	@ 0x40
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 fde2 	bl	80022a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80016e4:	e03d      	b.n	8001762 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d028      	beq.n	8001742 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d023      	beq.n	8001742 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016fe:	b29b      	uxth	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d119      	bne.n	8001738 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001712:	d025      	beq.n	8001760 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001718:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800171c:	d108      	bne.n	8001730 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800172c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800172e:	e017      	b.n	8001760 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 faa0 	bl	8001c76 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001736:	e013      	b.n	8001760 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001738:	2140      	movs	r1, #64	@ 0x40
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 fdb4 	bl	80022a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001740:	e00e      	b.n	8001760 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	f003 0320 	and.w	r3, r3, #32
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00a      	beq.n	8001762 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001752:	2b00      	cmp	r3, #0
 8001754:	d005      	beq.n	8001762 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001756:	68b9      	ldr	r1, [r7, #8]
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 fb25 	bl	8001da8 <I2C_ITMasterCplt>
 800175e:	e000      	b.n	8001762 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8001760:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af02      	add	r7, sp, #8
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001780:	4b8d      	ldr	r3, [pc, #564]	@ (80019b8 <I2C_Mem_ISR_DMA+0x244>)
 8001782:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800178a:	2b01      	cmp	r3, #1
 800178c:	d101      	bne.n	8001792 <I2C_Mem_ISR_DMA+0x1e>
 800178e:	2302      	movs	r3, #2
 8001790:	e10e      	b.n	80019b0 <I2C_Mem_ISR_DMA+0x23c>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d016      	beq.n	80017d2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d011      	beq.n	80017d2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2210      	movs	r2, #16
 80017b4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	f043 0204 	orr.w	r2, r3, #4
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80017c2:	2120      	movs	r1, #32
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f001 f8bd 	bl	8002944 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 fe83 	bl	80024d6 <I2C_Flush_TXDR>
 80017d0:	e0e9      	b.n	80019a6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00e      	beq.n	80017fa <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d009      	beq.n	80017fa <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f04f 32ff 	mov.w	r2, #4294967295
 80017f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80017f8:	e0d5      	b.n	80019a6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001800:	2b00      	cmp	r3, #0
 8001802:	d05f      	beq.n	80018c4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800180a:	2b00      	cmp	r3, #0
 800180c:	d05a      	beq.n	80018c4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800180e:	2101      	movs	r1, #1
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f001 f91b 	bl	8002a4c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001816:	2110      	movs	r1, #16
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f001 f893 	bl	8002944 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001822:	b29b      	uxth	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d048      	beq.n	80018ba <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800182c:	b29b      	uxth	r3, r3
 800182e:	2bff      	cmp	r3, #255	@ 0xff
 8001830:	d910      	bls.n	8001854 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	22ff      	movs	r2, #255	@ 0xff
 8001836:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183c:	b299      	uxth	r1, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001842:	b2da      	uxtb	r2, r3
 8001844:	2300      	movs	r3, #0
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f001 f847 	bl	80028e0 <I2C_TransferConfig>
 8001852:	e011      	b.n	8001878 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001862:	b299      	uxth	r1, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001868:	b2da      	uxtb	r2, r3
 800186a:	2300      	movs	r3, #0
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f001 f834 	bl	80028e0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800187c:	b29a      	uxth	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	b29a      	uxth	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b22      	cmp	r3, #34	@ 0x22
 8001894:	d108      	bne.n	80018a8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018a4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80018a6:	e07e      	b.n	80019a6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80018b8:	e075      	b.n	80019a6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80018ba:	2140      	movs	r1, #64	@ 0x40
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 fcf3 	bl	80022a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80018c2:	e070      	b.n	80019a6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d05d      	beq.n	800198a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d058      	beq.n	800198a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80018d8:	2101      	movs	r1, #1
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f001 f8b6 	bl	8002a4c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80018e0:	2110      	movs	r1, #16
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f001 f82e 	bl	8002944 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b22      	cmp	r3, #34	@ 0x22
 80018f2:	d101      	bne.n	80018f8 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80018f4:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <I2C_Mem_ISR_DMA+0x248>)
 80018f6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	2bff      	cmp	r3, #255	@ 0xff
 8001900:	d910      	bls.n	8001924 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	22ff      	movs	r2, #255	@ 0xff
 8001906:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190c:	b299      	uxth	r1, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001912:	b2da      	uxtb	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 ffdf 	bl	80028e0 <I2C_TransferConfig>
 8001922:	e011      	b.n	8001948 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001932:	b299      	uxth	r1, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001938:	b2da      	uxtb	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 ffcc 	bl	80028e0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	b29a      	uxth	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b22      	cmp	r3, #34	@ 0x22
 8001964:	d108      	bne.n	8001978 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001974:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001976:	e016      	b.n	80019a6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001986:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001988:	e00d      	b.n	80019a6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800199e:	68b9      	ldr	r1, [r7, #8]
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f000 fa01 	bl	8001da8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	80002000 	.word	0x80002000
 80019bc:	80002400 	.word	0x80002400

080019c0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <I2C_Slave_ISR_DMA+0x24>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e0c0      	b.n	8001b66 <I2C_Slave_ISR_DMA+0x1a6>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	f003 0320 	and.w	r3, r3, #32
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d009      	beq.n	8001a0a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 fa98 	bl	8001f38 <I2C_ITSlaveCplt>
 8001a08:	e0a8      	b.n	8001b5c <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f003 0310 	and.w	r3, r3, #16
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 8095 	beq.w	8001b40 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 808f 	beq.w	8001b40 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d104      	bne.n	8001a36 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d07d      	beq.n	8001b32 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00c      	beq.n	8001a58 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d007      	beq.n	8001a58 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8001a54:	2301      	movs	r3, #1
 8001a56:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00c      	beq.n	8001a7a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8001a76:	2301      	movs	r3, #1
 8001a78:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d128      	bne.n	8001ad2 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b28      	cmp	r3, #40	@ 0x28
 8001a8a:	d108      	bne.n	8001a9e <I2C_Slave_ISR_DMA+0xde>
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a92:	d104      	bne.n	8001a9e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 fbb2 	bl	8002200 <I2C_ITListenCplt>
 8001a9c:	e048      	b.n	8001b30 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b29      	cmp	r3, #41	@ 0x29
 8001aa8:	d10e      	bne.n	8001ac8 <I2C_Slave_ISR_DMA+0x108>
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ab0:	d00a      	beq.n	8001ac8 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2210      	movs	r2, #16
 8001ab8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 fd0b 	bl	80024d6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f915 	bl	8001cf0 <I2C_ITSlaveSeqCplt>
 8001ac6:	e033      	b.n	8001b30 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2210      	movs	r2, #16
 8001ace:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001ad0:	e034      	b.n	8001b3c <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ade:	f043 0204 	orr.w	r2, r3, #4
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aec:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <I2C_Slave_ISR_DMA+0x13c>
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001afa:	d11f      	bne.n	8001b3c <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001afc:	7dfb      	ldrb	r3, [r7, #23]
 8001afe:	2b21      	cmp	r3, #33	@ 0x21
 8001b00:	d002      	beq.n	8001b08 <I2C_Slave_ISR_DMA+0x148>
 8001b02:	7dfb      	ldrb	r3, [r7, #23]
 8001b04:	2b29      	cmp	r3, #41	@ 0x29
 8001b06:	d103      	bne.n	8001b10 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2221      	movs	r2, #33	@ 0x21
 8001b0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b0e:	e008      	b.n	8001b22 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b22      	cmp	r3, #34	@ 0x22
 8001b14:	d002      	beq.n	8001b1c <I2C_Slave_ISR_DMA+0x15c>
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
 8001b18:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b1a:	d102      	bne.n	8001b22 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2222      	movs	r2, #34	@ 0x22
 8001b20:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	4619      	mov	r1, r3
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 fbbd 	bl	80022a8 <I2C_ITError>
      if (treatdmanack == 1U)
 8001b2e:	e005      	b.n	8001b3c <I2C_Slave_ISR_DMA+0x17c>
 8001b30:	e004      	b.n	8001b3c <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2210      	movs	r2, #16
 8001b38:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001b3a:	e00f      	b.n	8001b5c <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8001b3c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001b3e:	e00d      	b.n	8001b5c <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d008      	beq.n	8001b5c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f809 	bl	8001b6e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3720      	adds	r7, #32
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001b84:	2b28      	cmp	r3, #40	@ 0x28
 8001b86:	d16a      	bne.n	8001c5e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	0c1b      	lsrs	r3, r3, #16
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	0c1b      	lsrs	r3, r3, #16
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001ba6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bb4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001bc2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d138      	bne.n	8001c3e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001bcc:	897b      	ldrh	r3, [r7, #10]
 8001bce:	09db      	lsrs	r3, r3, #7
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	89bb      	ldrh	r3, [r7, #12]
 8001bd4:	4053      	eors	r3, r2
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	f003 0306 	and.w	r3, r3, #6
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d11c      	bne.n	8001c1a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001be0:	897b      	ldrh	r3, [r7, #10]
 8001be2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d13b      	bne.n	8001c6e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2208      	movs	r2, #8
 8001c02:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c0c:	89ba      	ldrh	r2, [r7, #12]
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	4619      	mov	r1, r3
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fb8a 	bl	800132c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001c18:	e029      	b.n	8001c6e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001c1a:	893b      	ldrh	r3, [r7, #8]
 8001c1c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 ff12 	bl	8002a4c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c30:	89ba      	ldrh	r2, [r7, #12]
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fb78 	bl	800132c <HAL_I2C_AddrCallback>
}
 8001c3c:	e017      	b.n	8001c6e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 ff02 	bl	8002a4c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c50:	89ba      	ldrh	r2, [r7, #12]
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	4619      	mov	r1, r3
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fb68 	bl	800132c <HAL_I2C_AddrCallback>
}
 8001c5c:	e007      	b.n	8001c6e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2208      	movs	r2, #8
 8001c64:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b21      	cmp	r3, #33	@ 0x21
 8001c90:	d115      	bne.n	8001cbe <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2220      	movs	r2, #32
 8001c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2211      	movs	r2, #17
 8001c9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 fecf 	bl	8002a4c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fb1a 	bl	80012f0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001cbc:	e014      	b.n	8001ce8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2212      	movs	r2, #18
 8001cca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 feb9 	bl	8002a4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff fb0e 	bl	8001304 <HAL_I2C_MasterRxCpltCallback>
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d008      	beq.n	8001d24 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e00c      	b.n	8001d3e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d007      	beq.n	8001d3e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d3c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b29      	cmp	r3, #41	@ 0x29
 8001d48:	d112      	bne.n	8001d70 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2228      	movs	r2, #40	@ 0x28
 8001d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2221      	movs	r2, #33	@ 0x21
 8001d56:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d58:	2101      	movs	r1, #1
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fe76 	bl	8002a4c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff fad5 	bl	8001318 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001d6e:	e017      	b.n	8001da0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d7a:	d111      	bne.n	8001da0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2228      	movs	r2, #40	@ 0x28
 8001d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2222      	movs	r2, #34	@ 0x22
 8001d88:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fe5d 	bl	8002a4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fb7a 	bl	8000494 <HAL_I2C_SlaveRxCpltCallback>
}
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b21      	cmp	r3, #33	@ 0x21
 8001dc8:	d107      	bne.n	8001dda <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001dca:	2101      	movs	r1, #1
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fe3d 	bl	8002a4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2211      	movs	r2, #17
 8001dd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dd8:	e00c      	b.n	8001df4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b22      	cmp	r3, #34	@ 0x22
 8001de4:	d106      	bne.n	8001df4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001de6:	2102      	movs	r1, #2
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fe2f 	bl	8002a4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2212      	movs	r2, #18
 8001df2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6859      	ldr	r1, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4b4c      	ldr	r3, [pc, #304]	@ (8001f30 <I2C_ITMasterCplt+0x188>)
 8001e00:	400b      	ands	r3, r1
 8001e02:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a49      	ldr	r2, [pc, #292]	@ (8001f34 <I2C_ITMasterCplt+0x18c>)
 8001e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0310 	and.w	r3, r3, #16
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d009      	beq.n	8001e2e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2210      	movs	r2, #16
 8001e20:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f043 0204 	orr.w	r2, r3, #4
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b60      	cmp	r3, #96	@ 0x60
 8001e38:	d10a      	bne.n	8001e50 <I2C_ITMasterCplt+0xa8>
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fb40 	bl	80024d6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b60      	cmp	r3, #96	@ 0x60
 8001e66:	d002      	beq.n	8001e6e <I2C_ITMasterCplt+0xc6>
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	4619      	mov	r1, r3
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fa17 	bl	80022a8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001e7a:	e054      	b.n	8001f26 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b21      	cmp	r3, #33	@ 0x21
 8001e86:	d124      	bne.n	8001ed2 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b40      	cmp	r3, #64	@ 0x40
 8001ea0:	d10b      	bne.n	8001eba <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff fa52 	bl	800135c <HAL_I2C_MemTxCpltCallback>
}
 8001eb8:	e035      	b.n	8001f26 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff fa10 	bl	80012f0 <HAL_I2C_MasterTxCpltCallback>
}
 8001ed0:	e029      	b.n	8001f26 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b22      	cmp	r3, #34	@ 0x22
 8001edc:	d123      	bne.n	8001f26 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b40      	cmp	r3, #64	@ 0x40
 8001ef6:	d10b      	bne.n	8001f10 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff fa31 	bl	8001370 <HAL_I2C_MemRxCpltCallback>
}
 8001f0e:	e00a      	b.n	8001f26 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff f9ef 	bl	8001304 <HAL_I2C_MasterRxCpltCallback>
}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	fe00e800 	.word	0xfe00e800
 8001f34:	ffff0000 	.word	0xffff0000

08001f38 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f52:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f5a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2220      	movs	r2, #32
 8001f62:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f64:	7afb      	ldrb	r3, [r7, #11]
 8001f66:	2b21      	cmp	r3, #33	@ 0x21
 8001f68:	d002      	beq.n	8001f70 <I2C_ITSlaveCplt+0x38>
 8001f6a:	7afb      	ldrb	r3, [r7, #11]
 8001f6c:	2b29      	cmp	r3, #41	@ 0x29
 8001f6e:	d108      	bne.n	8001f82 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001f70:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fd69 	bl	8002a4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2221      	movs	r2, #33	@ 0x21
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f80:	e019      	b.n	8001fb6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001f82:	7afb      	ldrb	r3, [r7, #11]
 8001f84:	2b22      	cmp	r3, #34	@ 0x22
 8001f86:	d002      	beq.n	8001f8e <I2C_ITSlaveCplt+0x56>
 8001f88:	7afb      	ldrb	r3, [r7, #11]
 8001f8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f8c:	d108      	bne.n	8001fa0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001f8e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fd5a 	bl	8002a4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2222      	movs	r2, #34	@ 0x22
 8001f9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f9e:	e00a      	b.n	8001fb6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001fa0:	7afb      	ldrb	r3, [r7, #11]
 8001fa2:	2b28      	cmp	r3, #40	@ 0x28
 8001fa4:	d107      	bne.n	8001fb6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001fa6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fd4e 	bl	8002a4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fc4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b89      	ldr	r3, [pc, #548]	@ (80021f8 <I2C_ITSlaveCplt+0x2c0>)
 8001fd2:	400b      	ands	r3, r1
 8001fd4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fa7d 	bl	80024d6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d013      	beq.n	800200e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001ff4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d01f      	beq.n	800203e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	b29a      	uxth	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800200c:	e017      	b.n	800203e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d012      	beq.n	800203e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002026:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	b29a      	uxth	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d020      	beq.n	800208a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f023 0304 	bic.w	r3, r3, #4
 800204e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00c      	beq.n	800208a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002080:	b29b      	uxth	r3, r3
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002098:	f043 0204 	orr.w	r2, r3, #4
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d049      	beq.n	800213e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d044      	beq.n	800213e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d128      	bne.n	8002110 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b28      	cmp	r3, #40	@ 0x28
 80020c8:	d108      	bne.n	80020dc <I2C_ITSlaveCplt+0x1a4>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020d0:	d104      	bne.n	80020dc <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80020d2:	6979      	ldr	r1, [r7, #20]
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f893 	bl	8002200 <I2C_ITListenCplt>
 80020da:	e030      	b.n	800213e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b29      	cmp	r3, #41	@ 0x29
 80020e6:	d10e      	bne.n	8002106 <I2C_ITSlaveCplt+0x1ce>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020ee:	d00a      	beq.n	8002106 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2210      	movs	r2, #16
 80020f6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f9ec 	bl	80024d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff fdf6 	bl	8001cf0 <I2C_ITSlaveSeqCplt>
 8002104:	e01b      	b.n	800213e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2210      	movs	r2, #16
 800210c:	61da      	str	r2, [r3, #28]
 800210e:	e016      	b.n	800213e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2210      	movs	r2, #16
 8002116:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211c:	f043 0204 	orr.w	r2, r3, #4
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <I2C_ITSlaveCplt+0x1fa>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002130:	d105      	bne.n	800213e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f8b5 	bl	80022a8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002150:	2b00      	cmp	r3, #0
 8002152:	d010      	beq.n	8002176 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f8a4 	bl	80022a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b28      	cmp	r3, #40	@ 0x28
 800216a:	d141      	bne.n	80021f0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800216c:	6979      	ldr	r1, [r7, #20]
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f846 	bl	8002200 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002174:	e03c      	b.n	80021f0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800217e:	d014      	beq.n	80021aa <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff fdb5 	bl	8001cf0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a1c      	ldr	r2, [pc, #112]	@ (80021fc <I2C_ITSlaveCplt+0x2c4>)
 800218a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff f8d0 	bl	8001348 <HAL_I2C_ListenCpltCallback>
}
 80021a8:	e022      	b.n	80021f0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b22      	cmp	r3, #34	@ 0x22
 80021b4:	d10e      	bne.n	80021d4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7fe f961 	bl	8000494 <HAL_I2C_SlaveRxCpltCallback>
}
 80021d2:	e00d      	b.n	80021f0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff f894 	bl	8001318 <HAL_I2C_SlaveTxCpltCallback>
}
 80021f0:	bf00      	nop
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	fe00e800 	.word	0xfe00e800
 80021fc:	ffff0000 	.word	0xffff0000

08002200 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a25      	ldr	r2, [pc, #148]	@ (80022a4 <I2C_ITListenCplt+0xa4>)
 800220e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d022      	beq.n	800227c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002252:	2b00      	cmp	r3, #0
 8002254:	d012      	beq.n	800227c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002274:	f043 0204 	orr.w	r2, r3, #4
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800227c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 fbe3 	bl	8002a4c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2210      	movs	r2, #16
 800228c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff f856 	bl	8001348 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	ffff0000 	.word	0xffff0000

080022a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022b8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a6d      	ldr	r2, [pc, #436]	@ (800247c <I2C_ITError+0x1d4>)
 80022c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	2b28      	cmp	r3, #40	@ 0x28
 80022de:	d005      	beq.n	80022ec <I2C_ITError+0x44>
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	2b29      	cmp	r3, #41	@ 0x29
 80022e4:	d002      	beq.n	80022ec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80022ea:	d10b      	bne.n	8002304 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80022ec:	2103      	movs	r1, #3
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fbac 	bl	8002a4c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2228      	movs	r2, #40	@ 0x28
 80022f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a60      	ldr	r2, [pc, #384]	@ (8002480 <I2C_ITError+0x1d8>)
 8002300:	635a      	str	r2, [r3, #52]	@ 0x34
 8002302:	e030      	b.n	8002366 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002304:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fb9f 	bl	8002a4c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f8e1 	bl	80024d6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b60      	cmp	r3, #96	@ 0x60
 800231e:	d01f      	beq.n	8002360 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f003 0320 	and.w	r3, r3, #32
 8002332:	2b20      	cmp	r3, #32
 8002334:	d114      	bne.n	8002360 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b10      	cmp	r3, #16
 8002342:	d109      	bne.n	8002358 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2210      	movs	r2, #16
 800234a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002350:	f043 0204 	orr.w	r2, r3, #4
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2220      	movs	r2, #32
 800235e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002370:	2b00      	cmp	r3, #0
 8002372:	d039      	beq.n	80023e8 <I2C_ITError+0x140>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b11      	cmp	r3, #17
 8002378:	d002      	beq.n	8002380 <I2C_ITError+0xd8>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b21      	cmp	r3, #33	@ 0x21
 800237e:	d133      	bne.n	80023e8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800238a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800238e:	d107      	bne.n	80023a0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800239e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fbf5 	bl	8000b94 <HAL_DMA_GetState>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d017      	beq.n	80023e0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b4:	4a33      	ldr	r2, [pc, #204]	@ (8002484 <I2C_ITError+0x1dc>)
 80023b6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fb7e 	bl	8000ac6 <HAL_DMA_Abort_IT>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d04d      	beq.n	800246c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80023da:	4610      	mov	r0, r2
 80023dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80023de:	e045      	b.n	800246c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f851 	bl	8002488 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80023e6:	e041      	b.n	800246c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d039      	beq.n	8002464 <I2C_ITError+0x1bc>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b12      	cmp	r3, #18
 80023f4:	d002      	beq.n	80023fc <I2C_ITError+0x154>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b22      	cmp	r3, #34	@ 0x22
 80023fa:	d133      	bne.n	8002464 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002406:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800240a:	d107      	bne.n	800241c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800241a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fbb7 	bl	8000b94 <HAL_DMA_GetState>
 8002426:	4603      	mov	r3, r0
 8002428:	2b01      	cmp	r3, #1
 800242a:	d017      	beq.n	800245c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002430:	4a14      	ldr	r2, [pc, #80]	@ (8002484 <I2C_ITError+0x1dc>)
 8002432:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe fb40 	bl	8000ac6 <HAL_DMA_Abort_IT>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d011      	beq.n	8002470 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002456:	4610      	mov	r0, r2
 8002458:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800245a:	e009      	b.n	8002470 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f813 	bl	8002488 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002462:	e005      	b.n	8002470 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f80f 	bl	8002488 <I2C_TreatErrorCallback>
  }
}
 800246a:	e002      	b.n	8002472 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800246c:	bf00      	nop
 800246e:	e000      	b.n	8002472 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002470:	bf00      	nop
}
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	ffff0000 	.word	0xffff0000
 8002480:	080013ad 	.word	0x080013ad
 8002484:	0800251f 	.word	0x0800251f

08002488 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b60      	cmp	r3, #96	@ 0x60
 800249a:	d10e      	bne.n	80024ba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7fe ff70 	bl	8001398 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80024b8:	e009      	b.n	80024ce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7fe ff5b 	bl	8001384 <HAL_I2C_ErrorCallback>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d103      	bne.n	80024f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2200      	movs	r2, #0
 80024f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d007      	beq.n	8002512 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	619a      	str	r2, [r3, #24]
  }
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002538:	2200      	movs	r2, #0
 800253a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002548:	2200      	movs	r2, #0
 800254a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f7ff ff9b 	bl	8002488 <I2C_TreatErrorCallback>
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	4613      	mov	r3, r2
 8002568:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800256a:	e03b      	b.n	80025e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	6839      	ldr	r1, [r7, #0]
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f8d5 	bl	8002720 <I2C_IsErrorOccurred>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e041      	b.n	8002604 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002586:	d02d      	beq.n	80025e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002588:	f7fe f982 	bl	8000890 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d302      	bcc.n	800259e <I2C_WaitOnFlagUntilTimeout+0x44>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d122      	bne.n	80025e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699a      	ldr	r2, [r3, #24]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4013      	ands	r3, r2
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	bf0c      	ite	eq
 80025ae:	2301      	moveq	r3, #1
 80025b0:	2300      	movne	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d113      	bne.n	80025e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c0:	f043 0220 	orr.w	r2, r3, #32
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e00f      	b.n	8002604 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4013      	ands	r3, r2
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d0b4      	beq.n	800256c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002618:	e033      	b.n	8002682 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f87e 	bl	8002720 <I2C_IsErrorOccurred>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e031      	b.n	8002692 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d025      	beq.n	8002682 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002636:	f7fe f92b 	bl	8000890 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	429a      	cmp	r2, r3
 8002644:	d302      	bcc.n	800264c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d11a      	bne.n	8002682 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b02      	cmp	r3, #2
 8002658:	d013      	beq.n	8002682 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265e:	f043 0220 	orr.w	r2, r3, #32
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e007      	b.n	8002692 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b02      	cmp	r3, #2
 800268e:	d1c4      	bne.n	800261a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026a6:	e02f      	b.n	8002708 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 f837 	bl	8002720 <I2C_IsErrorOccurred>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e02d      	b.n	8002718 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026bc:	f7fe f8e8 	bl	8000890 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d302      	bcc.n	80026d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d11a      	bne.n	8002708 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d013      	beq.n	8002708 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e4:	f043 0220 	orr.w	r2, r3, #32
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e007      	b.n	8002718 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b20      	cmp	r3, #32
 8002714:	d1c8      	bne.n	80026a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	@ 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	2b00      	cmp	r3, #0
 800274a:	d068      	beq.n	800281e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2210      	movs	r2, #16
 8002752:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002754:	e049      	b.n	80027ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d045      	beq.n	80027ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800275e:	f7fe f897 	bl	8000890 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <I2C_IsErrorOccurred+0x54>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d13a      	bne.n	80027ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800277e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002786:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002796:	d121      	bne.n	80027dc <I2C_IsErrorOccurred+0xbc>
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800279e:	d01d      	beq.n	80027dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d01a      	beq.n	80027dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027b6:	f7fe f86b 	bl	8000890 <HAL_GetTick>
 80027ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027bc:	e00e      	b.n	80027dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027be:	f7fe f867 	bl	8000890 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b19      	cmp	r3, #25
 80027ca:	d907      	bls.n	80027dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	f043 0320 	orr.w	r3, r3, #32
 80027d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80027da:	e006      	b.n	80027ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d1e9      	bne.n	80027be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d003      	beq.n	8002800 <I2C_IsErrorOccurred+0xe0>
 80027f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0aa      	beq.n	8002756 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002804:	2b00      	cmp	r3, #0
 8002806:	d103      	bne.n	8002810 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2220      	movs	r2, #32
 800280e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	f043 0304 	orr.w	r3, r3, #4
 8002816:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00b      	beq.n	8002848 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002840:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	f043 0308 	orr.w	r3, r3, #8
 8002858:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002862:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00b      	beq.n	800288c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	f043 0302 	orr.w	r3, r3, #2
 800287a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002884:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800288c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002890:	2b00      	cmp	r3, #0
 8002892:	d01c      	beq.n	80028ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7ff fe1e 	bl	80024d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6859      	ldr	r1, [r3, #4]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <I2C_IsErrorOccurred+0x1bc>)
 80028a6:	400b      	ands	r3, r1
 80028a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80028ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3728      	adds	r7, #40	@ 0x28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	fe00e800 	.word	0xfe00e800

080028e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	607b      	str	r3, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	817b      	strh	r3, [r7, #10]
 80028ee:	4613      	mov	r3, r2
 80028f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028f2:	897b      	ldrh	r3, [r7, #10]
 80028f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028f8:	7a7b      	ldrb	r3, [r7, #9]
 80028fa:	041b      	lsls	r3, r3, #16
 80028fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002900:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	4313      	orrs	r3, r2
 800290a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800290e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	0d5b      	lsrs	r3, r3, #21
 800291a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800291e:	4b08      	ldr	r3, [pc, #32]	@ (8002940 <I2C_TransferConfig+0x60>)
 8002920:	430b      	orrs	r3, r1
 8002922:	43db      	mvns	r3, r3
 8002924:	ea02 0103 	and.w	r1, r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	430a      	orrs	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002932:	bf00      	nop
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	03ff63ff 	.word	0x03ff63ff

08002944 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002958:	4a39      	ldr	r2, [pc, #228]	@ (8002a40 <I2C_Enable_IRQ+0xfc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d032      	beq.n	80029c4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002962:	4a38      	ldr	r2, [pc, #224]	@ (8002a44 <I2C_Enable_IRQ+0x100>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d02d      	beq.n	80029c4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800296c:	4a36      	ldr	r2, [pc, #216]	@ (8002a48 <I2C_Enable_IRQ+0x104>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d028      	beq.n	80029c4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002972:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002976:	2b00      	cmp	r3, #0
 8002978:	da03      	bge.n	8002982 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002980:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002982:	887b      	ldrh	r3, [r7, #2]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002992:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002994:	887b      	ldrh	r3, [r7, #2]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80029a4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80029a6:	887b      	ldrh	r3, [r7, #2]
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d103      	bne.n	80029b4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80029b2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80029b4:	887b      	ldrh	r3, [r7, #2]
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d133      	bne.n	8002a22 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f043 0320 	orr.w	r3, r3, #32
 80029c0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80029c2:	e02e      	b.n	8002a22 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80029c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da03      	bge.n	80029d4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80029d2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80029d4:	887b      	ldrh	r3, [r7, #2]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80029e4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80029e6:	887b      	ldrh	r3, [r7, #2]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80029f6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80029f8:	887b      	ldrh	r3, [r7, #2]
 80029fa:	2b10      	cmp	r3, #16
 80029fc:	d103      	bne.n	8002a06 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002a04:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002a06:	887b      	ldrh	r3, [r7, #2]
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d103      	bne.n	8002a14 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002a12:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002a14:	887b      	ldrh	r3, [r7, #2]
 8002a16:	2b40      	cmp	r3, #64	@ 0x40
 8002a18:	d103      	bne.n	8002a22 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a20:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6819      	ldr	r1, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	0800159f 	.word	0x0800159f
 8002a44:	080019c1 	.word	0x080019c1
 8002a48:	08001775 	.word	0x08001775

08002a4c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002a5c:	887b      	ldrh	r3, [r7, #2]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00f      	beq.n	8002a86 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002a6c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a7a:	2b28      	cmp	r3, #40	@ 0x28
 8002a7c:	d003      	beq.n	8002a86 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002a84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00f      	beq.n	8002ab0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002a96:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002aa4:	2b28      	cmp	r3, #40	@ 0x28
 8002aa6:	d003      	beq.n	8002ab0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002aae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002ab0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	da03      	bge.n	8002ac0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002abe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d103      	bne.n	8002ace <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002acc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002ace:	887b      	ldrh	r3, [r7, #2]
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d103      	bne.n	8002adc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f043 0320 	orr.w	r3, r3, #32
 8002ada:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002adc:	887b      	ldrh	r3, [r7, #2]
 8002ade:	2b40      	cmp	r3, #64	@ 0x40
 8002ae0:	d103      	bne.n	8002aea <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6819      	ldr	r1, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43da      	mvns	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	400a      	ands	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d138      	bne.n	8002b90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e032      	b.n	8002b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2224      	movs	r2, #36	@ 0x24
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d139      	bne.n	8002c28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e033      	b.n	8002c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2224      	movs	r2, #36	@ 0x24
 8002bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e000      	b.n	8002c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
  }
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d141      	bne.n	8002cca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c46:	4b4b      	ldr	r3, [pc, #300]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c52:	d131      	bne.n	8002cb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c54:	4b47      	ldr	r3, [pc, #284]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c5a:	4a46      	ldr	r2, [pc, #280]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c64:	4b43      	ldr	r3, [pc, #268]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c6c:	4a41      	ldr	r2, [pc, #260]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c74:	4b40      	ldr	r3, [pc, #256]	@ (8002d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2232      	movs	r2, #50	@ 0x32
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	4a3f      	ldr	r2, [pc, #252]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	0c9b      	lsrs	r3, r3, #18
 8002c86:	3301      	adds	r3, #1
 8002c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c8a:	e002      	b.n	8002c92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c92:	4b38      	ldr	r3, [pc, #224]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c9e:	d102      	bne.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f2      	bne.n	8002c8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ca6:	4b33      	ldr	r3, [pc, #204]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb2:	d158      	bne.n	8002d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e057      	b.n	8002d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002cc8:	e04d      	b.n	8002d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cd0:	d141      	bne.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cd2:	4b28      	ldr	r3, [pc, #160]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cde:	d131      	bne.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ce0:	4b24      	ldr	r3, [pc, #144]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ce6:	4a23      	ldr	r2, [pc, #140]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cf0:	4b20      	ldr	r3, [pc, #128]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d00:	4b1d      	ldr	r3, [pc, #116]	@ (8002d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2232      	movs	r2, #50	@ 0x32
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	0c9b      	lsrs	r3, r3, #18
 8002d12:	3301      	adds	r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d16:	e002      	b.n	8002d1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d1e:	4b15      	ldr	r3, [pc, #84]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d2a:	d102      	bne.n	8002d32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f2      	bne.n	8002d18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d32:	4b10      	ldr	r3, [pc, #64]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d3e:	d112      	bne.n	8002d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e011      	b.n	8002d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d44:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d54:	e007      	b.n	8002d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d56:	4b07      	ldr	r3, [pc, #28]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d5e:	4a05      	ldr	r2, [pc, #20]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40007000 	.word	0x40007000
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	431bde83 	.word	0x431bde83

08002d80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d84:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4a04      	ldr	r2, [pc, #16]	@ (8002d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d8e:	6093      	str	r3, [r2, #8]
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40007000 	.word	0x40007000

08002da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e2fe      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d075      	beq.n	8002eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dbe:	4b97      	ldr	r3, [pc, #604]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dc8:	4b94      	ldr	r3, [pc, #592]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b0c      	cmp	r3, #12
 8002dd6:	d102      	bne.n	8002dde <HAL_RCC_OscConfig+0x3e>
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d002      	beq.n	8002de4 <HAL_RCC_OscConfig+0x44>
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d10b      	bne.n	8002dfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de4:	4b8d      	ldr	r3, [pc, #564]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d05b      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x108>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d157      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e2d9      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e04:	d106      	bne.n	8002e14 <HAL_RCC_OscConfig+0x74>
 8002e06:	4b85      	ldr	r3, [pc, #532]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a84      	ldr	r2, [pc, #528]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e01d      	b.n	8002e50 <HAL_RCC_OscConfig+0xb0>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x98>
 8002e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7e      	ldr	r2, [pc, #504]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b7c      	ldr	r3, [pc, #496]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a7b      	ldr	r2, [pc, #492]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e00b      	b.n	8002e50 <HAL_RCC_OscConfig+0xb0>
 8002e38:	4b78      	ldr	r3, [pc, #480]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a77      	ldr	r2, [pc, #476]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	4b75      	ldr	r3, [pc, #468]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a74      	ldr	r2, [pc, #464]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d013      	beq.n	8002e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fd fd1a 	bl	8000890 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fd fd16 	bl	8000890 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	@ 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e29e      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e72:	4b6a      	ldr	r3, [pc, #424]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0xc0>
 8002e7e:	e014      	b.n	8002eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fd fd06 	bl	8000890 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e88:	f7fd fd02 	bl	8000890 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	@ 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e28a      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e9a:	4b60      	ldr	r3, [pc, #384]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0xe8>
 8002ea6:	e000      	b.n	8002eaa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d075      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eb6:	4b59      	ldr	r3, [pc, #356]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ec0:	4b56      	ldr	r3, [pc, #344]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b0c      	cmp	r3, #12
 8002ece:	d102      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x136>
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_OscConfig+0x13c>
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d11f      	bne.n	8002f1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002edc:	4b4f      	ldr	r3, [pc, #316]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x154>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e25d      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef4:	4b49      	ldr	r3, [pc, #292]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	061b      	lsls	r3, r3, #24
 8002f02:	4946      	ldr	r1, [pc, #280]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f08:	4b45      	ldr	r3, [pc, #276]	@ (8003020 <HAL_RCC_OscConfig+0x280>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fc73 	bl	80007f8 <HAL_InitTick>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d043      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e249      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d023      	beq.n	8002f6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f24:	4b3d      	ldr	r3, [pc, #244]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a3c      	ldr	r2, [pc, #240]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fd fcae 	bl	8000890 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f38:	f7fd fcaa 	bl	8000890 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e232      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f4a:	4b34      	ldr	r3, [pc, #208]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f56:	4b31      	ldr	r3, [pc, #196]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	061b      	lsls	r3, r3, #24
 8002f64:	492d      	ldr	r1, [pc, #180]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
 8002f6a:	e01a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a2a      	ldr	r2, [pc, #168]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002f72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fd fc8a 	bl	8000890 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f80:	f7fd fc86 	bl	8000890 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e20e      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f92:	4b22      	ldr	r3, [pc, #136]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x1e0>
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d041      	beq.n	8003032 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01c      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb6:	4b19      	ldr	r3, [pc, #100]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fbc:	4a17      	ldr	r2, [pc, #92]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc6:	f7fd fc63 	bl	8000890 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fce:	f7fd fc5f 	bl	8000890 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e1e7      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0ef      	beq.n	8002fce <HAL_RCC_OscConfig+0x22e>
 8002fee:	e020      	b.n	8003032 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ff6:	4a09      	ldr	r2, [pc, #36]	@ (800301c <HAL_RCC_OscConfig+0x27c>)
 8002ff8:	f023 0301 	bic.w	r3, r3, #1
 8002ffc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003000:	f7fd fc46 	bl	8000890 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003006:	e00d      	b.n	8003024 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003008:	f7fd fc42 	bl	8000890 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d906      	bls.n	8003024 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e1ca      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000
 8003020:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003024:	4b8c      	ldr	r3, [pc, #560]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 8003026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1ea      	bne.n	8003008 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80a6 	beq.w	800318c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003040:	2300      	movs	r3, #0
 8003042:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003044:	4b84      	ldr	r3, [pc, #528]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 8003046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_OscConfig+0x2b4>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <HAL_RCC_OscConfig+0x2b6>
 8003054:	2300      	movs	r3, #0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00d      	beq.n	8003076 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	4b7f      	ldr	r3, [pc, #508]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 800305c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305e:	4a7e      	ldr	r2, [pc, #504]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003064:	6593      	str	r3, [r2, #88]	@ 0x58
 8003066:	4b7c      	ldr	r3, [pc, #496]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 8003068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003072:	2301      	movs	r3, #1
 8003074:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003076:	4b79      	ldr	r3, [pc, #484]	@ (800325c <HAL_RCC_OscConfig+0x4bc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d118      	bne.n	80030b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003082:	4b76      	ldr	r3, [pc, #472]	@ (800325c <HAL_RCC_OscConfig+0x4bc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a75      	ldr	r2, [pc, #468]	@ (800325c <HAL_RCC_OscConfig+0x4bc>)
 8003088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800308c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308e:	f7fd fbff 	bl	8000890 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003096:	f7fd fbfb 	bl	8000890 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e183      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a8:	4b6c      	ldr	r3, [pc, #432]	@ (800325c <HAL_RCC_OscConfig+0x4bc>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d108      	bne.n	80030ce <HAL_RCC_OscConfig+0x32e>
 80030bc:	4b66      	ldr	r3, [pc, #408]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c2:	4a65      	ldr	r2, [pc, #404]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030cc:	e024      	b.n	8003118 <HAL_RCC_OscConfig+0x378>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b05      	cmp	r3, #5
 80030d4:	d110      	bne.n	80030f8 <HAL_RCC_OscConfig+0x358>
 80030d6:	4b60      	ldr	r3, [pc, #384]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030dc:	4a5e      	ldr	r2, [pc, #376]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 80030de:	f043 0304 	orr.w	r3, r3, #4
 80030e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030f6:	e00f      	b.n	8003118 <HAL_RCC_OscConfig+0x378>
 80030f8:	4b57      	ldr	r3, [pc, #348]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fe:	4a56      	ldr	r2, [pc, #344]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003108:	4b53      	ldr	r3, [pc, #332]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310e:	4a52      	ldr	r2, [pc, #328]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 8003110:	f023 0304 	bic.w	r3, r3, #4
 8003114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d016      	beq.n	800314e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fd fbb6 	bl	8000890 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003126:	e00a      	b.n	800313e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7fd fbb2 	bl	8000890 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e138      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313e:	4b46      	ldr	r3, [pc, #280]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0ed      	beq.n	8003128 <HAL_RCC_OscConfig+0x388>
 800314c:	e015      	b.n	800317a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314e:	f7fd fb9f 	bl	8000890 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003154:	e00a      	b.n	800316c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003156:	f7fd fb9b 	bl	8000890 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003164:	4293      	cmp	r3, r2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e121      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800316c:	4b3a      	ldr	r3, [pc, #232]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1ed      	bne.n	8003156 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800317a:	7ffb      	ldrb	r3, [r7, #31]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d105      	bne.n	800318c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003180:	4b35      	ldr	r3, [pc, #212]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 8003182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003184:	4a34      	ldr	r2, [pc, #208]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 8003186:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800318a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0320 	and.w	r3, r3, #32
 8003194:	2b00      	cmp	r3, #0
 8003196:	d03c      	beq.n	8003212 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01c      	beq.n	80031da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 80031a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7fd fb6e 	bl	8000890 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031b8:	f7fd fb6a 	bl	8000890 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0f2      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ca:	4b23      	ldr	r3, [pc, #140]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 80031cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ef      	beq.n	80031b8 <HAL_RCC_OscConfig+0x418>
 80031d8:	e01b      	b.n	8003212 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031da:	4b1f      	ldr	r3, [pc, #124]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 80031dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ea:	f7fd fb51 	bl	8000890 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031f2:	f7fd fb4d 	bl	8000890 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0d5      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003204:	4b14      	ldr	r3, [pc, #80]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 8003206:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1ef      	bne.n	80031f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 80c9 	beq.w	80033ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800321c:	4b0e      	ldr	r3, [pc, #56]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 030c 	and.w	r3, r3, #12
 8003224:	2b0c      	cmp	r3, #12
 8003226:	f000 8083 	beq.w	8003330 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d15e      	bne.n	80032f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003232:	4b09      	ldr	r3, [pc, #36]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a08      	ldr	r2, [pc, #32]	@ (8003258 <HAL_RCC_OscConfig+0x4b8>)
 8003238:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800323c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323e:	f7fd fb27 	bl	8000890 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003244:	e00c      	b.n	8003260 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003246:	f7fd fb23 	bl	8000890 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d905      	bls.n	8003260 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e0ab      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
 8003258:	40021000 	.word	0x40021000
 800325c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003260:	4b55      	ldr	r3, [pc, #340]	@ (80033b8 <HAL_RCC_OscConfig+0x618>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1ec      	bne.n	8003246 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800326c:	4b52      	ldr	r3, [pc, #328]	@ (80033b8 <HAL_RCC_OscConfig+0x618>)
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	4b52      	ldr	r3, [pc, #328]	@ (80033bc <HAL_RCC_OscConfig+0x61c>)
 8003272:	4013      	ands	r3, r2
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6a11      	ldr	r1, [r2, #32]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800327c:	3a01      	subs	r2, #1
 800327e:	0112      	lsls	r2, r2, #4
 8003280:	4311      	orrs	r1, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003286:	0212      	lsls	r2, r2, #8
 8003288:	4311      	orrs	r1, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800328e:	0852      	lsrs	r2, r2, #1
 8003290:	3a01      	subs	r2, #1
 8003292:	0552      	lsls	r2, r2, #21
 8003294:	4311      	orrs	r1, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800329a:	0852      	lsrs	r2, r2, #1
 800329c:	3a01      	subs	r2, #1
 800329e:	0652      	lsls	r2, r2, #25
 80032a0:	4311      	orrs	r1, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032a6:	06d2      	lsls	r2, r2, #27
 80032a8:	430a      	orrs	r2, r1
 80032aa:	4943      	ldr	r1, [pc, #268]	@ (80033b8 <HAL_RCC_OscConfig+0x618>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b0:	4b41      	ldr	r3, [pc, #260]	@ (80033b8 <HAL_RCC_OscConfig+0x618>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a40      	ldr	r2, [pc, #256]	@ (80033b8 <HAL_RCC_OscConfig+0x618>)
 80032b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032bc:	4b3e      	ldr	r3, [pc, #248]	@ (80033b8 <HAL_RCC_OscConfig+0x618>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4a3d      	ldr	r2, [pc, #244]	@ (80033b8 <HAL_RCC_OscConfig+0x618>)
 80032c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fd fae2 	bl	8000890 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fd fade 	bl	8000890 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e066      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e2:	4b35      	ldr	r3, [pc, #212]	@ (80033b8 <HAL_RCC_OscConfig+0x618>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x530>
 80032ee:	e05e      	b.n	80033ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f0:	4b31      	ldr	r3, [pc, #196]	@ (80033b8 <HAL_RCC_OscConfig+0x618>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a30      	ldr	r2, [pc, #192]	@ (80033b8 <HAL_RCC_OscConfig+0x618>)
 80032f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fd fac8 	bl	8000890 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003304:	f7fd fac4 	bl	8000890 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e04c      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003316:	4b28      	ldr	r3, [pc, #160]	@ (80033b8 <HAL_RCC_OscConfig+0x618>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003322:	4b25      	ldr	r3, [pc, #148]	@ (80033b8 <HAL_RCC_OscConfig+0x618>)
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	4924      	ldr	r1, [pc, #144]	@ (80033b8 <HAL_RCC_OscConfig+0x618>)
 8003328:	4b25      	ldr	r3, [pc, #148]	@ (80033c0 <HAL_RCC_OscConfig+0x620>)
 800332a:	4013      	ands	r3, r2
 800332c:	60cb      	str	r3, [r1, #12]
 800332e:	e03e      	b.n	80033ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e039      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800333c:	4b1e      	ldr	r3, [pc, #120]	@ (80033b8 <HAL_RCC_OscConfig+0x618>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f003 0203 	and.w	r2, r3, #3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	429a      	cmp	r2, r3
 800334e:	d12c      	bne.n	80033aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335a:	3b01      	subs	r3, #1
 800335c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d123      	bne.n	80033aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d11b      	bne.n	80033aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d113      	bne.n	80033aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338c:	085b      	lsrs	r3, r3, #1
 800338e:	3b01      	subs	r3, #1
 8003390:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d109      	bne.n	80033aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	3b01      	subs	r3, #1
 80033a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d001      	beq.n	80033ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3720      	adds	r7, #32
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40021000 	.word	0x40021000
 80033bc:	019f800c 	.word	0x019f800c
 80033c0:	feeefffc 	.word	0xfeeefffc

080033c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e11e      	b.n	800361a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033dc:	4b91      	ldr	r3, [pc, #580]	@ (8003624 <HAL_RCC_ClockConfig+0x260>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d910      	bls.n	800340c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ea:	4b8e      	ldr	r3, [pc, #568]	@ (8003624 <HAL_RCC_ClockConfig+0x260>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 020f 	bic.w	r2, r3, #15
 80033f2:	498c      	ldr	r1, [pc, #560]	@ (8003624 <HAL_RCC_ClockConfig+0x260>)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b8a      	ldr	r3, [pc, #552]	@ (8003624 <HAL_RCC_ClockConfig+0x260>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e106      	b.n	800361a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d073      	beq.n	8003500 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d129      	bne.n	8003474 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003420:	4b81      	ldr	r3, [pc, #516]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0f4      	b.n	800361a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003430:	f000 f966 	bl	8003700 <RCC_GetSysClockFreqFromPLLSource>
 8003434:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4a7c      	ldr	r2, [pc, #496]	@ (800362c <HAL_RCC_ClockConfig+0x268>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d93f      	bls.n	80034be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800343e:	4b7a      	ldr	r3, [pc, #488]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003452:	2b00      	cmp	r3, #0
 8003454:	d033      	beq.n	80034be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800345a:	2b00      	cmp	r3, #0
 800345c:	d12f      	bne.n	80034be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800345e:	4b72      	ldr	r3, [pc, #456]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003466:	4a70      	ldr	r2, [pc, #448]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 8003468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800346c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800346e:	2380      	movs	r3, #128	@ 0x80
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e024      	b.n	80034be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d107      	bne.n	800348c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800347c:	4b6a      	ldr	r3, [pc, #424]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0c6      	b.n	800361a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800348c:	4b66      	ldr	r3, [pc, #408]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0be      	b.n	800361a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800349c:	f000 f8ce 	bl	800363c <HAL_RCC_GetSysClockFreq>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4a61      	ldr	r2, [pc, #388]	@ (800362c <HAL_RCC_ClockConfig+0x268>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d909      	bls.n	80034be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034b2:	4a5d      	ldr	r2, [pc, #372]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 80034b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034ba:	2380      	movs	r3, #128	@ 0x80
 80034bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034be:	4b5a      	ldr	r3, [pc, #360]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f023 0203 	bic.w	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	4957      	ldr	r1, [pc, #348]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d0:	f7fd f9de 	bl	8000890 <HAL_GetTick>
 80034d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d8:	f7fd f9da 	bl	8000890 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e095      	b.n	800361a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ee:	4b4e      	ldr	r3, [pc, #312]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 020c 	and.w	r2, r3, #12
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d1eb      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d023      	beq.n	8003554 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003518:	4b43      	ldr	r3, [pc, #268]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a42      	ldr	r2, [pc, #264]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 800351e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003522:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003530:	4b3d      	ldr	r3, [pc, #244]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003538:	4a3b      	ldr	r2, [pc, #236]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 800353a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800353e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003540:	4b39      	ldr	r3, [pc, #228]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	4936      	ldr	r1, [pc, #216]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
 8003552:	e008      	b.n	8003566 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2b80      	cmp	r3, #128	@ 0x80
 8003558:	d105      	bne.n	8003566 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800355a:	4b33      	ldr	r3, [pc, #204]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	4a32      	ldr	r2, [pc, #200]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 8003560:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003564:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003566:	4b2f      	ldr	r3, [pc, #188]	@ (8003624 <HAL_RCC_ClockConfig+0x260>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d21d      	bcs.n	80035b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003574:	4b2b      	ldr	r3, [pc, #172]	@ (8003624 <HAL_RCC_ClockConfig+0x260>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f023 020f 	bic.w	r2, r3, #15
 800357c:	4929      	ldr	r1, [pc, #164]	@ (8003624 <HAL_RCC_ClockConfig+0x260>)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	4313      	orrs	r3, r2
 8003582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003584:	f7fd f984 	bl	8000890 <HAL_GetTick>
 8003588:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800358c:	f7fd f980 	bl	8000890 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e03b      	b.n	800361a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b20      	ldr	r3, [pc, #128]	@ (8003624 <HAL_RCC_ClockConfig+0x260>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d1ed      	bne.n	800358c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4917      	ldr	r1, [pc, #92]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035da:	4b13      	ldr	r3, [pc, #76]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	490f      	ldr	r1, [pc, #60]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035ee:	f000 f825 	bl	800363c <HAL_RCC_GetSysClockFreq>
 80035f2:	4602      	mov	r2, r0
 80035f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003628 <HAL_RCC_ClockConfig+0x264>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	091b      	lsrs	r3, r3, #4
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	490c      	ldr	r1, [pc, #48]	@ (8003630 <HAL_RCC_ClockConfig+0x26c>)
 8003600:	5ccb      	ldrb	r3, [r1, r3]
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	fa22 f303 	lsr.w	r3, r2, r3
 800360a:	4a0a      	ldr	r2, [pc, #40]	@ (8003634 <HAL_RCC_ClockConfig+0x270>)
 800360c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800360e:	4b0a      	ldr	r3, [pc, #40]	@ (8003638 <HAL_RCC_ClockConfig+0x274>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd f8f0 	bl	80007f8 <HAL_InitTick>
 8003618:	4603      	mov	r3, r0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40022000 	.word	0x40022000
 8003628:	40021000 	.word	0x40021000
 800362c:	04c4b400 	.word	0x04c4b400
 8003630:	08003c80 	.word	0x08003c80
 8003634:	20000000 	.word	0x20000000
 8003638:	20000004 	.word	0x20000004

0800363c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003642:	4b2c      	ldr	r3, [pc, #176]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b04      	cmp	r3, #4
 800364c:	d102      	bne.n	8003654 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800364e:	4b2a      	ldr	r3, [pc, #168]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	e047      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003654:	4b27      	ldr	r3, [pc, #156]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	2b08      	cmp	r3, #8
 800365e:	d102      	bne.n	8003666 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003660:	4b26      	ldr	r3, [pc, #152]	@ (80036fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	e03e      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003666:	4b23      	ldr	r3, [pc, #140]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b0c      	cmp	r3, #12
 8003670:	d136      	bne.n	80036e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003672:	4b20      	ldr	r3, [pc, #128]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800367c:	4b1d      	ldr	r3, [pc, #116]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	3301      	adds	r3, #1
 8003688:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d10c      	bne.n	80036aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003690:	4a1a      	ldr	r2, [pc, #104]	@ (80036fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	4a16      	ldr	r2, [pc, #88]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800369a:	68d2      	ldr	r2, [r2, #12]
 800369c:	0a12      	lsrs	r2, r2, #8
 800369e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036a2:	fb02 f303 	mul.w	r3, r2, r3
 80036a6:	617b      	str	r3, [r7, #20]
      break;
 80036a8:	e00c      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036aa:	4a13      	ldr	r2, [pc, #76]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	4a10      	ldr	r2, [pc, #64]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b4:	68d2      	ldr	r2, [r2, #12]
 80036b6:	0a12      	lsrs	r2, r2, #8
 80036b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036bc:	fb02 f303 	mul.w	r3, r2, r3
 80036c0:	617b      	str	r3, [r7, #20]
      break;
 80036c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036c4:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	0e5b      	lsrs	r3, r3, #25
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	3301      	adds	r3, #1
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	e001      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80036e4:	693b      	ldr	r3, [r7, #16]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40021000 	.word	0x40021000
 80036f8:	00f42400 	.word	0x00f42400
 80036fc:	007a1200 	.word	0x007a1200

08003700 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003706:	4b1e      	ldr	r3, [pc, #120]	@ (8003780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003710:	4b1b      	ldr	r3, [pc, #108]	@ (8003780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	3301      	adds	r3, #1
 800371c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b03      	cmp	r3, #3
 8003722:	d10c      	bne.n	800373e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003724:	4a17      	ldr	r2, [pc, #92]	@ (8003784 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	4a14      	ldr	r2, [pc, #80]	@ (8003780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800372e:	68d2      	ldr	r2, [r2, #12]
 8003730:	0a12      	lsrs	r2, r2, #8
 8003732:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003736:	fb02 f303 	mul.w	r3, r2, r3
 800373a:	617b      	str	r3, [r7, #20]
    break;
 800373c:	e00c      	b.n	8003758 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800373e:	4a12      	ldr	r2, [pc, #72]	@ (8003788 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	fbb2 f3f3 	udiv	r3, r2, r3
 8003746:	4a0e      	ldr	r2, [pc, #56]	@ (8003780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003748:	68d2      	ldr	r2, [r2, #12]
 800374a:	0a12      	lsrs	r2, r2, #8
 800374c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003750:	fb02 f303 	mul.w	r3, r2, r3
 8003754:	617b      	str	r3, [r7, #20]
    break;
 8003756:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003758:	4b09      	ldr	r3, [pc, #36]	@ (8003780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	0e5b      	lsrs	r3, r3, #25
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	3301      	adds	r3, #1
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003772:	687b      	ldr	r3, [r7, #4]
}
 8003774:	4618      	mov	r0, r3
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	40021000 	.word	0x40021000
 8003784:	007a1200 	.word	0x007a1200
 8003788:	00f42400 	.word	0x00f42400

0800378c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003794:	2300      	movs	r3, #0
 8003796:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003798:	2300      	movs	r3, #0
 800379a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8098 	beq.w	80038da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037aa:	2300      	movs	r3, #0
 80037ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ae:	4b43      	ldr	r3, [pc, #268]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10d      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ba:	4b40      	ldr	r3, [pc, #256]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037be:	4a3f      	ldr	r2, [pc, #252]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80037c6:	4b3d      	ldr	r3, [pc, #244]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d2:	2301      	movs	r3, #1
 80037d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037d6:	4b3a      	ldr	r3, [pc, #232]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a39      	ldr	r2, [pc, #228]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037e2:	f7fd f855 	bl	8000890 <HAL_GetTick>
 80037e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037e8:	e009      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ea:	f7fd f851 	bl	8000890 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d902      	bls.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	74fb      	strb	r3, [r7, #19]
        break;
 80037fc:	e005      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037fe:	4b30      	ldr	r3, [pc, #192]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0ef      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800380a:	7cfb      	ldrb	r3, [r7, #19]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d159      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003810:	4b2a      	ldr	r3, [pc, #168]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800381a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01e      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	429a      	cmp	r2, r3
 800382a:	d019      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800382c:	4b23      	ldr	r3, [pc, #140]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003832:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003836:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003838:	4b20      	ldr	r3, [pc, #128]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383e:	4a1f      	ldr	r2, [pc, #124]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003848:	4b1c      	ldr	r3, [pc, #112]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384e:	4a1b      	ldr	r2, [pc, #108]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003858:	4a18      	ldr	r2, [pc, #96]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d016      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386a:	f7fd f811 	bl	8000890 <HAL_GetTick>
 800386e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003870:	e00b      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003872:	f7fd f80d 	bl	8000890 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003880:	4293      	cmp	r3, r2
 8003882:	d902      	bls.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	74fb      	strb	r3, [r7, #19]
            break;
 8003888:	e006      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388a:	4b0c      	ldr	r3, [pc, #48]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ec      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800389e:	4b07      	ldr	r3, [pc, #28]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ac:	4903      	ldr	r1, [pc, #12]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038b4:	e008      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038b6:	7cfb      	ldrb	r3, [r7, #19]
 80038b8:	74bb      	strb	r3, [r7, #18]
 80038ba:	e005      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038bc:	40021000 	.word	0x40021000
 80038c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	7cfb      	ldrb	r3, [r7, #19]
 80038c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038c8:	7c7b      	ldrb	r3, [r7, #17]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d105      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ce:	4ba7      	ldr	r3, [pc, #668]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d2:	4aa6      	ldr	r2, [pc, #664]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038e6:	4ba1      	ldr	r3, [pc, #644]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ec:	f023 0203 	bic.w	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	499d      	ldr	r1, [pc, #628]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003908:	4b98      	ldr	r3, [pc, #608]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390e:	f023 020c 	bic.w	r2, r3, #12
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	4995      	ldr	r1, [pc, #596]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800392a:	4b90      	ldr	r3, [pc, #576]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003930:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	498c      	ldr	r1, [pc, #560]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800394c:	4b87      	ldr	r3, [pc, #540]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003952:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	4984      	ldr	r1, [pc, #528]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0310 	and.w	r3, r3, #16
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800396e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003974:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	497b      	ldr	r1, [pc, #492]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003990:	4b76      	ldr	r3, [pc, #472]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003996:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	4973      	ldr	r1, [pc, #460]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039b2:	4b6e      	ldr	r3, [pc, #440]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	496a      	ldr	r1, [pc, #424]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039d4:	4b65      	ldr	r3, [pc, #404]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	4962      	ldr	r1, [pc, #392]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039f6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	4959      	ldr	r1, [pc, #356]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a18:	4b54      	ldr	r3, [pc, #336]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a26:	4951      	ldr	r1, [pc, #324]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d015      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a3a:	4b4c      	ldr	r3, [pc, #304]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a48:	4948      	ldr	r1, [pc, #288]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a58:	d105      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a5a:	4b44      	ldr	r3, [pc, #272]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	4a43      	ldr	r2, [pc, #268]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a64:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d015      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a72:	4b3e      	ldr	r3, [pc, #248]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a80:	493a      	ldr	r1, [pc, #232]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a90:	d105      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a92:	4b36      	ldr	r3, [pc, #216]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	4a35      	ldr	r2, [pc, #212]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a9c:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d015      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003aaa:	4b30      	ldr	r3, [pc, #192]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab8:	492c      	ldr	r1, [pc, #176]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ac8:	d105      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aca:	4b28      	ldr	r3, [pc, #160]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	4a27      	ldr	r2, [pc, #156]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ad4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d015      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ae2:	4b22      	ldr	r3, [pc, #136]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af0:	491e      	ldr	r1, [pc, #120]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b00:	d105      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b02:	4b1a      	ldr	r3, [pc, #104]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	4a19      	ldr	r2, [pc, #100]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b0c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d015      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b1a:	4b14      	ldr	r3, [pc, #80]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b20:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b28:	4910      	ldr	r1, [pc, #64]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b38:	d105      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	4a0b      	ldr	r2, [pc, #44]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b44:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d018      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b52:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b58:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b60:	4902      	ldr	r1, [pc, #8]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	e001      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b76:	d105      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b78:	4b21      	ldr	r3, [pc, #132]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4a20      	ldr	r2, [pc, #128]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b82:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d015      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b90:	4b1b      	ldr	r3, [pc, #108]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b96:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9e:	4918      	ldr	r1, [pc, #96]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bae:	d105      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bb0:	4b13      	ldr	r3, [pc, #76]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4a12      	ldr	r2, [pc, #72]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d015      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bd6:	490a      	ldr	r1, [pc, #40]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003be6:	d105      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003be8:	4b05      	ldr	r3, [pc, #20]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4a04      	ldr	r2, [pc, #16]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003bee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bf2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003bf4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000

08003c04 <memset>:
 8003c04:	4402      	add	r2, r0
 8003c06:	4603      	mov	r3, r0
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <memset+0xa>
 8003c0c:	4770      	bx	lr
 8003c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c12:	e7f9      	b.n	8003c08 <memset+0x4>

08003c14 <__libc_init_array>:
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	4d0d      	ldr	r5, [pc, #52]	@ (8003c4c <__libc_init_array+0x38>)
 8003c18:	4c0d      	ldr	r4, [pc, #52]	@ (8003c50 <__libc_init_array+0x3c>)
 8003c1a:	1b64      	subs	r4, r4, r5
 8003c1c:	10a4      	asrs	r4, r4, #2
 8003c1e:	2600      	movs	r6, #0
 8003c20:	42a6      	cmp	r6, r4
 8003c22:	d109      	bne.n	8003c38 <__libc_init_array+0x24>
 8003c24:	4d0b      	ldr	r5, [pc, #44]	@ (8003c54 <__libc_init_array+0x40>)
 8003c26:	4c0c      	ldr	r4, [pc, #48]	@ (8003c58 <__libc_init_array+0x44>)
 8003c28:	f000 f818 	bl	8003c5c <_init>
 8003c2c:	1b64      	subs	r4, r4, r5
 8003c2e:	10a4      	asrs	r4, r4, #2
 8003c30:	2600      	movs	r6, #0
 8003c32:	42a6      	cmp	r6, r4
 8003c34:	d105      	bne.n	8003c42 <__libc_init_array+0x2e>
 8003c36:	bd70      	pop	{r4, r5, r6, pc}
 8003c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c3c:	4798      	blx	r3
 8003c3e:	3601      	adds	r6, #1
 8003c40:	e7ee      	b.n	8003c20 <__libc_init_array+0xc>
 8003c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c46:	4798      	blx	r3
 8003c48:	3601      	adds	r6, #1
 8003c4a:	e7f2      	b.n	8003c32 <__libc_init_array+0x1e>
 8003c4c:	08003c90 	.word	0x08003c90
 8003c50:	08003c90 	.word	0x08003c90
 8003c54:	08003c90 	.word	0x08003c90
 8003c58:	08003c94 	.word	0x08003c94

08003c5c <_init>:
 8003c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5e:	bf00      	nop
 8003c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c62:	bc08      	pop	{r3}
 8003c64:	469e      	mov	lr, r3
 8003c66:	4770      	bx	lr

08003c68 <_fini>:
 8003c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6a:	bf00      	nop
 8003c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6e:	bc08      	pop	{r3}
 8003c70:	469e      	mov	lr, r3
 8003c72:	4770      	bx	lr
