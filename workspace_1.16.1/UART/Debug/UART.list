
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c8c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002e64  08002e64  00003e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ea4  08002ea4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ea4  08002ea4  00003ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002eac  08002eac  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eac  08002eac  00003eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002eb0  08002eb0  00003eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002eb4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002ec0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002ec0  000040c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba5d  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a4a  00000000  00000000  0000fa99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  000114e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000732  00000000  00000000  00011e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cdf9  00000000  00000000  0001257a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb27  00000000  00000000  0002f373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b959c  00000000  00000000  0003ae9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4436  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025a0  00000000  00000000  000f447c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000f6a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002e4c 	.word	0x08002e4c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002e4c 	.word	0x08002e4c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 f9b9 	bl	8000882 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f81a 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8b0 	bl	8000678 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 f862 	bl	80005e0 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_UART_Receive(&huart2, &Buf, 1, 1000) == HAL_OK){
 800051c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000520:	2201      	movs	r2, #1
 8000522:	4907      	ldr	r1, [pc, #28]	@ (8000540 <main+0x38>)
 8000524:	4807      	ldr	r0, [pc, #28]	@ (8000544 <main+0x3c>)
 8000526:	f001 fd7f 	bl	8002028 <HAL_UART_Receive>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1f5      	bne.n	800051c <main+0x14>
		  HAL_UART_Transmit(&huart2, &Buf, 1, 1000);
 8000530:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000534:	2201      	movs	r2, #1
 8000536:	4902      	ldr	r1, [pc, #8]	@ (8000540 <main+0x38>)
 8000538:	4802      	ldr	r0, [pc, #8]	@ (8000544 <main+0x3c>)
 800053a:	f001 fce7 	bl	8001f0c <HAL_UART_Transmit>
	  if(HAL_UART_Receive(&huart2, &Buf, 1, 1000) == HAL_OK){
 800053e:	e7ed      	b.n	800051c <main+0x14>
 8000540:	200000bc 	.word	0x200000bc
 8000544:	20000028 	.word	0x20000028

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	@ 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0318 	add.w	r3, r7, #24
 8000552:	2238      	movs	r2, #56	@ 0x38
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fc4c 	bl	8002df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800056e:	f000 fc5f 	bl	8000e30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000572:	2302      	movs	r3, #2
 8000574:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000576:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800057a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	2340      	movs	r3, #64	@ 0x40
 800057e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000588:	2301      	movs	r3, #1
 800058a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 800058c:	2315      	movs	r3, #21
 800058e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0318 	add.w	r3, r7, #24
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fcf9 	bl	8000f98 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80005ac:	f000 f87c 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2303      	movs	r3, #3
 80005b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2102      	movs	r1, #2
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fff7 	bl	80015bc <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005d4:	f000 f868 	bl	80006a8 <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3750      	adds	r7, #80	@ 0x50
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e4:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <MX_USART2_UART_Init+0x90>)
 80005e6:	4a23      	ldr	r2, [pc, #140]	@ (8000674 <MX_USART2_UART_Init+0x94>)
 80005e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ea:	4b21      	ldr	r3, [pc, #132]	@ (8000670 <MX_USART2_UART_Init+0x90>)
 80005ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <MX_USART2_UART_Init+0x90>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <MX_USART2_UART_Init+0x90>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <MX_USART2_UART_Init+0x90>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000604:	4b1a      	ldr	r3, [pc, #104]	@ (8000670 <MX_USART2_UART_Init+0x90>)
 8000606:	220c      	movs	r2, #12
 8000608:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060a:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <MX_USART2_UART_Init+0x90>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000610:	4b17      	ldr	r3, [pc, #92]	@ (8000670 <MX_USART2_UART_Init+0x90>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000616:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <MX_USART2_UART_Init+0x90>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800061c:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <MX_USART2_UART_Init+0x90>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000622:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <MX_USART2_UART_Init+0x90>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000628:	4811      	ldr	r0, [pc, #68]	@ (8000670 <MX_USART2_UART_Init+0x90>)
 800062a:	f001 fc1f 	bl	8001e6c <HAL_UART_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000634:	f000 f838 	bl	80006a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000638:	2100      	movs	r1, #0
 800063a:	480d      	ldr	r0, [pc, #52]	@ (8000670 <MX_USART2_UART_Init+0x90>)
 800063c:	f002 fb10 	bl	8002c60 <HAL_UARTEx_SetTxFifoThreshold>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000646:	f000 f82f 	bl	80006a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800064a:	2100      	movs	r1, #0
 800064c:	4808      	ldr	r0, [pc, #32]	@ (8000670 <MX_USART2_UART_Init+0x90>)
 800064e:	f002 fb45 	bl	8002cdc <HAL_UARTEx_SetRxFifoThreshold>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000658:	f000 f826 	bl	80006a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	@ (8000670 <MX_USART2_UART_Init+0x90>)
 800065e:	f002 fac6 	bl	8002bee <HAL_UARTEx_DisableFifoMode>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000668:	f000 f81e 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000028 	.word	0x20000028
 8000674:	40004400 	.word	0x40004400

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <MX_GPIO_Init+0x2c>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	4a08      	ldr	r2, [pc, #32]	@ (80006a4 <MX_GPIO_Init+0x2c>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <MX_GPIO_Init+0x2c>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <Error_Handler+0x8>

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <HAL_MspInit+0x44>)
 80006bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006be:	4a0e      	ldr	r2, [pc, #56]	@ (80006f8 <HAL_MspInit+0x44>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <HAL_MspInit+0x44>)
 80006c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <HAL_MspInit+0x44>)
 80006d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006d6:	4a08      	ldr	r2, [pc, #32]	@ (80006f8 <HAL_MspInit+0x44>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <HAL_MspInit+0x44>)
 80006e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006ea:	f000 fc45 	bl	8000f78 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000

080006fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09e      	sub	sp, #120	@ 0x78
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	2250      	movs	r2, #80	@ 0x50
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fb69 	bl	8002df4 <memset>
  if(huart->Instance==USART2)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a1f      	ldr	r2, [pc, #124]	@ (80007a4 <HAL_UART_MspInit+0xa8>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d136      	bne.n	800079a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800072c:	2302      	movs	r3, #2
 800072e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4618      	mov	r0, r3
 800073a:	f001 f95b 	bl	80019f4 <HAL_RCCEx_PeriphCLKConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000744:	f7ff ffb0 	bl	80006a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000748:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <HAL_UART_MspInit+0xac>)
 800074a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800074c:	4a16      	ldr	r2, [pc, #88]	@ (80007a8 <HAL_UART_MspInit+0xac>)
 800074e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000752:	6593      	str	r3, [r2, #88]	@ 0x58
 8000754:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <HAL_UART_MspInit+0xac>)
 8000756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <HAL_UART_MspInit+0xac>)
 8000762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000764:	4a10      	ldr	r2, [pc, #64]	@ (80007a8 <HAL_UART_MspInit+0xac>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076c:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <HAL_UART_MspInit+0xac>)
 800076e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000778:	230c      	movs	r3, #12
 800077a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	2302      	movs	r3, #2
 800077e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000788:	2307      	movs	r3, #7
 800078a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000790:	4619      	mov	r1, r3
 8000792:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000796:	f000 f9c9 	bl	8000b2c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800079a:	bf00      	nop
 800079c:	3778      	adds	r7, #120	@ 0x78
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40004400 	.word	0x40004400
 80007a8:	40021000 	.word	0x40021000

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <NMI_Handler+0x4>

080007b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <HardFault_Handler+0x4>

080007bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <MemManage_Handler+0x4>

080007c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000802:	f000 f891 	bl	8000928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <SystemInit+0x20>)
 8000812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000816:	4a05      	ldr	r2, [pc, #20]	@ (800082c <SystemInit+0x20>)
 8000818:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800081c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000830:	480d      	ldr	r0, [pc, #52]	@ (8000868 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000832:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000834:	f7ff ffea 	bl	800080c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000838:	480c      	ldr	r0, [pc, #48]	@ (800086c <LoopForever+0x6>)
  ldr r1, =_edata
 800083a:	490d      	ldr	r1, [pc, #52]	@ (8000870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800083c:	4a0d      	ldr	r2, [pc, #52]	@ (8000874 <LoopForever+0xe>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000850:	4c0a      	ldr	r4, [pc, #40]	@ (800087c <LoopForever+0x16>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085e:	f002 fad1 	bl	8002e04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000862:	f7ff fe51 	bl	8000508 <main>

08000866 <LoopForever>:

LoopForever:
    b LoopForever
 8000866:	e7fe      	b.n	8000866 <LoopForever>
  ldr   r0, =_estack
 8000868:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000870:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000874:	08002eb4 	.word	0x08002eb4
  ldr r2, =_sbss
 8000878:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800087c:	200000c4 	.word	0x200000c4

08000880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC1_2_IRQHandler>

08000882 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000888:	2300      	movs	r3, #0
 800088a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088c:	2003      	movs	r0, #3
 800088e:	f000 f91b 	bl	8000ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000892:	200f      	movs	r0, #15
 8000894:	f000 f80e 	bl	80008b4 <HAL_InitTick>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d002      	beq.n	80008a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	71fb      	strb	r3, [r7, #7]
 80008a2:	e001      	b.n	80008a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008a4:	f7ff ff06 	bl	80006b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008a8:	79fb      	ldrb	r3, [r7, #7]

}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008bc:	2300      	movs	r3, #0
 80008be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008c0:	4b16      	ldr	r3, [pc, #88]	@ (800091c <HAL_InitTick+0x68>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d022      	beq.n	800090e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008c8:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <HAL_InitTick+0x6c>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b13      	ldr	r3, [pc, #76]	@ (800091c <HAL_InitTick+0x68>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80008d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f918 	bl	8000b12 <HAL_SYSTICK_Config>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d10f      	bne.n	8000908 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b0f      	cmp	r3, #15
 80008ec:	d809      	bhi.n	8000902 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ee:	2200      	movs	r2, #0
 80008f0:	6879      	ldr	r1, [r7, #4]
 80008f2:	f04f 30ff 	mov.w	r0, #4294967295
 80008f6:	f000 f8f2 	bl	8000ade <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <HAL_InitTick+0x70>)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	e007      	b.n	8000912 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	73fb      	strb	r3, [r7, #15]
 8000906:	e004      	b.n	8000912 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	73fb      	strb	r3, [r7, #15]
 800090c:	e001      	b.n	8000912 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000912:	7bfb      	ldrb	r3, [r7, #15]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000008 	.word	0x20000008
 8000920:	20000000 	.word	0x20000000
 8000924:	20000004 	.word	0x20000004

08000928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800092c:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <HAL_IncTick+0x1c>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b05      	ldr	r3, [pc, #20]	@ (8000948 <HAL_IncTick+0x20>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4413      	add	r3, r2
 8000936:	4a03      	ldr	r2, [pc, #12]	@ (8000944 <HAL_IncTick+0x1c>)
 8000938:	6013      	str	r3, [r2, #0]
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	200000c0 	.word	0x200000c0
 8000948:	20000008 	.word	0x20000008

0800094c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return uwTick;
 8000950:	4b03      	ldr	r3, [pc, #12]	@ (8000960 <HAL_GetTick+0x14>)
 8000952:	681b      	ldr	r3, [r3, #0]
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	200000c0 	.word	0x200000c0

08000964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	@ (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <__NVIC_GetPriorityGrouping+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	f003 0307 	and.w	r3, r3, #7
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	db0a      	blt.n	80009f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	490c      	ldr	r1, [pc, #48]	@ (8000a14 <__NVIC_SetPriority+0x4c>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	440b      	add	r3, r1
 80009ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f0:	e00a      	b.n	8000a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4908      	ldr	r1, [pc, #32]	@ (8000a18 <__NVIC_SetPriority+0x50>)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	3b04      	subs	r3, #4
 8000a00:	0112      	lsls	r2, r2, #4
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	761a      	strb	r2, [r3, #24]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b089      	sub	sp, #36	@ 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f1c3 0307 	rsb	r3, r3, #7
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	bf28      	it	cs
 8000a3a:	2304      	movcs	r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3304      	adds	r3, #4
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d902      	bls.n	8000a4c <NVIC_EncodePriority+0x30>
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3b03      	subs	r3, #3
 8000a4a:	e000      	b.n	8000a4e <NVIC_EncodePriority+0x32>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	401a      	ands	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	43d9      	mvns	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	4313      	orrs	r3, r2
         );
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3724      	adds	r7, #36	@ 0x24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a94:	d301      	bcc.n	8000a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00f      	b.n	8000aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac4 <SysTick_Config+0x40>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f7ff ff8e 	bl	80009c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aac:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <SysTick_Config+0x40>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab2:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <SysTick_Config+0x40>)
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	e000e010 	.word	0xe000e010

08000ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff47 	bl	8000964 <__NVIC_SetPriorityGrouping>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000aec:	f7ff ff5e 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8000af0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	6978      	ldr	r0, [r7, #20]
 8000af8:	f7ff ff90 	bl	8000a1c <NVIC_EncodePriority>
 8000afc:	4602      	mov	r2, r0
 8000afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff5f 	bl	80009c8 <__NVIC_SetPriority>
}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ffb2 	bl	8000a84 <SysTick_Config>
 8000b20:	4603      	mov	r3, r0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b087      	sub	sp, #28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b3a:	e15a      	b.n	8000df2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	2101      	movs	r1, #1
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 814c 	beq.w	8000dec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 0303 	and.w	r3, r3, #3
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d005      	beq.n	8000b6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d130      	bne.n	8000bce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	2203      	movs	r2, #3
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	68da      	ldr	r2, [r3, #12]
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	091b      	lsrs	r3, r3, #4
 8000bb8:	f003 0201 	and.w	r2, r3, #1
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 0303 	and.w	r3, r3, #3
 8000bd6:	2b03      	cmp	r3, #3
 8000bd8:	d017      	beq.n	8000c0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d123      	bne.n	8000c5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	08da      	lsrs	r2, r3, #3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3208      	adds	r2, #8
 8000c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	220f      	movs	r2, #15
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	691a      	ldr	r2, [r3, #16]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	f003 0307 	and.w	r3, r3, #7
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	08da      	lsrs	r2, r3, #3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3208      	adds	r2, #8
 8000c58:	6939      	ldr	r1, [r7, #16]
 8000c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0203 	and.w	r2, r3, #3
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f000 80a6 	beq.w	8000dec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca0:	4b5b      	ldr	r3, [pc, #364]	@ (8000e10 <HAL_GPIO_Init+0x2e4>)
 8000ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ca4:	4a5a      	ldr	r2, [pc, #360]	@ (8000e10 <HAL_GPIO_Init+0x2e4>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cac:	4b58      	ldr	r3, [pc, #352]	@ (8000e10 <HAL_GPIO_Init+0x2e4>)
 8000cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cb8:	4a56      	ldr	r2, [pc, #344]	@ (8000e14 <HAL_GPIO_Init+0x2e8>)
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	089b      	lsrs	r3, r3, #2
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	220f      	movs	r2, #15
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ce2:	d01f      	beq.n	8000d24 <HAL_GPIO_Init+0x1f8>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a4c      	ldr	r2, [pc, #304]	@ (8000e18 <HAL_GPIO_Init+0x2ec>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d019      	beq.n	8000d20 <HAL_GPIO_Init+0x1f4>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a4b      	ldr	r2, [pc, #300]	@ (8000e1c <HAL_GPIO_Init+0x2f0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d013      	beq.n	8000d1c <HAL_GPIO_Init+0x1f0>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a4a      	ldr	r2, [pc, #296]	@ (8000e20 <HAL_GPIO_Init+0x2f4>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d00d      	beq.n	8000d18 <HAL_GPIO_Init+0x1ec>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a49      	ldr	r2, [pc, #292]	@ (8000e24 <HAL_GPIO_Init+0x2f8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d007      	beq.n	8000d14 <HAL_GPIO_Init+0x1e8>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a48      	ldr	r2, [pc, #288]	@ (8000e28 <HAL_GPIO_Init+0x2fc>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d101      	bne.n	8000d10 <HAL_GPIO_Init+0x1e4>
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	e00a      	b.n	8000d26 <HAL_GPIO_Init+0x1fa>
 8000d10:	2306      	movs	r3, #6
 8000d12:	e008      	b.n	8000d26 <HAL_GPIO_Init+0x1fa>
 8000d14:	2304      	movs	r3, #4
 8000d16:	e006      	b.n	8000d26 <HAL_GPIO_Init+0x1fa>
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e004      	b.n	8000d26 <HAL_GPIO_Init+0x1fa>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e002      	b.n	8000d26 <HAL_GPIO_Init+0x1fa>
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <HAL_GPIO_Init+0x1fa>
 8000d24:	2300      	movs	r3, #0
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	f002 0203 	and.w	r2, r2, #3
 8000d2c:	0092      	lsls	r2, r2, #2
 8000d2e:	4093      	lsls	r3, r2
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d36:	4937      	ldr	r1, [pc, #220]	@ (8000e14 <HAL_GPIO_Init+0x2e8>)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d44:	4b39      	ldr	r3, [pc, #228]	@ (8000e2c <HAL_GPIO_Init+0x300>)
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d68:	4a30      	ldr	r2, [pc, #192]	@ (8000e2c <HAL_GPIO_Init+0x300>)
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e2c <HAL_GPIO_Init+0x300>)
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d92:	4a26      	ldr	r2, [pc, #152]	@ (8000e2c <HAL_GPIO_Init+0x300>)
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000d98:	4b24      	ldr	r3, [pc, #144]	@ (8000e2c <HAL_GPIO_Init+0x300>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e2c <HAL_GPIO_Init+0x300>)
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <HAL_GPIO_Init+0x300>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000de6:	4a11      	ldr	r2, [pc, #68]	@ (8000e2c <HAL_GPIO_Init+0x300>)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	3301      	adds	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f47f ae9d 	bne.w	8000b3c <HAL_GPIO_Init+0x10>
  }
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010000 	.word	0x40010000
 8000e18:	48000400 	.word	0x48000400
 8000e1c:	48000800 	.word	0x48000800
 8000e20:	48000c00 	.word	0x48000c00
 8000e24:	48001000 	.word	0x48001000
 8000e28:	48001400 	.word	0x48001400
 8000e2c:	40010400 	.word	0x40010400

08000e30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d141      	bne.n	8000ec2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e3e:	4b4b      	ldr	r3, [pc, #300]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e4a:	d131      	bne.n	8000eb0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e4c:	4b47      	ldr	r3, [pc, #284]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e52:	4a46      	ldr	r2, [pc, #280]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e5c:	4b43      	ldr	r3, [pc, #268]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e64:	4a41      	ldr	r2, [pc, #260]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e6c:	4b40      	ldr	r3, [pc, #256]	@ (8000f70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2232      	movs	r2, #50	@ 0x32
 8000e72:	fb02 f303 	mul.w	r3, r2, r3
 8000e76:	4a3f      	ldr	r2, [pc, #252]	@ (8000f74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e78:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7c:	0c9b      	lsrs	r3, r3, #18
 8000e7e:	3301      	adds	r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e82:	e002      	b.n	8000e8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e8a:	4b38      	ldr	r3, [pc, #224]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e96:	d102      	bne.n	8000e9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1f2      	bne.n	8000e84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e9e:	4b33      	ldr	r3, [pc, #204]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eaa:	d158      	bne.n	8000f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e057      	b.n	8000f60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eb6:	4a2d      	ldr	r2, [pc, #180]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ebc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000ec0:	e04d      	b.n	8000f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ec8:	d141      	bne.n	8000f4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eca:	4b28      	ldr	r3, [pc, #160]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ed6:	d131      	bne.n	8000f3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ed8:	4b24      	ldr	r3, [pc, #144]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ede:	4a23      	ldr	r2, [pc, #140]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ee4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee8:	4b20      	ldr	r3, [pc, #128]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ef6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2232      	movs	r2, #50	@ 0x32
 8000efe:	fb02 f303 	mul.w	r3, r2, r3
 8000f02:	4a1c      	ldr	r2, [pc, #112]	@ (8000f74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f04:	fba2 2303 	umull	r2, r3, r2, r3
 8000f08:	0c9b      	lsrs	r3, r3, #18
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f0e:	e002      	b.n	8000f16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f22:	d102      	bne.n	8000f2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f2      	bne.n	8000f10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f36:	d112      	bne.n	8000f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e011      	b.n	8000f60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f42:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000f4c:	e007      	b.n	8000f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f4e:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	40007000 	.word	0x40007000
 8000f70:	20000000 	.word	0x20000000
 8000f74:	431bde83 	.word	0x431bde83

08000f78 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000f7c:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f86:	6093      	str	r3, [r2, #8]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40007000 	.word	0x40007000

08000f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e2fe      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d075      	beq.n	80010a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fb6:	4b97      	ldr	r3, [pc, #604]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fc0:	4b94      	ldr	r3, [pc, #592]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	2b0c      	cmp	r3, #12
 8000fce:	d102      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x3e>
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d002      	beq.n	8000fdc <HAL_RCC_OscConfig+0x44>
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d10b      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	4b8d      	ldr	r3, [pc, #564]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d05b      	beq.n	80010a0 <HAL_RCC_OscConfig+0x108>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d157      	bne.n	80010a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e2d9      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ffc:	d106      	bne.n	800100c <HAL_RCC_OscConfig+0x74>
 8000ffe:	4b85      	ldr	r3, [pc, #532]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a84      	ldr	r2, [pc, #528]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e01d      	b.n	8001048 <HAL_RCC_OscConfig+0xb0>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x98>
 8001016:	4b7f      	ldr	r3, [pc, #508]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a7e      	ldr	r2, [pc, #504]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b7c      	ldr	r3, [pc, #496]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a7b      	ldr	r2, [pc, #492]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e00b      	b.n	8001048 <HAL_RCC_OscConfig+0xb0>
 8001030:	4b78      	ldr	r3, [pc, #480]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a77      	ldr	r2, [pc, #476]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b75      	ldr	r3, [pc, #468]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a74      	ldr	r2, [pc, #464]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001042:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d013      	beq.n	8001078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001050:	f7ff fc7c 	bl	800094c <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fc78 	bl	800094c <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	@ 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e29e      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800106a:	4b6a      	ldr	r3, [pc, #424]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0xc0>
 8001076:	e014      	b.n	80010a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001078:	f7ff fc68 	bl	800094c <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fc64 	bl	800094c <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b64      	cmp	r3, #100	@ 0x64
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e28a      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001092:	4b60      	ldr	r3, [pc, #384]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0xe8>
 800109e:	e000      	b.n	80010a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d075      	beq.n	800119a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ae:	4b59      	ldr	r3, [pc, #356]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010b8:	4b56      	ldr	r3, [pc, #344]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	2b0c      	cmp	r3, #12
 80010c6:	d102      	bne.n	80010ce <HAL_RCC_OscConfig+0x136>
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d002      	beq.n	80010d4 <HAL_RCC_OscConfig+0x13c>
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d11f      	bne.n	8001114 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <HAL_RCC_OscConfig+0x154>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e25d      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ec:	4b49      	ldr	r3, [pc, #292]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	061b      	lsls	r3, r3, #24
 80010fa:	4946      	ldr	r1, [pc, #280]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001100:	4b45      	ldr	r3, [pc, #276]	@ (8001218 <HAL_RCC_OscConfig+0x280>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fbd5 	bl	80008b4 <HAL_InitTick>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d043      	beq.n	8001198 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e249      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d023      	beq.n	8001164 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800111c:	4b3d      	ldr	r3, [pc, #244]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a3c      	ldr	r2, [pc, #240]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001128:	f7ff fc10 	bl	800094c <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001130:	f7ff fc0c 	bl	800094c <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e232      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001142:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114e:	4b31      	ldr	r3, [pc, #196]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	061b      	lsls	r3, r3, #24
 800115c:	492d      	ldr	r1, [pc, #180]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 800115e:	4313      	orrs	r3, r2
 8001160:	604b      	str	r3, [r1, #4]
 8001162:	e01a      	b.n	800119a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001164:	4b2b      	ldr	r3, [pc, #172]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a2a      	ldr	r2, [pc, #168]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 800116a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800116e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001170:	f7ff fbec 	bl	800094c <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001178:	f7ff fbe8 	bl	800094c <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e20e      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800118a:	4b22      	ldr	r3, [pc, #136]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f0      	bne.n	8001178 <HAL_RCC_OscConfig+0x1e0>
 8001196:	e000      	b.n	800119a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001198:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d041      	beq.n	800122a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d01c      	beq.n	80011e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ae:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 80011b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011b4:	4a17      	ldr	r2, [pc, #92]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011be:	f7ff fbc5 	bl	800094c <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c6:	f7ff fbc1 	bl	800094c <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e1e7      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 80011da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0ef      	beq.n	80011c6 <HAL_RCC_OscConfig+0x22e>
 80011e6:	e020      	b.n	800122a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 80011ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011ee:	4a09      	ldr	r2, [pc, #36]	@ (8001214 <HAL_RCC_OscConfig+0x27c>)
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f8:	f7ff fba8 	bl	800094c <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011fe:	e00d      	b.n	800121c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001200:	f7ff fba4 	bl	800094c <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d906      	bls.n	800121c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e1ca      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800121c:	4b8c      	ldr	r3, [pc, #560]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 800121e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1ea      	bne.n	8001200 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 80a6 	beq.w	8001384 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800123c:	4b84      	ldr	r3, [pc, #528]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <HAL_RCC_OscConfig+0x2b4>
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <HAL_RCC_OscConfig+0x2b6>
 800124c:	2300      	movs	r3, #0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00d      	beq.n	800126e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	4b7f      	ldr	r3, [pc, #508]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001256:	4a7e      	ldr	r2, [pc, #504]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800125c:	6593      	str	r3, [r2, #88]	@ 0x58
 800125e:	4b7c      	ldr	r3, [pc, #496]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800126a:	2301      	movs	r3, #1
 800126c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800126e:	4b79      	ldr	r3, [pc, #484]	@ (8001454 <HAL_RCC_OscConfig+0x4bc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001276:	2b00      	cmp	r3, #0
 8001278:	d118      	bne.n	80012ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800127a:	4b76      	ldr	r3, [pc, #472]	@ (8001454 <HAL_RCC_OscConfig+0x4bc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a75      	ldr	r2, [pc, #468]	@ (8001454 <HAL_RCC_OscConfig+0x4bc>)
 8001280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001286:	f7ff fb61 	bl	800094c <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800128e:	f7ff fb5d 	bl	800094c <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e183      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001454 <HAL_RCC_OscConfig+0x4bc>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d108      	bne.n	80012c6 <HAL_RCC_OscConfig+0x32e>
 80012b4:	4b66      	ldr	r3, [pc, #408]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80012b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012ba:	4a65      	ldr	r2, [pc, #404]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80012c4:	e024      	b.n	8001310 <HAL_RCC_OscConfig+0x378>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d110      	bne.n	80012f0 <HAL_RCC_OscConfig+0x358>
 80012ce:	4b60      	ldr	r3, [pc, #384]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80012d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012d4:	4a5e      	ldr	r2, [pc, #376]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80012de:	4b5c      	ldr	r3, [pc, #368]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80012e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012e4:	4a5a      	ldr	r2, [pc, #360]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80012ee:	e00f      	b.n	8001310 <HAL_RCC_OscConfig+0x378>
 80012f0:	4b57      	ldr	r3, [pc, #348]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80012f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012f6:	4a56      	ldr	r2, [pc, #344]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80012f8:	f023 0301 	bic.w	r3, r3, #1
 80012fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001300:	4b53      	ldr	r3, [pc, #332]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001306:	4a52      	ldr	r2, [pc, #328]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001308:	f023 0304 	bic.w	r3, r3, #4
 800130c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d016      	beq.n	8001346 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001318:	f7ff fb18 	bl	800094c <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800131e:	e00a      	b.n	8001336 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001320:	f7ff fb14 	bl	800094c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800132e:	4293      	cmp	r3, r2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e138      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001336:	4b46      	ldr	r3, [pc, #280]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0ed      	beq.n	8001320 <HAL_RCC_OscConfig+0x388>
 8001344:	e015      	b.n	8001372 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001346:	f7ff fb01 	bl	800094c <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800134c:	e00a      	b.n	8001364 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800134e:	f7ff fafd 	bl	800094c <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800135c:	4293      	cmp	r3, r2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e121      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001364:	4b3a      	ldr	r3, [pc, #232]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1ed      	bne.n	800134e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001372:	7ffb      	ldrb	r3, [r7, #31]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d105      	bne.n	8001384 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001378:	4b35      	ldr	r3, [pc, #212]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 800137a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137c:	4a34      	ldr	r2, [pc, #208]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 800137e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001382:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	2b00      	cmp	r3, #0
 800138e:	d03c      	beq.n	800140a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d01c      	beq.n	80013d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001398:	4b2d      	ldr	r3, [pc, #180]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 800139a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800139e:	4a2c      	ldr	r2, [pc, #176]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a8:	f7ff fad0 	bl	800094c <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013b0:	f7ff facc 	bl	800094c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e0f2      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013c2:	4b23      	ldr	r3, [pc, #140]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80013c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0ef      	beq.n	80013b0 <HAL_RCC_OscConfig+0x418>
 80013d0:	e01b      	b.n	800140a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80013d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80013d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80013da:	f023 0301 	bic.w	r3, r3, #1
 80013de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e2:	f7ff fab3 	bl	800094c <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013ea:	f7ff faaf 	bl	800094c <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e0d5      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013fc:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 80013fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1ef      	bne.n	80013ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80c9 	beq.w	80015a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001414:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 030c 	and.w	r3, r3, #12
 800141c:	2b0c      	cmp	r3, #12
 800141e:	f000 8083 	beq.w	8001528 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d15e      	bne.n	80014e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <HAL_RCC_OscConfig+0x4b8>)
 8001430:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001436:	f7ff fa89 	bl	800094c <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800143c:	e00c      	b.n	8001458 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143e:	f7ff fa85 	bl	800094c <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d905      	bls.n	8001458 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e0ab      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
 8001450:	40021000 	.word	0x40021000
 8001454:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001458:	4b55      	ldr	r3, [pc, #340]	@ (80015b0 <HAL_RCC_OscConfig+0x618>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1ec      	bne.n	800143e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001464:	4b52      	ldr	r3, [pc, #328]	@ (80015b0 <HAL_RCC_OscConfig+0x618>)
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	4b52      	ldr	r3, [pc, #328]	@ (80015b4 <HAL_RCC_OscConfig+0x61c>)
 800146a:	4013      	ands	r3, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6a11      	ldr	r1, [r2, #32]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001474:	3a01      	subs	r2, #1
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	4311      	orrs	r1, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800147e:	0212      	lsls	r2, r2, #8
 8001480:	4311      	orrs	r1, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001486:	0852      	lsrs	r2, r2, #1
 8001488:	3a01      	subs	r2, #1
 800148a:	0552      	lsls	r2, r2, #21
 800148c:	4311      	orrs	r1, r2
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001492:	0852      	lsrs	r2, r2, #1
 8001494:	3a01      	subs	r2, #1
 8001496:	0652      	lsls	r2, r2, #25
 8001498:	4311      	orrs	r1, r2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800149e:	06d2      	lsls	r2, r2, #27
 80014a0:	430a      	orrs	r2, r1
 80014a2:	4943      	ldr	r1, [pc, #268]	@ (80015b0 <HAL_RCC_OscConfig+0x618>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a8:	4b41      	ldr	r3, [pc, #260]	@ (80015b0 <HAL_RCC_OscConfig+0x618>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a40      	ldr	r2, [pc, #256]	@ (80015b0 <HAL_RCC_OscConfig+0x618>)
 80014ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014b4:	4b3e      	ldr	r3, [pc, #248]	@ (80015b0 <HAL_RCC_OscConfig+0x618>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4a3d      	ldr	r2, [pc, #244]	@ (80015b0 <HAL_RCC_OscConfig+0x618>)
 80014ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fa44 	bl	800094c <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c8:	f7ff fa40 	bl	800094c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e066      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014da:	4b35      	ldr	r3, [pc, #212]	@ (80015b0 <HAL_RCC_OscConfig+0x618>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x530>
 80014e6:	e05e      	b.n	80015a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e8:	4b31      	ldr	r3, [pc, #196]	@ (80015b0 <HAL_RCC_OscConfig+0x618>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a30      	ldr	r2, [pc, #192]	@ (80015b0 <HAL_RCC_OscConfig+0x618>)
 80014ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fa2a 	bl	800094c <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014fc:	f7ff fa26 	bl	800094c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e04c      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800150e:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <HAL_RCC_OscConfig+0x618>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800151a:	4b25      	ldr	r3, [pc, #148]	@ (80015b0 <HAL_RCC_OscConfig+0x618>)
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	4924      	ldr	r1, [pc, #144]	@ (80015b0 <HAL_RCC_OscConfig+0x618>)
 8001520:	4b25      	ldr	r3, [pc, #148]	@ (80015b8 <HAL_RCC_OscConfig+0x620>)
 8001522:	4013      	ands	r3, r2
 8001524:	60cb      	str	r3, [r1, #12]
 8001526:	e03e      	b.n	80015a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e039      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001534:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <HAL_RCC_OscConfig+0x618>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f003 0203 	and.w	r2, r3, #3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	429a      	cmp	r2, r3
 8001546:	d12c      	bne.n	80015a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001552:	3b01      	subs	r3, #1
 8001554:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001556:	429a      	cmp	r2, r3
 8001558:	d123      	bne.n	80015a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001564:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d11b      	bne.n	80015a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001574:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001576:	429a      	cmp	r2, r3
 8001578:	d113      	bne.n	80015a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001584:	085b      	lsrs	r3, r3, #1
 8001586:	3b01      	subs	r3, #1
 8001588:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800158a:	429a      	cmp	r2, r3
 800158c:	d109      	bne.n	80015a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001598:	085b      	lsrs	r3, r3, #1
 800159a:	3b01      	subs	r3, #1
 800159c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3720      	adds	r7, #32
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000
 80015b4:	019f800c 	.word	0x019f800c
 80015b8:	feeefffc 	.word	0xfeeefffc

080015bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e11e      	b.n	8001812 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015d4:	4b91      	ldr	r3, [pc, #580]	@ (800181c <HAL_RCC_ClockConfig+0x260>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 030f 	and.w	r3, r3, #15
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d910      	bls.n	8001604 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e2:	4b8e      	ldr	r3, [pc, #568]	@ (800181c <HAL_RCC_ClockConfig+0x260>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 020f 	bic.w	r2, r3, #15
 80015ea:	498c      	ldr	r1, [pc, #560]	@ (800181c <HAL_RCC_ClockConfig+0x260>)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f2:	4b8a      	ldr	r3, [pc, #552]	@ (800181c <HAL_RCC_ClockConfig+0x260>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e106      	b.n	8001812 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d073      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b03      	cmp	r3, #3
 8001616:	d129      	bne.n	800166c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001618:	4b81      	ldr	r3, [pc, #516]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0f4      	b.n	8001812 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001628:	f000 f99e 	bl	8001968 <RCC_GetSysClockFreqFromPLLSource>
 800162c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4a7c      	ldr	r2, [pc, #496]	@ (8001824 <HAL_RCC_ClockConfig+0x268>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d93f      	bls.n	80016b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001636:	4b7a      	ldr	r3, [pc, #488]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d009      	beq.n	8001656 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800164a:	2b00      	cmp	r3, #0
 800164c:	d033      	beq.n	80016b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001652:	2b00      	cmp	r3, #0
 8001654:	d12f      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001656:	4b72      	ldr	r3, [pc, #456]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800165e:	4a70      	ldr	r2, [pc, #448]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 8001660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001664:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001666:	2380      	movs	r3, #128	@ 0x80
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e024      	b.n	80016b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d107      	bne.n	8001684 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001674:	4b6a      	ldr	r3, [pc, #424]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d109      	bne.n	8001694 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0c6      	b.n	8001812 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001684:	4b66      	ldr	r3, [pc, #408]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0be      	b.n	8001812 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001694:	f000 f8ce 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 8001698:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4a61      	ldr	r2, [pc, #388]	@ (8001824 <HAL_RCC_ClockConfig+0x268>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d909      	bls.n	80016b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80016a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80016aa:	4a5d      	ldr	r2, [pc, #372]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 80016ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80016b2:	2380      	movs	r3, #128	@ 0x80
 80016b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f023 0203 	bic.w	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4957      	ldr	r1, [pc, #348]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016c8:	f7ff f940 	bl	800094c <HAL_GetTick>
 80016cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d0:	f7ff f93c 	bl	800094c <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e095      	b.n	8001812 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 020c 	and.w	r2, r3, #12
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d1eb      	bne.n	80016d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d023      	beq.n	800174c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001710:	4b43      	ldr	r3, [pc, #268]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4a42      	ldr	r2, [pc, #264]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 8001716:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800171a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d007      	beq.n	8001738 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001728:	4b3d      	ldr	r3, [pc, #244]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001730:	4a3b      	ldr	r2, [pc, #236]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 8001732:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001736:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b39      	ldr	r3, [pc, #228]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4936      	ldr	r1, [pc, #216]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
 800174a:	e008      	b.n	800175e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2b80      	cmp	r3, #128	@ 0x80
 8001750:	d105      	bne.n	800175e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001752:	4b33      	ldr	r3, [pc, #204]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	4a32      	ldr	r2, [pc, #200]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 8001758:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800175c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800175e:	4b2f      	ldr	r3, [pc, #188]	@ (800181c <HAL_RCC_ClockConfig+0x260>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d21d      	bcs.n	80017a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176c:	4b2b      	ldr	r3, [pc, #172]	@ (800181c <HAL_RCC_ClockConfig+0x260>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f023 020f 	bic.w	r2, r3, #15
 8001774:	4929      	ldr	r1, [pc, #164]	@ (800181c <HAL_RCC_ClockConfig+0x260>)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800177c:	f7ff f8e6 	bl	800094c <HAL_GetTick>
 8001780:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	e00a      	b.n	800179a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001784:	f7ff f8e2 	bl	800094c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e03b      	b.n	8001812 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <HAL_RCC_ClockConfig+0x260>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d1ed      	bne.n	8001784 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4917      	ldr	r1, [pc, #92]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d2:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	490f      	ldr	r1, [pc, #60]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017e6:	f000 f825 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 80017ea:	4602      	mov	r2, r0
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <HAL_RCC_ClockConfig+0x264>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	490c      	ldr	r1, [pc, #48]	@ (8001828 <HAL_RCC_ClockConfig+0x26c>)
 80017f8:	5ccb      	ldrb	r3, [r1, r3]
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001802:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <HAL_RCC_ClockConfig+0x270>)
 8001804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001806:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <HAL_RCC_ClockConfig+0x274>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff f852 	bl	80008b4 <HAL_InitTick>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40022000 	.word	0x40022000
 8001820:	40021000 	.word	0x40021000
 8001824:	04c4b400 	.word	0x04c4b400
 8001828:	08002e64 	.word	0x08002e64
 800182c:	20000000 	.word	0x20000000
 8001830:	20000004 	.word	0x20000004

08001834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800183a:	4b2c      	ldr	r3, [pc, #176]	@ (80018ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b04      	cmp	r3, #4
 8001844:	d102      	bne.n	800184c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001846:	4b2a      	ldr	r3, [pc, #168]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	e047      	b.n	80018dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800184c:	4b27      	ldr	r3, [pc, #156]	@ (80018ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b08      	cmp	r3, #8
 8001856:	d102      	bne.n	800185e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001858:	4b26      	ldr	r3, [pc, #152]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	e03e      	b.n	80018dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800185e:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b0c      	cmp	r3, #12
 8001868:	d136      	bne.n	80018d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001874:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3301      	adds	r3, #1
 8001880:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d10c      	bne.n	80018a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001888:	4a1a      	ldr	r2, [pc, #104]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001890:	4a16      	ldr	r2, [pc, #88]	@ (80018ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001892:	68d2      	ldr	r2, [r2, #12]
 8001894:	0a12      	lsrs	r2, r2, #8
 8001896:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800189a:	fb02 f303 	mul.w	r3, r2, r3
 800189e:	617b      	str	r3, [r7, #20]
      break;
 80018a0:	e00c      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018a2:	4a13      	ldr	r2, [pc, #76]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	4a10      	ldr	r2, [pc, #64]	@ (80018ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ac:	68d2      	ldr	r2, [r2, #12]
 80018ae:	0a12      	lsrs	r2, r2, #8
 80018b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80018b4:	fb02 f303 	mul.w	r3, r2, r3
 80018b8:	617b      	str	r3, [r7, #20]
      break;
 80018ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0e5b      	lsrs	r3, r3, #25
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	3301      	adds	r3, #1
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	e001      	b.n	80018dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80018dc:	693b      	ldr	r3, [r7, #16]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	00f42400 	.word	0x00f42400
 80018f4:	007a1200 	.word	0x007a1200

080018f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018fc:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_RCC_GetHCLKFreq+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000000 	.word	0x20000000

08001910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001914:	f7ff fff0 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_RCC_GetPCLK1Freq+0x24>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4904      	ldr	r1, [pc, #16]	@ (8001938 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001930:	4618      	mov	r0, r3
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40021000 	.word	0x40021000
 8001938:	08002e74 	.word	0x08002e74

0800193c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001940:	f7ff ffda 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001944:	4602      	mov	r2, r0
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	0adb      	lsrs	r3, r3, #11
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	4904      	ldr	r1, [pc, #16]	@ (8001964 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001952:	5ccb      	ldrb	r3, [r1, r3]
 8001954:	f003 031f 	and.w	r3, r3, #31
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800195c:	4618      	mov	r0, r3
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40021000 	.word	0x40021000
 8001964:	08002e74 	.word	0x08002e74

08001968 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800196e:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001978:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3301      	adds	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d10c      	bne.n	80019a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800198c:	4a17      	ldr	r2, [pc, #92]	@ (80019ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	fbb2 f3f3 	udiv	r3, r2, r3
 8001994:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001996:	68d2      	ldr	r2, [r2, #12]
 8001998:	0a12      	lsrs	r2, r2, #8
 800199a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	617b      	str	r3, [r7, #20]
    break;
 80019a4:	e00c      	b.n	80019c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019a6:	4a12      	ldr	r2, [pc, #72]	@ (80019f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	4a0e      	ldr	r2, [pc, #56]	@ (80019e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019b0:	68d2      	ldr	r2, [r2, #12]
 80019b2:	0a12      	lsrs	r2, r2, #8
 80019b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80019b8:	fb02 f303 	mul.w	r3, r2, r3
 80019bc:	617b      	str	r3, [r7, #20]
    break;
 80019be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019c0:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0e5b      	lsrs	r3, r3, #25
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	3301      	adds	r3, #1
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80019da:	687b      	ldr	r3, [r7, #4]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	371c      	adds	r7, #28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	40021000 	.word	0x40021000
 80019ec:	007a1200 	.word	0x007a1200
 80019f0:	00f42400 	.word	0x00f42400

080019f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80019fc:	2300      	movs	r3, #0
 80019fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a00:	2300      	movs	r3, #0
 8001a02:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 8098 	beq.w	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a16:	4b43      	ldr	r3, [pc, #268]	@ (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10d      	bne.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	4b40      	ldr	r3, [pc, #256]	@ (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a26:	4a3f      	ldr	r2, [pc, #252]	@ (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a39      	ldr	r2, [pc, #228]	@ (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a4a:	f7fe ff7f 	bl	800094c <HAL_GetTick>
 8001a4e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a50:	e009      	b.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a52:	f7fe ff7b 	bl	800094c <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d902      	bls.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	74fb      	strb	r3, [r7, #19]
        break;
 8001a64:	e005      	b.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a66:	4b30      	ldr	r3, [pc, #192]	@ (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0ef      	beq.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001a72:	7cfb      	ldrb	r3, [r7, #19]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d159      	bne.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a78:	4b2a      	ldr	r3, [pc, #168]	@ (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a82:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d01e      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d019      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a94:	4b23      	ldr	r3, [pc, #140]	@ (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001aa0:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ab8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ac0:	4a18      	ldr	r2, [pc, #96]	@ (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d016      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad2:	f7fe ff3b 	bl	800094c <HAL_GetTick>
 8001ad6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad8:	e00b      	b.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ada:	f7fe ff37 	bl	800094c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d902      	bls.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	74fb      	strb	r3, [r7, #19]
            break;
 8001af0:	e006      	b.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ec      	beq.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001b00:	7cfb      	ldrb	r3, [r7, #19]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10b      	bne.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b06:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b14:	4903      	ldr	r1, [pc, #12]	@ (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001b1c:	e008      	b.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b1e:	7cfb      	ldrb	r3, [r7, #19]
 8001b20:	74bb      	strb	r3, [r7, #18]
 8001b22:	e005      	b.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b2c:	7cfb      	ldrb	r3, [r7, #19]
 8001b2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b30:	7c7b      	ldrb	r3, [r7, #17]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d105      	bne.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b36:	4ba7      	ldr	r3, [pc, #668]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3a:	4aa6      	ldr	r2, [pc, #664]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b40:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00a      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b4e:	4ba1      	ldr	r3, [pc, #644]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b54:	f023 0203 	bic.w	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	499d      	ldr	r1, [pc, #628]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00a      	beq.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b70:	4b98      	ldr	r3, [pc, #608]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b76:	f023 020c 	bic.w	r2, r3, #12
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	4995      	ldr	r1, [pc, #596]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00a      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b92:	4b90      	ldr	r3, [pc, #576]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	498c      	ldr	r1, [pc, #560]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00a      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001bb4:	4b87      	ldr	r3, [pc, #540]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	4984      	ldr	r1, [pc, #528]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00a      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001bd6:	4b7f      	ldr	r3, [pc, #508]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	497b      	ldr	r1, [pc, #492]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00a      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001bf8:	4b76      	ldr	r3, [pc, #472]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bfe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	4973      	ldr	r1, [pc, #460]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00a      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c20:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	496a      	ldr	r1, [pc, #424]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00a      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c3c:	4b65      	ldr	r3, [pc, #404]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c42:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	4962      	ldr	r1, [pc, #392]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00a      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6c:	4959      	ldr	r1, [pc, #356]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00a      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c80:	4b54      	ldr	r3, [pc, #336]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c86:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8e:	4951      	ldr	r1, [pc, #324]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d015      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ca2:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ca8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb0:	4948      	ldr	r1, [pc, #288]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cc0:	d105      	bne.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001cc2:	4b44      	ldr	r3, [pc, #272]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	4a43      	ldr	r2, [pc, #268]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cc8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ccc:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d015      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001cda:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ce0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce8:	493a      	ldr	r1, [pc, #232]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cf8:	d105      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001cfa:	4b36      	ldr	r3, [pc, #216]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	4a35      	ldr	r2, [pc, #212]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d04:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d015      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001d12:	4b30      	ldr	r3, [pc, #192]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d18:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d20:	492c      	ldr	r1, [pc, #176]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d30:	d105      	bne.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d32:	4b28      	ldr	r3, [pc, #160]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	4a27      	ldr	r2, [pc, #156]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d3c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d015      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d4a:	4b22      	ldr	r3, [pc, #136]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d50:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d58:	491e      	ldr	r1, [pc, #120]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001d68:	d105      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	4a19      	ldr	r2, [pc, #100]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d74:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d015      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001d82:	4b14      	ldr	r3, [pc, #80]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d88:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d90:	4910      	ldr	r1, [pc, #64]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001da0:	d105      	bne.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001da2:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001da8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001dac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d018      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	4902      	ldr	r1, [pc, #8]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	e001      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001dde:	d105      	bne.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001de0:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4a20      	ldr	r2, [pc, #128]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001de6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d015      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8001df8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dfe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	4918      	ldr	r1, [pc, #96]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e16:	d105      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001e18:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4a12      	ldr	r2, [pc, #72]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e22:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d015      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001e30:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e3e:	490a      	ldr	r1, [pc, #40]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e4e:	d105      	bne.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e50:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4a04      	ldr	r2, [pc, #16]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001e5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000

08001e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e042      	b.n	8001f04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d106      	bne.n	8001e96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7fe fc33 	bl	80006fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2224      	movs	r2, #36	@ 0x24
 8001e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fc7a 	bl	80027b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f97b 	bl	80021b8 <UART_SetConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e01b      	b.n	8001f04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 fcf9 	bl	80028f4 <UART_CheckIdleState>
 8001f02:	4603      	mov	r3, r0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	@ 0x28
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f22:	2b20      	cmp	r3, #32
 8001f24:	d17b      	bne.n	800201e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <HAL_UART_Transmit+0x26>
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e074      	b.n	8002020 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2221      	movs	r2, #33	@ 0x21
 8001f42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f46:	f7fe fd01 	bl	800094c <HAL_GetTick>
 8001f4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	88fa      	ldrh	r2, [r7, #6]
 8001f50:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	88fa      	ldrh	r2, [r7, #6]
 8001f58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f64:	d108      	bne.n	8001f78 <HAL_UART_Transmit+0x6c>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d104      	bne.n	8001f78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	e003      	b.n	8001f80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f80:	e030      	b.n	8001fe4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2180      	movs	r1, #128	@ 0x80
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 fd5b 	bl	8002a48 <UART_WaitOnFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e03d      	b.n	8002020 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fb8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	e007      	b.n	8001fd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1c8      	bne.n	8001f82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2140      	movs	r1, #64	@ 0x40
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 fd24 	bl	8002a48 <UART_WaitOnFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2220      	movs	r2, #32
 800200a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e006      	b.n	8002020 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2220      	movs	r2, #32
 8002016:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800201e:	2302      	movs	r3, #2
  }
}
 8002020:	4618      	mov	r0, r3
 8002022:	3720      	adds	r7, #32
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	@ 0x28
 800202c:	af02      	add	r7, sp, #8
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	4613      	mov	r3, r2
 8002036:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800203e:	2b20      	cmp	r3, #32
 8002040:	f040 80b5 	bne.w	80021ae <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_UART_Receive+0x28>
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0ad      	b.n	80021b0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2222      	movs	r2, #34	@ 0x22
 8002060:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800206a:	f7fe fc6f 	bl	800094c <HAL_GetTick>
 800206e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	88fa      	ldrh	r2, [r7, #6]
 8002074:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	88fa      	ldrh	r2, [r7, #6]
 800207c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002088:	d10e      	bne.n	80020a8 <HAL_UART_Receive+0x80>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <HAL_UART_Receive+0x76>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002098:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800209c:	e02d      	b.n	80020fa <HAL_UART_Receive+0xd2>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	22ff      	movs	r2, #255	@ 0xff
 80020a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80020a6:	e028      	b.n	80020fa <HAL_UART_Receive+0xd2>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10d      	bne.n	80020cc <HAL_UART_Receive+0xa4>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d104      	bne.n	80020c2 <HAL_UART_Receive+0x9a>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	22ff      	movs	r2, #255	@ 0xff
 80020bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80020c0:	e01b      	b.n	80020fa <HAL_UART_Receive+0xd2>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	227f      	movs	r2, #127	@ 0x7f
 80020c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80020ca:	e016      	b.n	80020fa <HAL_UART_Receive+0xd2>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020d4:	d10d      	bne.n	80020f2 <HAL_UART_Receive+0xca>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d104      	bne.n	80020e8 <HAL_UART_Receive+0xc0>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	227f      	movs	r2, #127	@ 0x7f
 80020e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80020e6:	e008      	b.n	80020fa <HAL_UART_Receive+0xd2>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	223f      	movs	r2, #63	@ 0x3f
 80020ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80020f0:	e003      	b.n	80020fa <HAL_UART_Receive+0xd2>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002100:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800210a:	d108      	bne.n	800211e <HAL_UART_Receive+0xf6>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d104      	bne.n	800211e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	e003      	b.n	8002126 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002126:	e036      	b.n	8002196 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2200      	movs	r2, #0
 8002130:	2120      	movs	r1, #32
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 fc88 	bl	8002a48 <UART_WaitOnFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2220      	movs	r2, #32
 8002142:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e032      	b.n	80021b0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10c      	bne.n	800216a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	b29a      	uxth	r2, r3
 8002158:	8a7b      	ldrh	r3, [r7, #18]
 800215a:	4013      	ands	r3, r2
 800215c:	b29a      	uxth	r2, r3
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	3302      	adds	r3, #2
 8002166:	61bb      	str	r3, [r7, #24]
 8002168:	e00c      	b.n	8002184 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	b2da      	uxtb	r2, r3
 8002172:	8a7b      	ldrh	r3, [r7, #18]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	4013      	ands	r3, r2
 8002178:	b2da      	uxtb	r2, r3
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3301      	adds	r3, #1
 8002182:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800218a:	b29b      	uxth	r3, r3
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1c2      	bne.n	8002128 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e000      	b.n	80021b0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80021ae:	2302      	movs	r3, #2
  }
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3720      	adds	r7, #32
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021bc:	b08c      	sub	sp, #48	@ 0x30
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	431a      	orrs	r2, r3
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	4313      	orrs	r3, r2
 80021de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4baa      	ldr	r3, [pc, #680]	@ (8002490 <UART_SetConfig+0x2d8>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021f0:	430b      	orrs	r3, r1
 80021f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a9f      	ldr	r2, [pc, #636]	@ (8002494 <UART_SetConfig+0x2dc>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d004      	beq.n	8002224 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002220:	4313      	orrs	r3, r2
 8002222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800222e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002238:	430b      	orrs	r3, r1
 800223a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002242:	f023 010f 	bic.w	r1, r3, #15
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a90      	ldr	r2, [pc, #576]	@ (8002498 <UART_SetConfig+0x2e0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d125      	bne.n	80022a8 <UART_SetConfig+0xf0>
 800225c:	4b8f      	ldr	r3, [pc, #572]	@ (800249c <UART_SetConfig+0x2e4>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b03      	cmp	r3, #3
 8002268:	d81a      	bhi.n	80022a0 <UART_SetConfig+0xe8>
 800226a:	a201      	add	r2, pc, #4	@ (adr r2, 8002270 <UART_SetConfig+0xb8>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	08002281 	.word	0x08002281
 8002274:	08002291 	.word	0x08002291
 8002278:	08002289 	.word	0x08002289
 800227c:	08002299 	.word	0x08002299
 8002280:	2301      	movs	r3, #1
 8002282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002286:	e116      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002288:	2302      	movs	r3, #2
 800228a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800228e:	e112      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002290:	2304      	movs	r3, #4
 8002292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002296:	e10e      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002298:	2308      	movs	r3, #8
 800229a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800229e:	e10a      	b.n	80024b6 <UART_SetConfig+0x2fe>
 80022a0:	2310      	movs	r3, #16
 80022a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80022a6:	e106      	b.n	80024b6 <UART_SetConfig+0x2fe>
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a7c      	ldr	r2, [pc, #496]	@ (80024a0 <UART_SetConfig+0x2e8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d138      	bne.n	8002324 <UART_SetConfig+0x16c>
 80022b2:	4b7a      	ldr	r3, [pc, #488]	@ (800249c <UART_SetConfig+0x2e4>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b0c      	cmp	r3, #12
 80022be:	d82d      	bhi.n	800231c <UART_SetConfig+0x164>
 80022c0:	a201      	add	r2, pc, #4	@ (adr r2, 80022c8 <UART_SetConfig+0x110>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	080022fd 	.word	0x080022fd
 80022cc:	0800231d 	.word	0x0800231d
 80022d0:	0800231d 	.word	0x0800231d
 80022d4:	0800231d 	.word	0x0800231d
 80022d8:	0800230d 	.word	0x0800230d
 80022dc:	0800231d 	.word	0x0800231d
 80022e0:	0800231d 	.word	0x0800231d
 80022e4:	0800231d 	.word	0x0800231d
 80022e8:	08002305 	.word	0x08002305
 80022ec:	0800231d 	.word	0x0800231d
 80022f0:	0800231d 	.word	0x0800231d
 80022f4:	0800231d 	.word	0x0800231d
 80022f8:	08002315 	.word	0x08002315
 80022fc:	2300      	movs	r3, #0
 80022fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002302:	e0d8      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002304:	2302      	movs	r3, #2
 8002306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800230a:	e0d4      	b.n	80024b6 <UART_SetConfig+0x2fe>
 800230c:	2304      	movs	r3, #4
 800230e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002312:	e0d0      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002314:	2308      	movs	r3, #8
 8002316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800231a:	e0cc      	b.n	80024b6 <UART_SetConfig+0x2fe>
 800231c:	2310      	movs	r3, #16
 800231e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002322:	e0c8      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a5e      	ldr	r2, [pc, #376]	@ (80024a4 <UART_SetConfig+0x2ec>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d125      	bne.n	800237a <UART_SetConfig+0x1c2>
 800232e:	4b5b      	ldr	r3, [pc, #364]	@ (800249c <UART_SetConfig+0x2e4>)
 8002330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002334:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002338:	2b30      	cmp	r3, #48	@ 0x30
 800233a:	d016      	beq.n	800236a <UART_SetConfig+0x1b2>
 800233c:	2b30      	cmp	r3, #48	@ 0x30
 800233e:	d818      	bhi.n	8002372 <UART_SetConfig+0x1ba>
 8002340:	2b20      	cmp	r3, #32
 8002342:	d00a      	beq.n	800235a <UART_SetConfig+0x1a2>
 8002344:	2b20      	cmp	r3, #32
 8002346:	d814      	bhi.n	8002372 <UART_SetConfig+0x1ba>
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <UART_SetConfig+0x19a>
 800234c:	2b10      	cmp	r3, #16
 800234e:	d008      	beq.n	8002362 <UART_SetConfig+0x1aa>
 8002350:	e00f      	b.n	8002372 <UART_SetConfig+0x1ba>
 8002352:	2300      	movs	r3, #0
 8002354:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002358:	e0ad      	b.n	80024b6 <UART_SetConfig+0x2fe>
 800235a:	2302      	movs	r3, #2
 800235c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002360:	e0a9      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002362:	2304      	movs	r3, #4
 8002364:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002368:	e0a5      	b.n	80024b6 <UART_SetConfig+0x2fe>
 800236a:	2308      	movs	r3, #8
 800236c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002370:	e0a1      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002372:	2310      	movs	r3, #16
 8002374:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002378:	e09d      	b.n	80024b6 <UART_SetConfig+0x2fe>
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a4a      	ldr	r2, [pc, #296]	@ (80024a8 <UART_SetConfig+0x2f0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d125      	bne.n	80023d0 <UART_SetConfig+0x218>
 8002384:	4b45      	ldr	r3, [pc, #276]	@ (800249c <UART_SetConfig+0x2e4>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800238e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002390:	d016      	beq.n	80023c0 <UART_SetConfig+0x208>
 8002392:	2bc0      	cmp	r3, #192	@ 0xc0
 8002394:	d818      	bhi.n	80023c8 <UART_SetConfig+0x210>
 8002396:	2b80      	cmp	r3, #128	@ 0x80
 8002398:	d00a      	beq.n	80023b0 <UART_SetConfig+0x1f8>
 800239a:	2b80      	cmp	r3, #128	@ 0x80
 800239c:	d814      	bhi.n	80023c8 <UART_SetConfig+0x210>
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <UART_SetConfig+0x1f0>
 80023a2:	2b40      	cmp	r3, #64	@ 0x40
 80023a4:	d008      	beq.n	80023b8 <UART_SetConfig+0x200>
 80023a6:	e00f      	b.n	80023c8 <UART_SetConfig+0x210>
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023ae:	e082      	b.n	80024b6 <UART_SetConfig+0x2fe>
 80023b0:	2302      	movs	r3, #2
 80023b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023b6:	e07e      	b.n	80024b6 <UART_SetConfig+0x2fe>
 80023b8:	2304      	movs	r3, #4
 80023ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023be:	e07a      	b.n	80024b6 <UART_SetConfig+0x2fe>
 80023c0:	2308      	movs	r3, #8
 80023c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023c6:	e076      	b.n	80024b6 <UART_SetConfig+0x2fe>
 80023c8:	2310      	movs	r3, #16
 80023ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023ce:	e072      	b.n	80024b6 <UART_SetConfig+0x2fe>
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a35      	ldr	r2, [pc, #212]	@ (80024ac <UART_SetConfig+0x2f4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d12a      	bne.n	8002430 <UART_SetConfig+0x278>
 80023da:	4b30      	ldr	r3, [pc, #192]	@ (800249c <UART_SetConfig+0x2e4>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80023e8:	d01a      	beq.n	8002420 <UART_SetConfig+0x268>
 80023ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80023ee:	d81b      	bhi.n	8002428 <UART_SetConfig+0x270>
 80023f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023f4:	d00c      	beq.n	8002410 <UART_SetConfig+0x258>
 80023f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023fa:	d815      	bhi.n	8002428 <UART_SetConfig+0x270>
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <UART_SetConfig+0x250>
 8002400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002404:	d008      	beq.n	8002418 <UART_SetConfig+0x260>
 8002406:	e00f      	b.n	8002428 <UART_SetConfig+0x270>
 8002408:	2300      	movs	r3, #0
 800240a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800240e:	e052      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002410:	2302      	movs	r3, #2
 8002412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002416:	e04e      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002418:	2304      	movs	r3, #4
 800241a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800241e:	e04a      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002420:	2308      	movs	r3, #8
 8002422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002426:	e046      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002428:	2310      	movs	r3, #16
 800242a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800242e:	e042      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a17      	ldr	r2, [pc, #92]	@ (8002494 <UART_SetConfig+0x2dc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d13a      	bne.n	80024b0 <UART_SetConfig+0x2f8>
 800243a:	4b18      	ldr	r3, [pc, #96]	@ (800249c <UART_SetConfig+0x2e4>)
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002440:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002444:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002448:	d01a      	beq.n	8002480 <UART_SetConfig+0x2c8>
 800244a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800244e:	d81b      	bhi.n	8002488 <UART_SetConfig+0x2d0>
 8002450:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002454:	d00c      	beq.n	8002470 <UART_SetConfig+0x2b8>
 8002456:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800245a:	d815      	bhi.n	8002488 <UART_SetConfig+0x2d0>
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <UART_SetConfig+0x2b0>
 8002460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002464:	d008      	beq.n	8002478 <UART_SetConfig+0x2c0>
 8002466:	e00f      	b.n	8002488 <UART_SetConfig+0x2d0>
 8002468:	2300      	movs	r3, #0
 800246a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800246e:	e022      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002470:	2302      	movs	r3, #2
 8002472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002476:	e01e      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002478:	2304      	movs	r3, #4
 800247a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800247e:	e01a      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002480:	2308      	movs	r3, #8
 8002482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002486:	e016      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002488:	2310      	movs	r3, #16
 800248a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800248e:	e012      	b.n	80024b6 <UART_SetConfig+0x2fe>
 8002490:	cfff69f3 	.word	0xcfff69f3
 8002494:	40008000 	.word	0x40008000
 8002498:	40013800 	.word	0x40013800
 800249c:	40021000 	.word	0x40021000
 80024a0:	40004400 	.word	0x40004400
 80024a4:	40004800 	.word	0x40004800
 80024a8:	40004c00 	.word	0x40004c00
 80024ac:	40005000 	.word	0x40005000
 80024b0:	2310      	movs	r3, #16
 80024b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4aae      	ldr	r2, [pc, #696]	@ (8002774 <UART_SetConfig+0x5bc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	f040 8097 	bne.w	80025f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80024c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d823      	bhi.n	8002512 <UART_SetConfig+0x35a>
 80024ca:	a201      	add	r2, pc, #4	@ (adr r2, 80024d0 <UART_SetConfig+0x318>)
 80024cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d0:	080024f5 	.word	0x080024f5
 80024d4:	08002513 	.word	0x08002513
 80024d8:	080024fd 	.word	0x080024fd
 80024dc:	08002513 	.word	0x08002513
 80024e0:	08002503 	.word	0x08002503
 80024e4:	08002513 	.word	0x08002513
 80024e8:	08002513 	.word	0x08002513
 80024ec:	08002513 	.word	0x08002513
 80024f0:	0800250b 	.word	0x0800250b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024f4:	f7ff fa0c 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 80024f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80024fa:	e010      	b.n	800251e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024fc:	4b9e      	ldr	r3, [pc, #632]	@ (8002778 <UART_SetConfig+0x5c0>)
 80024fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002500:	e00d      	b.n	800251e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002502:	f7ff f997 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 8002506:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002508:	e009      	b.n	800251e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800250a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002510:	e005      	b.n	800251e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800251c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800251e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8130 	beq.w	8002786 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	4a94      	ldr	r2, [pc, #592]	@ (800277c <UART_SetConfig+0x5c4>)
 800252c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002530:	461a      	mov	r2, r3
 8002532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002534:	fbb3 f3f2 	udiv	r3, r3, r2
 8002538:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4413      	add	r3, r2
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	429a      	cmp	r2, r3
 8002548:	d305      	bcc.n	8002556 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	429a      	cmp	r2, r3
 8002554:	d903      	bls.n	800255e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800255c:	e113      	b.n	8002786 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	2200      	movs	r2, #0
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	60fa      	str	r2, [r7, #12]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	4a84      	ldr	r2, [pc, #528]	@ (800277c <UART_SetConfig+0x5c4>)
 800256c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002570:	b29b      	uxth	r3, r3
 8002572:	2200      	movs	r2, #0
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800257c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002580:	f7fd fe4a 	bl	8000218 <__aeabi_uldivmod>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	020b      	lsls	r3, r1, #8
 8002596:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800259a:	0202      	lsls	r2, r0, #8
 800259c:	6979      	ldr	r1, [r7, #20]
 800259e:	6849      	ldr	r1, [r1, #4]
 80025a0:	0849      	lsrs	r1, r1, #1
 80025a2:	2000      	movs	r0, #0
 80025a4:	460c      	mov	r4, r1
 80025a6:	4605      	mov	r5, r0
 80025a8:	eb12 0804 	adds.w	r8, r2, r4
 80025ac:	eb43 0905 	adc.w	r9, r3, r5
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	469a      	mov	sl, r3
 80025b8:	4693      	mov	fp, r2
 80025ba:	4652      	mov	r2, sl
 80025bc:	465b      	mov	r3, fp
 80025be:	4640      	mov	r0, r8
 80025c0:	4649      	mov	r1, r9
 80025c2:	f7fd fe29 	bl	8000218 <__aeabi_uldivmod>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4613      	mov	r3, r2
 80025cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025d4:	d308      	bcc.n	80025e8 <UART_SetConfig+0x430>
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025dc:	d204      	bcs.n	80025e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6a3a      	ldr	r2, [r7, #32]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	e0ce      	b.n	8002786 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80025ee:	e0ca      	b.n	8002786 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025f8:	d166      	bne.n	80026c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80025fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d827      	bhi.n	8002652 <UART_SetConfig+0x49a>
 8002602:	a201      	add	r2, pc, #4	@ (adr r2, 8002608 <UART_SetConfig+0x450>)
 8002604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002608:	0800262d 	.word	0x0800262d
 800260c:	08002635 	.word	0x08002635
 8002610:	0800263d 	.word	0x0800263d
 8002614:	08002653 	.word	0x08002653
 8002618:	08002643 	.word	0x08002643
 800261c:	08002653 	.word	0x08002653
 8002620:	08002653 	.word	0x08002653
 8002624:	08002653 	.word	0x08002653
 8002628:	0800264b 	.word	0x0800264b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800262c:	f7ff f970 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 8002630:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002632:	e014      	b.n	800265e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002634:	f7ff f982 	bl	800193c <HAL_RCC_GetPCLK2Freq>
 8002638:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800263a:	e010      	b.n	800265e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800263c:	4b4e      	ldr	r3, [pc, #312]	@ (8002778 <UART_SetConfig+0x5c0>)
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002640:	e00d      	b.n	800265e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002642:	f7ff f8f7 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 8002646:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002648:	e009      	b.n	800265e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800264a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800264e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002650:	e005      	b.n	800265e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800265c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8090 	beq.w	8002786 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	4a44      	ldr	r2, [pc, #272]	@ (800277c <UART_SetConfig+0x5c4>)
 800266c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002670:	461a      	mov	r2, r3
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	fbb3 f3f2 	udiv	r3, r3, r2
 8002678:	005a      	lsls	r2, r3, #1
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	085b      	lsrs	r3, r3, #1
 8002680:	441a      	add	r2, r3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	fbb2 f3f3 	udiv	r3, r2, r3
 800268a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	2b0f      	cmp	r3, #15
 8002690:	d916      	bls.n	80026c0 <UART_SetConfig+0x508>
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002698:	d212      	bcs.n	80026c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	b29b      	uxth	r3, r3
 800269e:	f023 030f 	bic.w	r3, r3, #15
 80026a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	8bfb      	ldrh	r3, [r7, #30]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	8bfa      	ldrh	r2, [r7, #30]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	e062      	b.n	8002786 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80026c6:	e05e      	b.n	8002786 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80026c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d828      	bhi.n	8002722 <UART_SetConfig+0x56a>
 80026d0:	a201      	add	r2, pc, #4	@ (adr r2, 80026d8 <UART_SetConfig+0x520>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	080026fd 	.word	0x080026fd
 80026dc:	08002705 	.word	0x08002705
 80026e0:	0800270d 	.word	0x0800270d
 80026e4:	08002723 	.word	0x08002723
 80026e8:	08002713 	.word	0x08002713
 80026ec:	08002723 	.word	0x08002723
 80026f0:	08002723 	.word	0x08002723
 80026f4:	08002723 	.word	0x08002723
 80026f8:	0800271b 	.word	0x0800271b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026fc:	f7ff f908 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 8002700:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002702:	e014      	b.n	800272e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002704:	f7ff f91a 	bl	800193c <HAL_RCC_GetPCLK2Freq>
 8002708:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800270a:	e010      	b.n	800272e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800270c:	4b1a      	ldr	r3, [pc, #104]	@ (8002778 <UART_SetConfig+0x5c0>)
 800270e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002710:	e00d      	b.n	800272e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002712:	f7ff f88f 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 8002716:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002718:	e009      	b.n	800272e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800271a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800271e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002720:	e005      	b.n	800272e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800272c:	bf00      	nop
    }

    if (pclk != 0U)
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	2b00      	cmp	r3, #0
 8002732:	d028      	beq.n	8002786 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002738:	4a10      	ldr	r2, [pc, #64]	@ (800277c <UART_SetConfig+0x5c4>)
 800273a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800273e:	461a      	mov	r2, r3
 8002740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002742:	fbb3 f2f2 	udiv	r2, r3, r2
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	441a      	add	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	2b0f      	cmp	r3, #15
 800275c:	d910      	bls.n	8002780 <UART_SetConfig+0x5c8>
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002764:	d20c      	bcs.n	8002780 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	b29a      	uxth	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60da      	str	r2, [r3, #12]
 8002770:	e009      	b.n	8002786 <UART_SetConfig+0x5ce>
 8002772:	bf00      	nop
 8002774:	40008000 	.word	0x40008000
 8002778:	00f42400 	.word	0x00f42400
 800277c:	08002e7c 	.word	0x08002e7c
      }
      else
      {
        ret = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2201      	movs	r2, #1
 800278a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2201      	movs	r2, #1
 8002792:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2200      	movs	r2, #0
 800279a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2200      	movs	r2, #0
 80027a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80027a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3730      	adds	r7, #48	@ 0x30
 80027aa:	46bd      	mov	sp, r7
 80027ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080027b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01a      	beq.n	80028c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028ae:	d10a      	bne.n	80028c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	605a      	str	r2, [r3, #4]
  }
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b098      	sub	sp, #96	@ 0x60
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002904:	f7fe f822 	bl	800094c <HAL_GetTick>
 8002908:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b08      	cmp	r3, #8
 8002916:	d12f      	bne.n	8002978 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002918:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002920:	2200      	movs	r2, #0
 8002922:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f88e 	bl	8002a48 <UART_WaitOnFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d022      	beq.n	8002978 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800293a:	e853 3f00 	ldrex	r3, [r3]
 800293e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002946:	653b      	str	r3, [r7, #80]	@ 0x50
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002950:	647b      	str	r3, [r7, #68]	@ 0x44
 8002952:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002954:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002958:	e841 2300 	strex	r3, r2, [r1]
 800295c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800295e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e6      	bne.n	8002932 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e063      	b.n	8002a40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b04      	cmp	r3, #4
 8002984:	d149      	bne.n	8002a1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002986:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800298e:	2200      	movs	r2, #0
 8002990:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f857 	bl	8002a48 <UART_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d03c      	beq.n	8002a1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	e853 3f00 	ldrex	r3, [r3]
 80029ac:	623b      	str	r3, [r7, #32]
   return(result);
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029be:	633b      	str	r3, [r7, #48]	@ 0x30
 80029c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029c6:	e841 2300 	strex	r3, r2, [r1]
 80029ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80029cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1e6      	bne.n	80029a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	3308      	adds	r3, #8
 80029d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	e853 3f00 	ldrex	r3, [r3]
 80029e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f023 0301 	bic.w	r3, r3, #1
 80029e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	3308      	adds	r3, #8
 80029f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029f2:	61fa      	str	r2, [r7, #28]
 80029f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f6:	69b9      	ldr	r1, [r7, #24]
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	e841 2300 	strex	r3, r2, [r1]
 80029fe:	617b      	str	r3, [r7, #20]
   return(result);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1e5      	bne.n	80029d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e012      	b.n	8002a40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3758      	adds	r7, #88	@ 0x58
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a58:	e04f      	b.n	8002afa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d04b      	beq.n	8002afa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a62:	f7fd ff73 	bl	800094c <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e04e      	b.n	8002b1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d037      	beq.n	8002afa <UART_WaitOnFlagUntilTimeout+0xb2>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b80      	cmp	r3, #128	@ 0x80
 8002a8e:	d034      	beq.n	8002afa <UART_WaitOnFlagUntilTimeout+0xb2>
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b40      	cmp	r3, #64	@ 0x40
 8002a94:	d031      	beq.n	8002afa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d110      	bne.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f838 	bl	8002b22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e029      	b.n	8002b1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ad4:	d111      	bne.n	8002afa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ade:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f81e 	bl	8002b22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e00f      	b.n	8002b1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4013      	ands	r3, r2
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	bf0c      	ite	eq
 8002b0a:	2301      	moveq	r3, #1
 8002b0c:	2300      	movne	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d0a0      	beq.n	8002a5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b095      	sub	sp, #84	@ 0x54
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b32:	e853 3f00 	ldrex	r3, [r3]
 8002b36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b48:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b50:	e841 2300 	strex	r3, r2, [r1]
 8002b54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1e6      	bne.n	8002b2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3308      	adds	r3, #8
 8002b62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	e853 3f00 	ldrex	r3, [r3]
 8002b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	f023 0301 	bic.w	r3, r3, #1
 8002b76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3308      	adds	r3, #8
 8002b7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b88:	e841 2300 	strex	r3, r2, [r1]
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e3      	bne.n	8002b5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d118      	bne.n	8002bce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	e853 3f00 	ldrex	r3, [r3]
 8002ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f023 0310 	bic.w	r3, r3, #16
 8002bb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bba:	61bb      	str	r3, [r7, #24]
 8002bbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbe:	6979      	ldr	r1, [r7, #20]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	e841 2300 	strex	r3, r2, [r1]
 8002bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1e6      	bne.n	8002b9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002be2:	bf00      	nop
 8002be4:	3754      	adds	r7, #84	@ 0x54
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b085      	sub	sp, #20
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_UARTEx_DisableFifoMode+0x16>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e027      	b.n	8002c54 <HAL_UARTEx_DisableFifoMode+0x66>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2224      	movs	r2, #36	@ 0x24
 8002c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002c32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e02d      	b.n	8002cd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2224      	movs	r2, #36	@ 0x24
 8002c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f84f 	bl	8002d58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e02d      	b.n	8002d50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2224      	movs	r2, #36	@ 0x24
 8002d00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f811 	bl	8002d58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d108      	bne.n	8002d7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002d78:	e031      	b.n	8002dde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002d7e:	2308      	movs	r3, #8
 8002d80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	0e5b      	lsrs	r3, r3, #25
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	0f5b      	lsrs	r3, r3, #29
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002da2:	7bbb      	ldrb	r3, [r7, #14]
 8002da4:	7b3a      	ldrb	r2, [r7, #12]
 8002da6:	4911      	ldr	r1, [pc, #68]	@ (8002dec <UARTEx_SetNbDataToProcess+0x94>)
 8002da8:	5c8a      	ldrb	r2, [r1, r2]
 8002daa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002dae:	7b3a      	ldrb	r2, [r7, #12]
 8002db0:	490f      	ldr	r1, [pc, #60]	@ (8002df0 <UARTEx_SetNbDataToProcess+0x98>)
 8002db2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002db4:	fb93 f3f2 	sdiv	r3, r3, r2
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	7b7a      	ldrb	r2, [r7, #13]
 8002dc4:	4909      	ldr	r1, [pc, #36]	@ (8002dec <UARTEx_SetNbDataToProcess+0x94>)
 8002dc6:	5c8a      	ldrb	r2, [r1, r2]
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002dcc:	7b7a      	ldrb	r2, [r7, #13]
 8002dce:	4908      	ldr	r1, [pc, #32]	@ (8002df0 <UARTEx_SetNbDataToProcess+0x98>)
 8002dd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002dd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	08002e94 	.word	0x08002e94
 8002df0:	08002e9c 	.word	0x08002e9c

08002df4 <memset>:
 8002df4:	4402      	add	r2, r0
 8002df6:	4603      	mov	r3, r0
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d100      	bne.n	8002dfe <memset+0xa>
 8002dfc:	4770      	bx	lr
 8002dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8002e02:	e7f9      	b.n	8002df8 <memset+0x4>

08002e04 <__libc_init_array>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	4d0d      	ldr	r5, [pc, #52]	@ (8002e3c <__libc_init_array+0x38>)
 8002e08:	4c0d      	ldr	r4, [pc, #52]	@ (8002e40 <__libc_init_array+0x3c>)
 8002e0a:	1b64      	subs	r4, r4, r5
 8002e0c:	10a4      	asrs	r4, r4, #2
 8002e0e:	2600      	movs	r6, #0
 8002e10:	42a6      	cmp	r6, r4
 8002e12:	d109      	bne.n	8002e28 <__libc_init_array+0x24>
 8002e14:	4d0b      	ldr	r5, [pc, #44]	@ (8002e44 <__libc_init_array+0x40>)
 8002e16:	4c0c      	ldr	r4, [pc, #48]	@ (8002e48 <__libc_init_array+0x44>)
 8002e18:	f000 f818 	bl	8002e4c <_init>
 8002e1c:	1b64      	subs	r4, r4, r5
 8002e1e:	10a4      	asrs	r4, r4, #2
 8002e20:	2600      	movs	r6, #0
 8002e22:	42a6      	cmp	r6, r4
 8002e24:	d105      	bne.n	8002e32 <__libc_init_array+0x2e>
 8002e26:	bd70      	pop	{r4, r5, r6, pc}
 8002e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e2c:	4798      	blx	r3
 8002e2e:	3601      	adds	r6, #1
 8002e30:	e7ee      	b.n	8002e10 <__libc_init_array+0xc>
 8002e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e36:	4798      	blx	r3
 8002e38:	3601      	adds	r6, #1
 8002e3a:	e7f2      	b.n	8002e22 <__libc_init_array+0x1e>
 8002e3c:	08002eac 	.word	0x08002eac
 8002e40:	08002eac 	.word	0x08002eac
 8002e44:	08002eac 	.word	0x08002eac
 8002e48:	08002eb0 	.word	0x08002eb0

08002e4c <_init>:
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4e:	bf00      	nop
 8002e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e52:	bc08      	pop	{r3}
 8002e54:	469e      	mov	lr, r3
 8002e56:	4770      	bx	lr

08002e58 <_fini>:
 8002e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5a:	bf00      	nop
 8002e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5e:	bc08      	pop	{r3}
 8002e60:	469e      	mov	lr, r3
 8002e62:	4770      	bx	lr
